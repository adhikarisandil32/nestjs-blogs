var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AdminGuard.html",[0,3.088,1,2.629]],["body/guards/AdminGuard.html",[1,2.568,2,1.948,3,0.1,4,0.089,5,0.089,6,3.813,7,1.787,8,0.249,9,0.97,10,2.316,11,4.497,12,4.157,13,3.351,14,1.884,15,2.164,16,3.581,17,2.791,18,2.736,19,0.658,20,2.492,21,1.187,22,0.015,23,0.747,24,0.448,25,1.187,26,3.692,27,3.692,28,3.828,29,2.492,30,1.787,31,0.934,32,2.246,33,3.692,34,4.081,35,2.492,36,0.307,37,1.327,38,1.659,39,0.394,40,1.551,41,1.46,42,1.379,43,1.379,44,1.46,45,0.7,46,1.037,47,1.551,48,0.7,49,1.132,50,0.189,51,1.308,52,1.659,53,1.88,54,1.605,55,1.965,56,0.9,57,1.244,58,2.756,59,0.108,60,1.659,61,2.136,62,2.212,63,1.673,64,2.613,65,2.402,66,2.768,67,2.568,68,2.568,69,2.568,70,2.402,71,1.879,72,3.017,73,1.551,74,2.727,75,2.402,76,3.114,77,3.272,78,4.757,79,4.757,80,3.017,81,3.017,82,3.017,83,2.426,84,3.017,85,3.017,86,3.017,87,3.017,88,2.568,89,2.568,90,1.378,91,1.659,92,3.017,93,3.017,94,2.025,95,2.26,96,4.157,97,4.157,98,1.948,99,1.948,100,3.017,101,2.051,102,1.659,103,1.948,104,1.787,105,0.007,106,0.007]],["title/modules/AdminRouteModules.html",[107,0.887,108,2.629]],["body/modules/AdminRouteModules.html",[3,0.163,4,0.146,5,0.146,22,0.015,36,0.376,39,0.643,50,0.163,59,0.114,105,0.01,106,0.01,107,1.405,108,5.274,109,1.496,110,1.693,111,1.849,112,1.849,113,1.693,114,1.693,115,1.849,116,3.535,117,3.535,118,4.497,119,4.497,120,4.807,121,4.497,122,4.231,123,2.505,124,1.849,125,1.768,126,4.07,127,2.505,128,4.485,129,4.485,130,4.485,131,4.485,132,4.485,133,2.505,134,4.07,135,3.182,136,4.07,137,3.535,138,4.07,139,4.07,140,4.07,141,4.07,142,3.535,143,4.07,144,3.535]],["title/entities/Admins.html",[46,1.643,145,2.073]],["body/entities/Admins.html",[3,0.2,4,0.18,5,0.18,8,0.5,19,0.697,22,0.015,23,0.791,24,0.475,36,0.334,45,1.406,46,2.626,50,0.2,57,3.15,58,3.252,59,0.14,105,0.011,106,0.011,145,3.313,146,2.931,147,4.345,148,1.774,149,3.155,150,1.305,151,3.912,152,4.935,153,4.201,154,3.912,155,5.003,156,4.201,157,1.003,158,3.588,159,4.345,160,3.588,161,4.527,162,4.527,163,2.174,164,2.273]],["title/controllers/AdminsController.html",[129,2.833,165,1.452]],["body/controllers/AdminsController.html",[3,0.133,4,0.119,5,0.119,8,0.332,9,1.202,19,0.854,21,1.541,22,0.015,23,0.97,24,0.582,25,1.541,31,1.485,36,0.357,39,0.525,46,2.551,48,1.344,50,0.133,53,1.563,56,1.307,59,0.093,63,1.045,73,1.789,90,0.969,101,2.941,105,0.008,106,0.008,127,1.508,129,3.43,135,5.082,150,1.6,157,1.124,165,1.22,166,2.883,167,1.838,168,1.907,169,2.977,170,2.387,171,1.907,172,2.883,173,4.506,174,3.32,175,3.32,176,2.596,177,2.664,178,3.32,179,3.183,180,2.883,181,3.32,182,3.43,183,2.067,184,3.32,185,3.32,186,3.32,187,4.446,188,3.32,189,3.32,190,1.838,191,2.647,192,1.838,193,2.21,194,1.838,195,1.838,196,1.508,197,2.172,198,1.508,199,1.838,200,1.173,201,2.977,202,2.883,203,2.883,204,4.047,205,1.944,206,1.944,207,1.944,208,2.801,209,2.067,210,1.579,211,1.508,212,1.657,213,2.596,214,2.067,215,3.32,216,3.32,217,3.32,218,1.742,219,3.32,220,2.21,221,2.596,222,3.32,223,3.32,224,1.838,225,2.883,226,3.32,227,3.32,228,2.381,229,2.596,230,3.32,231,2.883,232,2.883,233,3.32]],["title/modules/AdminsModule.html",[107,0.887,118,2.459]],["body/modules/AdminsModule.html",[3,0.198,4,0.178,5,0.178,22,0.014,36,0.35,39,0.783,46,2.062,50,0.198,59,0.139,105,0.011,106,0.011,107,1.546,109,1.822,110,2.062,111,2.251,112,2.251,113,2.062,114,2.864,115,3.127,118,4.822,123,2.85,124,2.251,125,2.153,133,2.251,201,5.018,202,4.304,203,4.304,213,3.874,234,4.304,235,4.304,236,4.304,237,4.955,238,3.298,239,2.357,240,4.955]],["title/injectables/AdminsServiceAdmin.html",[37,1.11,201,2.459]],["body/injectables/AdminsServiceAdmin.html",[3,0.096,4,0.086,5,0.086,8,0.24,9,0.943,10,2.58,14,1.496,17,2.422,18,2.48,19,0.835,21,1.506,22,0.015,23,1.052,24,0.614,25,1.506,31,1.369,36,0.335,37,1.054,39,0.38,42,1.33,43,1.33,44,1.408,45,0.675,46,1.561,48,0.675,49,1.092,50,0.096,53,2.047,54,1.92,55,2.493,58,3.013,59,0.067,62,1.561,63,0.756,64,2.381,71,2.289,73,1.65,74,2.885,77,1.199,83,0.959,91,1.599,94,2.737,95,2.703,101,2.814,104,1.723,105,0.007,106,0.007,149,1.044,157,0.752,160,1.723,168,1.496,169,2.335,170,1.872,171,1.841,172,3.258,173,4.43,176,2.933,177,2.265,182,2.691,183,2.335,187,3.246,195,1.33,196,1.092,197,1.704,198,1.092,201,2.335,210,1.143,211,1.092,212,1.199,213,1.879,239,1.143,241,1.143,242,5.437,243,2.087,244,3.751,245,2.403,246,2.886,247,2.403,248,3.751,249,2.403,250,3.312,251,2.403,252,2.403,253,3.751,254,2.403,255,2.087,256,2.076,257,2.403,258,1.879,259,1.496,260,2.335,261,1.496,262,2.403,263,3.751,264,3.751,265,2.087,266,4.614,267,4.614,268,2.087,269,1.879,270,2.087,271,2.403,272,2.403,273,2.403,274,2.197,275,1.599,276,2.403,277,1.599,278,1.599,279,1.33,280,1.599,281,3.751,282,2.403,283,2.403,284,3.751,285,2.087,286,3.751,287,2.403,288,2.403,289,1.044,290,2.403]],["title/classes/AdminsTable1753017922617.html",[59,0.111,291,3.088]],["body/classes/AdminsTable1753017922617.html",[3,0.148,4,0.132,5,0.132,8,0.369,9,1.296,10,2.477,19,0.827,21,1.296,22,0.014,23,1.108,24,0.564,25,1.296,31,1.248,32,3.06,36,0.178,45,1.037,46,3.054,50,0.148,53,1.686,55,2.145,56,0.861,59,0.104,61,2.854,71,2.273,105,0.009,106,0.009,148,1.449,171,1.472,194,2.043,289,1.604,291,5.029,292,1.118,293,5.586,294,3.206,295,4.646,296,5.028,297,4.032,298,4.032,299,3.699,300,2.162,301,3.692,302,4.032,303,4.643,304,3.692,305,4.032,306,3.692,307,3.206,308,4.613,309,3.206,310,4.479,311,2.457,312,5.161,313,4.646,314,5.161,315,4.478,316,2.457,317,2.457,318,5.161,319,5.161,320,4.478,321,2.886,322,5.029,323,3.692,324,2.886,325,3.692,326,3.206,327,3.698,328,4.032,329,2.886,330,4.478,331,2.886,332,2.886,333,2.886,334,3.432,335,2.886,336,3.206]],["title/classes/AdminsTableAlter1753018246777.html",[59,0.111,337,3.088]],["body/classes/AdminsTableAlter1753018246777.html",[3,0.151,4,0.136,5,0.136,8,0.378,9,1.318,10,2.496,19,0.838,21,1.318,22,0.014,23,1.079,24,0.571,25,1.318,31,1.269,32,3.092,36,0.183,45,1.063,46,3.158,50,0.151,56,0.882,57,3.004,59,0.106,61,2.902,71,2.496,105,0.009,106,0.009,148,1.474,171,2.091,194,2.902,292,1.146,295,4.706,296,5.066,297,4.1,298,4.1,299,2.354,300,2.215,302,4.1,303,4.668,305,4.1,308,5.444,320,5.227,322,5.082,327,3.761,328,5.523,329,4.1,330,4.554,331,4.1,332,4.1,333,4.1,334,4.326,335,4.1,337,5.082,338,5.645,339,3.284,340,3.782,341,3.782,342,3.782,343,5.243,344,3.761,345,5.243]],["title/modules/AppModule.html",[107,0.887,346,2.833]],["body/modules/AppModule.html",[3,0.205,4,0.184,5,0.184,22,0.014,36,0.338,39,0.809,50,0.205,59,0.144,105,0.011,106,0.011,107,1.57,109,1.882,110,2.13,111,2.325,112,2.325,113,2.13,114,2.13,115,2.325,123,2.909,124,2.325,125,2.224,133,2.909,346,5.657,347,4.446,348,4.446,349,5.117,350,5.117,351,5.119,352,4.446,353,5.119,354,5.119]],["title/classes/Auth.html",[59,0.111,355,2.629]],["body/classes/Auth.html",[3,0.246,4,0.221,5,0.221,22,0.013,50,0.246,59,0.173,105,0.013,106,0.013,292,1.865,355,4.764,356,5.347]],["title/controllers/AuthControllerAdmin.html",[128,2.833,165,1.452]],["body/controllers/AuthControllerAdmin.html",[3,0.147,4,0.132,5,0.132,8,0.367,9,1.289,19,0.824,21,1.487,22,0.015,23,0.936,24,0.561,25,1.487,31,1.433,36,0.36,39,0.579,46,2.987,47,2.282,50,0.147,59,0.103,63,1.153,73,1.727,90,1.497,101,3.039,105,0.009,106,0.009,127,1.665,128,3.68,150,1.544,157,1.029,165,1.348,167,2.029,179,3.415,190,2.029,191,2.84,192,2.029,197,1.665,199,2.029,200,1.295,204,3.685,206,2.147,207,2.147,209,2.282,214,2.282,218,1.924,224,2.84,289,2.229,355,2.44,357,3.183,358,4.245,359,3.68,360,3.665,361,4.599,362,3.992,363,5.131,364,3.665,365,3.665,366,2.629,367,4.097,368,4.456,369,3.183,370,3.665,371,3.665,372,5.131,373,3.665,374,3.665,375,2.629,376,3.183,377,3.194,378,3.183,379,2.44,380,3.183,381,3.665,382,3.183,383,3.183,384,3.183,385,3.183,386,3.183,387,3.183,388,3.183,389,3.665,390,3.665,391,3.183,392,3.183]],["title/controllers/AuthControllerPublic.html",[165,1.452,393,2.833]],["body/controllers/AuthControllerPublic.html",[3,0.145,4,0.131,5,0.131,8,0.364,9,1.283,19,0.821,21,1.482,22,0.015,23,0.932,24,0.559,25,1.482,31,1.428,36,0.359,39,0.575,48,2.014,49,1.653,50,0.145,59,0.102,63,1.145,73,1.72,90,2.169,105,0.009,106,0.009,127,1.653,150,1.538,157,1.024,165,1.338,167,2.015,179,3.398,190,2.015,191,2.826,192,2.015,197,1.653,199,2.015,200,1.286,206,2.132,207,2.132,209,2.266,214,2.266,218,1.91,224,2.826,289,2.218,355,2.422,358,4.229,359,3.662,361,4.585,366,2.61,367,4.088,368,4.434,369,3.161,375,2.61,376,3.161,380,3.161,382,3.161,383,3.161,384,3.161,385,3.161,386,3.161,387,3.161,388,3.161,391,3.161,392,3.161,393,3.662,394,3.161,395,3.64,396,3.538,397,3.64,398,3.64,399,3.64,400,3.64,401,5.105,402,5.105,403,3.64,404,3.64,405,3.64,406,3.925,407,3.178,408,3.161,409,2.132,410,3.64,411,3.64,412,3.64]],["title/modules/AuthModule.html",[107,0.887,119,2.459]],["body/modules/AuthModule.html",[3,0.171,4,0.153,5,0.153,16,3.546,22,0.015,36,0.354,39,0.675,41,2.502,50,0.171,59,0.12,74,1.777,105,0.01,106,0.01,107,1.44,109,1.57,110,1.777,111,1.94,112,1.94,113,1.777,114,2.666,115,2.911,118,4.56,119,4.966,122,4.291,123,2.588,124,1.94,125,1.856,133,2.588,377,4.911,378,3.71,407,4.911,408,3.71,413,3.71,414,4.272,415,3.71,416,3.71,417,4.272,418,4.272,419,4.272,420,4.272,421,4.272,422,4.272]],["title/injectables/AuthServiceAdmin.html",[37,1.11,377,2.459]],["body/injectables/AuthServiceAdmin.html",[3,0.118,4,0.106,5,0.106,8,0.295,9,1.103,10,2.295,14,1.751,16,4.188,17,2.304,18,2.759,19,0.808,21,1.457,22,0.015,23,0.917,24,0.616,25,1.457,31,1.268,36,0.325,37,1.233,38,1.965,39,0.467,41,1.729,45,0.83,46,2.798,47,1.838,50,0.118,53,1.713,55,2.179,57,1.474,58,2.52,59,0.083,62,1.826,63,1.381,64,2.388,71,2.19,73,1.528,74,2.179,77,2.895,83,2.313,88,1.965,89,1.965,90,0.861,94,1.55,95,1.729,101,2.822,102,2.921,105,0.008,106,0.008,197,1.341,241,1.405,250,2.571,256,2.429,285,3.812,289,2.276,358,3.757,359,3.148,361,3.148,362,2.733,366,3.148,367,3.631,375,2.118,377,2.733,379,1.965,423,2.564,424,3.812,425,2.309,426,2.953,427,2.564,428,2.953,429,4.389,430,2.953,431,2.953,432,2.118,433,2.309,434,2.118,435,5.383,436,2.564,437,3.812,438,3.812,439,4.55,440,3.812,441,3.812,442,2.564,443,3.812,444,3.812,445,2.564,446,2.564,447,2.564,448,2.564,449,2.564,450,2.564,451,2.564,452,2.953,453,2.953,454,2.309,455,3.812,456,2.564,457,2.564,458,2.953,459,4.389,460,2.953,461,2.564,462,2.953]],["title/injectables/AuthServicePublic.html",[37,1.11,407,2.459]],["body/injectables/AuthServicePublic.html",[3,0.118,4,0.106,5,0.106,8,0.296,9,1.105,10,2.297,14,1.753,16,4.19,17,2.307,18,2.762,19,0.808,21,1.459,22,0.015,23,0.918,24,0.617,25,1.459,31,1.27,36,0.325,37,1.235,38,1.969,39,0.468,41,1.733,45,0.831,48,1.891,49,1.344,50,0.118,53,1.714,55,2.182,57,1.477,58,2.522,59,0.083,62,1.829,63,1.383,64,2.39,71,2.192,73,1.53,74,2.182,77,2.898,83,2.316,88,1.969,89,1.969,90,1.896,91,2.925,94,1.553,95,1.733,105,0.008,106,0.008,197,1.344,241,1.407,250,2.574,256,2.433,289,2.278,358,3.761,359,3.152,361,3.152,366,3.152,367,3.633,375,2.122,396,2.433,407,2.736,409,1.733,424,3.817,425,2.313,427,2.569,432,2.122,433,2.313,434,2.122,435,5.388,436,2.569,437,3.817,438,3.817,439,4.555,440,3.817,441,3.817,442,2.569,443,3.817,444,3.817,445,2.569,446,2.569,447,2.569,448,2.569,449,2.569,450,2.569,451,2.569,454,2.313,455,3.817,456,2.569,457,2.569,461,2.569,463,2.569,464,2.958,465,2.958,466,4.395,467,2.958,468,2.958,469,3.152,470,2.958,471,2.958,472,2.958,473,4.395,474,2.958,475,2.958]],["title/modules/CliModule.html",[107,0.887,476,2.833]],["body/modules/CliModule.html",[3,0.184,4,0.165,5,0.165,22,0.014,36,0.362,39,0.727,50,0.184,59,0.129,90,1.343,105,0.011,106,0.011,107,1.493,109,1.692,110,1.915,111,2.09,112,2.09,113,1.915,114,2.766,115,2.09,123,2.718,124,2.09,125,1.999,133,2.718,352,5.196,476,5.646,477,3.997,478,3.997,479,3.997,480,4.656,481,4.977,482,4.977,483,4.602,484,3.14,485,3.598,486,4.602,487,5.983,488,3.301,489,5.983,490,2.865,491,3.301,492,4.602]],["title/modules/CommonModules.html",[107,0.887,349,2.629]],["body/modules/CommonModules.html",[3,0.185,4,0.166,5,0.166,22,0.015,36,0.353,39,0.732,50,0.185,59,0.13,105,0.011,106,0.011,107,1.498,109,1.702,110,1.926,111,2.103,112,2.103,113,1.926,114,1.926,115,2.103,123,2.728,124,2.103,125,2.011,133,2.728,157,0.928,349,5.245,480,4.663,490,2.882,493,4.021,494,4.021,495,4.985,496,4.985,497,4.629,498,4.629,499,4.629,500,5.216,501,4.629,502,4.629,503,4.629,504,4.629,505,4.629,506,4.629,507,4.021]],["title/classes/CreateAdminDto.html",[59,0.111,173,2.629]],["body/classes/CreateAdminDto.html",[3,0.183,4,0.164,5,0.164,8,0.457,19,0.923,22,0.014,23,1.048,24,0.629,36,0.288,50,0.183,55,2.758,56,1.741,59,0.167,101,3.35,105,0.011,106,0.011,148,1.675,150,1.729,173,3.966,200,1.616,289,2.88,292,1.386,508,6.099,509,2.68,510,3.973,511,5.96,512,3.973,513,3.973,514,3.973,515,3.973,516,4.66,517,3.973,518,4.113,519,4.66,520,3.669,521,3.669,522,3.281,523,2.401,524,5.176,525,3.308,526,3.281]],["title/classes/CreateRoleDto.html",[59,0.111,527,2.459]],["body/classes/CreateRoleDto.html",[3,0.172,4,0.155,5,0.155,8,0.431,19,0.994,22,0.014,23,1.161,24,0.696,36,0.311,50,0.172,53,1.873,54,1.792,56,1.6,59,0.161,105,0.01,106,0.01,148,1.61,150,1.863,157,0.864,163,2.489,200,1.522,279,3.171,292,1.305,311,2.867,316,2.867,317,2.867,518,3.355,520,3.171,521,3.171,523,2.261,525,2.859,527,3.566,528,4.975,529,3.368,530,4.389,531,3.812,532,3.566,533,2.867,534,3.368,535,4.308,536,5.032,537,3.368,538,5.032,539,4.92,540,3.741,541,3.368,542,3.741,543,3.368,544,3.741,545,3.368,546,3.741,547,3.089]],["title/classes/CreateTodosDto.html",[59,0.111,548,2.186]],["body/classes/CreateTodosDto.html",[3,0.187,4,0.168,5,0.168,8,0.467,19,0.932,22,0.014,24,0.635,36,0.292,50,0.187,56,1.651,59,0.169,105,0.011,106,0.011,148,1.698,150,1.746,164,2.122,200,1.65,292,1.415,488,4.802,518,4.146,520,3.344,521,3.706,523,2.452,525,3.342,548,3.344,549,6.148,550,3.652,551,4.058,552,4.802,553,4.146,554,5.815,555,4.671,556,4.671,557,3.761,558,4.671,559,4.671,560,4.671,561,4.671,562,5.247]],["title/classes/CreateUserDto.html",[59,0.111,563,2.313]],["body/classes/CreateUserDto.html",[3,0.185,4,0.166,5,0.166,8,0.463,19,0.928,22,0.014,23,1.054,24,0.632,36,0.29,50,0.185,55,2.774,56,1.747,59,0.168,90,2.058,105,0.011,106,0.011,148,1.688,150,1.739,200,1.636,289,2.896,292,1.402,509,2.712,510,4.021,512,4.021,513,4.021,514,4.021,515,4.021,516,4.696,517,4.021,518,4.132,519,4.696,520,3.69,521,3.69,522,3.32,523,2.43,524,5.216,525,3.327,526,3.32,563,3.518,564,6.127,565,6.006]],["title/classes/DBBaseEntity.html",[59,0.111,530,2.313]],["body/classes/DBBaseEntity.html",[3,0.177,4,0.159,5,0.159,8,0.443,19,0.966,22,0.014,23,1.17,24,0.716,36,0.214,45,1.245,50,0.177,53,2.133,54,2.428,59,0.124,105,0.01,106,0.01,148,1.64,150,1.809,157,1.445,163,2.535,279,3.612,292,1.342,311,3.884,316,3.884,317,3.884,530,3.418,531,4.344,532,4.063,536,5.787,537,3.464,538,5.787,541,3.464,543,5.103,545,3.464,566,3.848,567,6.526,568,4.431,569,4.431,570,4.431,571,4.431,572,5.836,573,5.836,574,5.836]],["title/modules/DatabaseModule.html",[107,0.887,480,2.459]],["body/modules/DatabaseModule.html",[3,0.193,4,0.173,5,0.173,10,1.707,18,3.236,22,0.015,24,0.458,36,0.347,39,0.764,45,1.358,50,0.193,59,0.136,64,1.776,71,1.707,73,1.41,83,1.927,105,0.011,106,0.011,107,1.387,109,1.776,133,2.195,146,2.83,157,0.969,164,2.195,238,3.216,239,2.298,289,2.099,480,3.843,575,4.832,576,5.362,577,4.832,578,4.832,579,4.832,580,4.196,581,4.196,582,4.196,583,4.196,584,4.196,585,4.196,586,3.778,587,4.196,588,4.196,589,4.196,590,5.362,591,4.196,592,4.196,593,4.196,594,4.196,595,4.832,596,4.196,597,4.832]],["title/modules/ErrorFilterModule.html",[107,0.887,495,2.629]],["body/modules/ErrorFilterModule.html",[3,0.218,4,0.195,5,0.195,22,0.015,36,0.362,39,0.86,50,0.218,59,0.153,105,0.012,106,0.012,107,1.494,109,2.001,114,2.264,157,1.091,484,3.491,495,4.426,598,5.443,599,4.77,600,5.443,601,6.65,602,3.622,603,4.727,604,4.727,605,4.727]],["title/classes/ErrorService.html",[59,0.111,599,2.833]],["body/classes/ErrorService.html",[3,0.169,4,0.152,5,0.152,8,0.424,9,1.424,14,1.69,19,0.789,21,1.424,22,0.015,23,0.896,24,0.537,25,1.424,31,1.026,34,3.974,36,0.309,39,0.67,40,2.638,50,0.169,59,0.119,61,3.136,63,1.333,64,2.687,65,2.638,67,2.82,68,3.771,69,2.82,75,4.242,76,2.482,105,0.01,106,0.01,157,1.28,218,2.224,224,2.345,292,1.284,484,3.577,586,4.991,599,4.063,603,3.68,606,3.68,607,6.383,608,3.68,609,4.237,610,4.43,611,5.665,612,6.814,613,4.237,614,4.237,615,3.68,616,4.237,617,4.991,618,4.237,619,4.237,620,4.237,621,4.237,622,5.665,623,4.237,624,5.665,625,4.237,626,4.237,627,4.237,628,4.237,629,3.68,630,4.237,631,2.82,632,4.237]],["title/interfaces/ICommonOptions.html",[51,2.073,633,2.833]],["body/interfaces/ICommonOptions.html",[3,0.197,4,0.177,5,0.177,8,0.494,22,0.014,24,0.686,36,0.303,45,1.388,50,0.197,51,2.593,105,0.011,106,0.011,148,1.759,157,1.255,163,2.72,177,2.986,210,2.35,211,2.244,212,2.465,246,4,275,4.81,277,4.81,278,4.81,280,4.81,633,4.49,634,3.543,635,4.29,636,4.29,637,7.227,638,6.261,639,6.261]],["title/interfaces/IJwtPayload.html",[51,2.073,52,2.629]],["body/interfaces/IJwtPayload.html",[1,1.737,3,0.104,4,0.094,5,0.094,6,1.872,7,1.872,8,0.261,10,1.925,11,3.8,12,3.126,14,1.595,16,3.026,17,2.099,18,2.312,22,0.015,24,0.517,26,3.126,27,3.126,28,3.235,32,1.902,33,3.126,34,3.657,36,0.312,37,1.366,38,1.737,39,0.413,40,1.625,41,1.528,42,1.444,43,1.444,44,1.528,45,0.733,46,1.086,47,1.625,48,0.733,49,1.185,50,0.194,51,1.37,52,2.661,53,2.175,54,2.578,55,2.578,56,1.445,57,2.719,58,3.025,59,0.112,60,1.737,61,2.213,62,2.267,63,1.714,64,2.641,65,2.489,66,2.868,67,2.661,68,2.661,69,2.661,70,2.489,71,1.925,72,3.126,73,1.589,74,2.768,75,2.489,76,3.191,77,3.321,78,4.845,79,4.845,80,3.126,81,3.126,82,3.126,83,2.472,84,3.126,85,3.126,86,3.126,87,3.126,88,2.661,89,2.661,90,1.418,91,1.737,92,3.126,93,3.126,94,2.099,95,2.342,96,4.26,97,4.26,98,2.04,99,2.04,100,3.126,101,2.112,102,1.737,103,2.04,104,1.872,105,0.007,106,0.007,148,1.124,634,1.872]],["title/interfaces/IPaginationMetadata.html",[51,2.073,640,2.833]],["body/interfaces/IPaginationMetadata.html",[3,0.186,4,0.167,5,0.167,8,0.466,22,0.014,24,0.724,50,0.186,51,2.444,54,3.398,105,0.011,106,0.011,148,1.694,157,0.934,310,4.671,557,4.162,634,3.34,640,4.324,641,4.045,642,4.045,643,6.141,644,7.071,645,6.141,646,7.071,647,5.529,648,7.071,649,7.071]],["title/classes/Init1752751622275.html",[59,0.111,650,3.088]],["body/classes/Init1752751622275.html",[3,0.118,4,0.106,5,0.106,8,0.294,9,1.1,10,2.292,19,0.728,21,1.1,22,0.014,23,1.025,24,0.496,25,1.1,31,1.06,32,2.754,36,0.142,45,0.827,48,1.627,50,0.118,53,2.121,55,1.821,56,0.686,57,2.185,58,1.278,59,0.083,61,2.423,71,2.537,105,0.008,106,0.008,148,1.23,149,1.901,164,1.336,171,1.746,194,2.423,289,1.278,292,0.891,295,4.087,296,4.652,297,3.422,298,3.422,299,4.297,300,1.723,302,3.422,303,4.391,305,3.422,307,4.54,308,5.149,309,4.54,310,4.812,311,3.479,312,6.126,313,5.515,314,6.126,315,5.634,316,3.479,317,3.479,318,5.634,319,5.634,321,3.422,322,5.397,324,2.3,326,4.54,327,4.438,328,4.526,329,3.422,331,3.422,332,3.422,333,2.3,334,3.853,335,3.422,336,4.54,551,1.628,553,1.723,557,1.831,650,4.526,651,5.028,652,2.555,653,2.942,654,2.942,655,2.942,656,2.942,657,2.942,658,2.942,659,2.889,660,2.555,661,3.801,662,2.942,663,4.377,664,4.377,665,2.942]],["title/classes/MyLogger.html",[59,0.111,484,2.073]],["body/classes/MyLogger.html",[3,0.143,4,0.129,5,0.129,8,0.359,9,1.27,19,0.932,21,1.683,22,0.015,23,1.059,24,0.635,25,1.683,30,5.809,31,1.621,36,0.174,39,0.567,50,0.143,56,1.851,59,0.101,76,2.961,105,0.009,106,0.009,157,1.393,163,2.196,292,1.087,484,2.653,615,5.816,631,4.457,666,3.117,667,5.852,668,5.055,669,5.055,670,5.055,671,5.055,672,5.055,673,3.589,674,6.947,675,5.055,676,6.353,677,3.589,678,5.055,679,3.589,680,5.055,681,3.589,682,5.055,683,3.589,684,3.589,685,3.117,686,3.589,687,3.589,688,3.589,689,3.589,690,3.589,691,3.589,692,3.589,693,3.589]],["title/classes/PaginatedQueryDto.html",[59,0.111,177,1.716]],["body/classes/PaginatedQueryDto.html",[3,0.128,4,0.115,5,0.115,8,0.32,19,0.96,22,0.015,24,0.734,36,0.265,50,0.128,54,2.78,56,1.73,59,0.154,73,1.601,74,2.282,105,0.008,106,0.008,148,1.308,150,1.799,157,1.417,164,2.492,177,2.021,200,1.129,210,3.362,211,3.211,292,0.968,300,3.751,321,4.29,521,3.544,523,1.678,551,2.575,557,3.415,562,4.041,643,4.765,645,4.765,647,4.29,694,2.776,695,5.486,696,5.486,697,5.486,698,5.486,699,6.683,700,4.653,701,4.041,702,3.196,703,3.196,704,3.196,705,3.196,706,4.653,707,3.196,708,3.196,709,3.196,710,3.196,711,3.196,712,3.196,713,3.196,714,3.196,715,3.196,716,7.068,717,5.486,718,5.527,719,3.196,720,3.196,721,4.653,722,2.499,723,3.196,724,3.196,725,3.196,726,2.776,727,3.196,728,3.196,729,3.196]],["title/modules/PublicRouteModules.html",[107,0.887,730,2.629]],["body/modules/PublicRouteModules.html",[3,0.182,4,0.164,5,0.164,22,0.015,36,0.367,39,0.721,50,0.182,59,0.128,105,0.011,106,0.011,107,1.487,109,1.677,110,1.898,111,2.072,112,2.072,113,1.898,114,1.898,115,2.072,119,4.645,121,4.645,122,4.37,123,2.702,124,2.072,125,1.982,127,2.702,133,2.702,137,3.961,142,3.961,144,3.961,393,4.747,730,5.231,731,3.961,732,4.561,733,4.561,734,4.747,735,4.747,736,4.561,737,4.561,738,4.561]],["title/guards/PublicUserGuard.html",[0,3.088,60,2.629]],["body/guards/PublicUserGuard.html",[1,1.659,2,1.948,3,0.1,4,0.089,5,0.089,6,3.813,7,1.787,8,0.249,9,0.97,10,2.316,11,4.497,12,4.157,13,3.351,14,1.884,15,2.164,16,3.581,17,2.791,18,2.736,19,0.658,21,1.187,22,0.015,23,0.747,24,0.448,25,1.187,26,3.692,27,3.692,28,3.828,30,1.787,31,0.934,32,2.246,33,3.692,34,4.081,36,0.307,37,1.327,38,1.659,39,0.394,40,1.551,41,1.46,42,1.379,43,1.379,44,1.46,45,0.7,46,1.037,47,1.551,48,0.7,49,1.132,50,0.189,51,1.308,52,1.659,53,1.88,54,1.605,55,1.965,56,0.9,57,1.244,58,2.756,59,0.108,60,2.568,61,2.136,62,2.212,63,1.673,64,2.613,65,2.402,66,2.768,67,2.568,68,2.568,69,2.568,70,2.402,71,1.879,72,3.017,73,1.551,74,2.727,75,2.402,76,3.114,77,3.272,78,4.757,79,4.757,80,3.017,81,3.017,82,3.017,83,2.426,84,3.017,85,3.017,86,3.017,87,3.017,88,2.568,89,2.568,90,1.378,91,1.659,92,3.017,93,3.017,94,2.025,95,2.26,96,4.157,97,4.157,98,1.948,99,1.948,100,3.017,101,2.051,102,1.659,103,1.948,104,1.787,105,0.007,106,0.007,739,2.492,740,2.492,741,2.492]],["title/classes/ResponseInterceptor.html",[59,0.111,742,2.833]],["body/classes/ResponseInterceptor.html",[3,0.137,4,0.123,5,0.123,8,0.344,9,1.232,14,1.371,19,0.683,21,1.232,22,0.015,23,0.775,24,0.465,25,1.232,28,4.147,30,3.517,31,0.832,32,2.332,34,3.88,36,0.348,39,0.543,40,2.14,50,0.137,54,1.43,59,0.138,61,2.714,62,1.43,63,1.082,64,2.518,65,2.14,66,2.466,67,2.288,68,3.804,69,2.288,73,1.667,105,0.009,106,0.009,157,1.146,164,1.562,177,1.493,208,3.348,211,1.562,212,1.716,224,3.449,274,3.348,292,1.041,310,3.053,602,2.288,617,3.834,631,4.385,640,2.466,647,2.688,701,2.986,722,2.688,742,3.517,743,2.986,744,5.715,745,5.715,746,3.438,747,6.232,748,3.438,749,4.903,750,3.438,751,5.715,752,6.232,753,3.438,754,5.715,755,2.986,756,2.986,757,3.438,758,3.438,759,3.438,760,3.438,761,2.466,762,3.438,763,3.438,764,3.438,765,3.438,766,3.438,767,3.438,768,3.438,769,3.438,770,4.903,771,3.438,772,5.715,773,3.438,774,4.903,775,6.232,776,3.438,777,3.438]],["title/modules/ResponseModule.html",[107,0.887,496,2.629]],["body/modules/ResponseModule.html",[3,0.209,4,0.187,5,0.187,22,0.015,36,0.341,39,0.826,50,0.209,59,0.147,105,0.011,106,0.011,107,1.456,109,1.92,114,2.173,127,2.372,157,1.047,496,4.315,602,3.476,604,5.631,605,5.631,742,4.65,778,5.222,779,6.483,780,5.222,781,7.051,782,4.536,783,5.222,784,6.483,785,4.536,786,4.536,787,4.083,788,5.222]],["title/entities/Roles.html",[145,2.073,149,1.716]],["body/entities/Roles.html",[3,0.205,4,0.184,5,0.184,8,0.512,19,0.713,22,0.014,24,0.486,36,0.354,42,3.868,43,2.833,44,2.998,45,1.439,50,0.205,58,3.035,59,0.18,105,0.011,106,0.011,145,3.361,146,2.998,148,1.799,149,2.782,150,1.335,153,3.407,157,1.026,163,2.224,164,2.909,344,4.592,520,3.544,523,2.687,530,3.75,547,3.671,789,4.446,790,5.119,791,5.119,792,5.119,793,5.119]],["title/controllers/RolesController.html",[131,2.833,165,1.452]],["body/controllers/RolesController.html",[3,0.14,4,0.126,5,0.126,8,0.351,9,1.25,19,0.876,21,1.58,22,0.015,23,0.994,24,0.596,25,1.58,31,1.522,36,0.356,39,0.555,50,0.14,53,2.056,56,1.608,59,0.098,63,1.104,73,1.835,105,0.009,106,0.009,127,1.593,131,3.567,149,1.524,150,1.64,157,0.997,165,1.29,167,1.942,168,1.984,169,3.097,170,2.483,171,1.984,176,2.743,177,2.732,182,3.567,183,2.184,190,1.942,191,2.753,192,1.942,193,2.335,194,1.942,195,1.942,196,1.593,198,1.593,199,2.753,200,1.757,204,4.133,205,2.055,206,2.055,208,2.913,209,2.184,210,1.669,211,1.593,212,1.751,218,1.841,220,2.335,221,2.743,225,3.046,228,2.516,229,2.743,527,4.293,794,3.046,795,3.046,796,3.508,797,3.508,798,3.508,799,3.508,800,3.508,801,3.508,802,2.516,803,4.823,804,3.508,805,3.508,806,3.598,807,3.046,808,3.889,809,3.508,810,3.508,811,3.508,812,3.508,813,3.508,814,3.508,815,3.508,816,3.046,817,3.508]],["title/modules/RolesModule.html",[107,0.887,120,2.629]],["body/modules/RolesModule.html",[3,0.199,4,0.178,5,0.178,22,0.014,36,0.35,39,0.786,50,0.199,59,0.139,105,0.011,106,0.011,107,1.549,109,1.828,110,2.068,111,2.258,112,2.258,113,2.068,114,2.868,115,3.132,120,5.158,123,2.855,124,2.258,125,2.16,133,2.258,149,2.16,238,3.309,239,2.365,806,5.02,807,4.317,818,4.317,819,4.317,820,4.317,821,4.971,822,4.317,823,4.971]],["title/injectables/RolesService.html",[37,1.11,806,2.459]],["body/injectables/RolesService.html",[3,0.114,4,0.102,5,0.102,8,0.285,9,1.076,10,2.59,14,1.707,19,0.893,21,1.612,22,0.015,23,1.014,24,0.608,25,1.612,31,1.479,36,0.338,37,1.203,39,0.451,42,3.157,43,1.58,44,1.672,45,0.802,50,0.114,53,2.175,54,2.911,56,0.666,58,2.787,59,0.08,62,1.188,63,0.898,64,2.246,71,2.267,73,1.783,77,1.425,83,1.139,105,0.008,106,0.008,149,1.859,157,0.858,168,1.707,170,2.136,171,1.707,177,2.478,182,3.07,183,2.665,195,1.58,196,1.297,198,1.297,210,1.358,211,1.297,212,1.425,239,1.358,241,1.358,246,3.157,250,3.341,258,2.232,259,1.777,260,2.665,261,1.777,269,2.232,274,2.507,275,1.9,277,1.9,278,1.9,279,1.58,280,1.9,334,1.9,527,3.804,795,3.717,802,3.07,803,4.427,806,2.665,808,3.347,822,2.479,824,2.479,825,3.717,826,2.507,827,2.855,828,2.855,829,4.28,830,2.855,831,2.855,832,4.28,833,2.855,834,3.347,835,2.855,836,2.855,837,2.855,838,4.28,839,5.134,840,2.855,841,2.855,842,2.479,843,4.28,844,4.28,845,2.855,846,2.855,847,2.855,848,4.28,849,2.855,850,2.232,851,2.855,852,4.459,853,2.232,854,2.232,855,2.479]],["title/modules/RouterModule.html",[107,0.887,350,2.629]],["body/modules/RouterModule.html",[3,0.187,4,0.168,5,0.168,22,0.015,36,0.342,39,0.738,50,0.187,59,0.131,90,1.363,105,0.011,106,0.011,107,1.647,108,5.086,109,1.717,110,1.943,111,2.122,112,2.122,113,1.943,114,1.943,115,2.122,123,2.744,124,2.122,125,2.029,133,2.744,350,5.29,602,3.109,730,5.086,856,4.057,857,4.057,858,6.367,859,4.671,860,4.671,861,4.671,862,4.671,863,6.041,864,4.671,865,4.671]],["title/injectables/SeedTodoDatabase.html",[37,1.11,481,2.629]],["body/injectables/SeedTodoDatabase.html",[3,0.154,4,0.138,5,0.138,8,0.386,9,1.336,10,2.149,14,2.12,17,3.192,18,3.118,19,0.74,21,0.969,22,0.015,23,0.61,24,0.366,25,0.969,31,0.934,32,2.529,36,0.344,37,1.494,39,0.61,45,1.084,48,1.842,49,1.752,50,0.154,56,1.24,59,0.108,62,2.211,63,1.672,64,2.41,70,2.401,71,1.363,77,1.925,83,1.538,105,0.009,106,0.009,150,1.006,157,0.773,168,1.538,241,1.835,303,2.401,481,3.538,484,3.44,485,3.016,490,2.401,491,5.097,551,2.135,553,2.259,608,3.35,610,4.156,659,3.758,854,3.016,866,5.282,867,3.016,868,5.693,869,3.857,870,3.35,871,6.172,872,4.616,873,3.35,874,4.616,875,3.857,876,3.857,877,3.857,878,3.857,879,5.315,880,3.35,881,3.857,882,3.857,883,3.857,884,3.857,885,3.857]],["title/injectables/SeedUsersDatabase.html",[37,1.11,482,2.629]],["body/injectables/SeedUsersDatabase.html",[3,0.152,4,0.189,5,0.136,8,0.38,9,1.322,10,2.132,14,2.099,17,3.167,18,3.253,19,0.733,21,0.955,22,0.015,23,0.601,24,0.36,25,0.955,31,0.92,32,2.503,36,0.331,37,1.479,39,0.601,45,1.479,48,1.83,50,0.152,58,1.651,59,0.107,62,2.511,63,1.899,64,1.934,70,2.366,71,2.132,75,2.366,76,2.226,90,1.109,105,0.009,106,0.009,107,0.854,150,0.991,157,0.762,168,2.598,241,1.808,274,2.226,303,2.366,425,2.971,482,3.502,484,3.419,485,2.971,490,2.366,491,5.074,610,4.718,755,3.301,787,2.971,867,2.971,870,3.301,871,6.144,872,4.569,873,3.301,880,3.301,886,5.241,887,3.8,888,2.971,889,2.971,890,2.971,891,3.8,892,3.8,893,2.971,894,3.8,895,3.8,896,3.8,897,3.301,898,3.8,899,3.8,900,3.301,901,3.8,902,3.8,903,3.8,904,5.261,905,3.301,906,6.035,907,3.301,908,3.301,909,3.8,910,3.8,911,3.8]],["title/entities/Todos.html",[145,2.073,659,1.971]],["body/entities/Todos.html",[3,0.168,4,0.151,5,0.151,8,0.42,19,0.946,22,0.015,23,0.891,24,0.644,36,0.307,45,1.181,48,1.909,49,1.909,50,0.168,56,1.584,59,0.118,90,2.066,105,0.01,106,0.01,145,2.957,146,2.461,148,1.583,150,1.771,151,3.286,153,4.852,154,3.286,157,0.843,161,4.041,162,4.041,163,1.826,164,3.482,299,3.508,344,4.871,469,4.041,530,3.3,547,3.014,551,3.518,552,4.559,553,3.723,557,3.508,659,2.812,660,4.894,661,4.894,912,3.65,913,4.894,914,4.202,915,4.202,916,4.202,917,4.202,918,4.202]],["title/controllers/TodosControllerAdmin.html",[130,2.833,165,1.452]],["body/controllers/TodosControllerAdmin.html",[3,0.1,4,0.09,5,0.09,8,0.25,9,0.971,19,0.801,21,1.446,22,0.015,23,0.91,24,0.577,25,1.446,31,1.394,36,0.333,39,0.395,48,1.933,49,1.134,50,0.1,53,2.201,56,1.658,59,0.07,63,0.785,73,1.679,74,1.038,83,1.541,90,1.914,105,0.007,106,0.007,127,1.134,130,2.771,150,1.501,157,0.948,165,0.918,167,1.382,168,2.428,169,2.943,170,1.928,171,2.296,177,2.312,179,3.542,190,1.382,191,2.946,192,1.382,193,1.661,194,3.186,195,2.139,196,1.134,198,1.134,199,1.382,200,0.882,204,3.79,205,1.462,206,1.462,207,1.462,208,2.263,209,1.554,210,1.187,211,1.134,212,1.246,214,1.554,218,1.31,220,1.661,224,3.369,256,1.382,488,4.128,548,2.946,659,2.656,761,1.79,786,2.168,826,2.263,897,2.168,900,2.168,919,2.168,920,1.79,921,4.161,922,4.999,923,2.496,924,2.496,925,2.496,926,3.817,927,4.622,928,2.496,929,2.496,930,2.496,931,4.622,932,2.168,933,2.168,934,2.496,935,2.496,936,3.356,937,1.79,938,2.496,939,2.496,940,2.496,941,1.661,942,3.842,943,2.168,944,2.496,945,2.496,946,3.021,947,5.287,948,2.571,949,2.405,950,2.168,951,2.168,952,2.496,953,2.168,954,2.168,955,3.864,956,2.496,957,2.496,958,2.496,959,2.496,960,2.496,961,2.496,962,4.999,963,4.105,964,2.496,965,3.864,966,2.496,967,2.496,968,2.496,969,2.496,970,2.496,971,2.496,972,2.496,973,2.496,974,2.496,975,2.496,976,2.496,977,2.168,978,2.168,979,2.496,980,2.168,981,2.496,982,2.496,983,2.496,984,2.496,985,2.496,986,2.168,987,1.952,988,3.356,989,2.168,990,2.168,991,2.168,992,1.952,993,2.168,994,2.168]],["title/controllers/TodosControllerPublic.html",[165,1.452,734,2.833]],["body/controllers/TodosControllerPublic.html",[3,0.105,4,0.095,5,0.095,8,0.264,9,1.013,19,0.822,21,1.483,22,0.015,23,0.933,24,0.59,25,1.483,31,1.429,36,0.338,39,0.417,48,2.107,49,1.197,50,0.105,53,2.383,56,1.596,59,0.074,63,0.829,73,1.722,83,1.607,90,2.149,105,0.007,106,0.007,127,1.197,150,1.539,157,0.981,165,0.969,167,1.459,168,2.482,169,3.045,170,2.011,171,2.354,177,2.379,179,3.645,180,2.29,190,1.459,191,2.707,192,1.459,193,1.755,194,3.266,195,2.23,196,1.197,198,1.197,199,1.459,200,0.931,205,1.544,206,1.544,207,1.544,208,2.36,209,1.641,210,1.254,211,1.197,212,1.316,214,1.641,218,1.384,220,1.755,224,3.444,228,1.891,256,1.459,406,4.141,488,4.232,548,3.032,659,2.441,734,2.89,761,1.891,826,2.36,920,1.891,921,4.282,922,4.757,926,3.928,927,3.5,933,2.29,937,1.891,941,1.755,942,3.91,943,2.29,946,2.061,947,5.125,948,2.682,951,2.29,953,2.29,954,2.29,962,4.757,963,4.248,977,2.29,978,2.29,980,2.29,986,2.29,987,2.061,988,4.248,989,2.29,990,2.29,991,2.29,992,2.061,993,2.29,994,2.29,995,2.29,996,2.636,997,2.636,998,2.636,999,2.636,1000,2.636,1001,2.29,1002,2.636,1003,2.636,1004,2.636,1005,2.636,1006,2.636,1007,2.636,1008,2.636,1009,2.509,1010,2.29,1011,2.636,1012,2.636,1013,2.636,1014,2.636]],["title/modules/TodosModule.html",[107,0.887,121,2.459]],["body/modules/TodosModule.html",[3,0.186,4,0.167,5,0.167,22,0.014,36,0.354,39,0.736,50,0.186,59,0.131,105,0.011,106,0.011,107,1.502,109,1.712,110,1.938,111,2.116,112,2.116,113,1.938,114,2.781,115,3.037,121,4.911,123,2.739,124,2.116,125,2.023,133,2.116,238,3.1,239,2.215,659,2.325,949,4.975,950,4.045,1009,4.975,1010,4.045,1015,4.045,1016,4.045,1017,4.045,1018,4.657,1019,3.641,1020,4.657]],["title/injectables/TodosServiceAdmin.html",[37,1.11,949,2.459]],["body/injectables/TodosServiceAdmin.html",[3,0.118,4,0.106,5,0.106,8,0.295,9,1.101,10,2.294,14,1.748,19,0.904,21,1.631,22,0.015,23,1.026,24,0.655,25,1.631,31,1.499,36,0.341,37,1.232,39,0.466,45,0.828,48,2.018,49,1.339,50,0.118,53,2.307,54,2.988,59,0.083,62,1.226,63,0.927,64,1.611,71,1.549,73,1.807,74,2.701,90,1.691,94,1.547,105,0.008,106,0.008,157,0.879,168,1.748,169,3.258,170,2.188,171,1.748,177,1.904,195,1.631,196,1.339,198,1.339,210,1.402,211,1.339,212,1.471,239,1.402,241,1.402,246,3.207,250,2.567,256,2.426,259,1.835,260,2.729,261,1.835,274,3.394,275,1.961,277,1.961,278,1.961,279,1.631,280,1.961,531,1.961,532,1.835,548,3.207,552,2.114,553,1.726,659,1.471,826,2.567,920,3.144,921,4.091,926,3.753,931,4.545,932,3.807,936,3.807,937,3.144,941,2.917,942,3.937,948,2.917,949,2.729,1019,2.304,1021,2.56,1022,2.56,1023,2.947,1024,3.807,1025,2.947,1026,2.947,1027,2.947,1028,2.947,1029,2.947,1030,2.947,1031,2.56,1032,2.56,1033,2.56]],["title/injectables/TodosServicePublic.html",[37,1.11,1009,2.459]],["body/injectables/TodosServicePublic.html",[3,0.105,4,0.094,5,0.094,8,0.263,9,1.01,10,2.601,14,1.603,19,0.865,21,1.561,22,0.015,23,0.982,24,0.633,25,1.561,31,1.426,32,3.252,36,0.33,37,1.129,39,0.415,45,0.738,48,2.047,49,1.193,50,0.105,53,2.467,54,2.774,59,0.074,62,1.093,64,2.01,71,2.082,73,1.595,74,2.275,77,1.311,83,1.048,90,2.125,94,1.379,95,1.539,105,0.007,106,0.007,157,0.806,168,1.603,170,2.006,171,1.947,177,1.746,195,1.454,196,1.193,198,1.193,210,1.25,211,1.193,212,1.311,239,1.25,241,1.25,246,3.026,256,2.225,259,1.636,260,2.502,261,1.636,274,3.451,275,1.749,277,1.749,278,1.749,279,1.454,280,1.749,310,1.636,432,1.884,454,2.054,469,4.226,532,1.636,548,3.691,552,1.884,553,2.859,659,1.311,825,4.239,826,2.354,850,2.054,853,2.054,920,2.883,926,3.501,937,1.884,941,1.749,942,3.906,948,2.675,1001,3.491,1009,2.502,1019,2.054,1022,2.282,1024,3.491,1031,2.282,1032,2.282,1033,2.282,1034,2.282,1035,2.627,1036,2.627,1037,2.627,1038,2.627,1039,2.627,1040,2.627,1041,2.627,1042,2.627,1043,4.019,1044,2.627,1045,2.627,1046,2.627,1047,2.627,1048,2.627]],["title/classes/UpdateAdminDto.html",[59,0.111,187,2.459]],["body/classes/UpdateAdminDto.html",[3,0.215,4,0.193,5,0.193,8,0.537,19,0.747,22,0.014,23,1.042,24,0.509,36,0.259,50,0.264,56,1.538,59,0.185,101,2.332,105,0.012,106,0.012,148,1.853,150,1.4,163,3.101,187,4.105,197,2.438,292,1.626,362,3.341,379,3.572,396,3.65,409,3.144,509,3.144,525,2.679,533,3.572,539,3.849,1049,3.716,1050,4.662,1051,5.367]],["title/classes/UpdateAdminPasswordDto.html",[59,0.111,362,2.459]],["body/classes/UpdateAdminPasswordDto.html",[3,0.204,4,0.183,5,0.183,8,0.51,19,0.89,22,0.014,24,0.606,36,0.247,50,0.255,56,1.705,59,0.179,101,2.217,105,0.011,106,0.011,148,1.796,150,1.667,163,3.031,187,3.176,197,2.318,292,1.546,362,3.978,379,3.396,396,4.168,409,2.988,509,2.988,525,3.189,533,4.253,534,3.989,539,4.583,1049,3.189,1052,4.996,1053,4.996,1054,4.431,1055,5.102,1056,5.102]],["title/classes/UpdateRoleDto.html",[59,0.111,803,2.629]],["body/classes/UpdateRoleDto.html",[3,0.23,4,0.206,5,0.206,22,0.014,23,1.086,36,0.332,50,0.23,59,0.161,105,0.012,106,0.012,163,2.985,168,2.292,200,2.03,292,1.741,527,3.577,529,4.492,803,4.574,808,4.492,1057,4.99,1058,6.872,1059,5.745]],["title/classes/UpdateTodosDto.html",[59,0.111,942,2.313]],["body/classes/UpdateTodosDto.html",[3,0.222,4,0.2,5,0.2,22,0.014,24,0.527,36,0.35,50,0.222,59,0.156,105,0.012,106,0.012,163,2.927,168,2.218,200,1.964,292,1.684,548,3.729,550,4.347,761,3.988,942,3.946,948,3.7,1060,4.829,1061,6.737,1062,5.56,1063,5.56,1064,5.56,1065,5.56,1066,4.829,1067,5.56,1068,5.56]],["title/classes/UpdateUserDto.html",[59,0.111,1049,1.971]],["body/classes/UpdateUserDto.html",[3,0.193,4,0.173,5,0.173,8,0.482,19,0.671,22,0.014,23,1.074,24,0.679,36,0.298,50,0.246,56,1.817,59,0.191,105,0.011,106,0.011,148,1.731,150,1.256,200,1.702,292,1.459,396,2.666,409,3.609,509,2.821,518,4.194,520,3.963,521,3.963,522,3.454,523,2.528,525,3.574,526,3.454,533,3.206,718,4.817,1049,3.075,1050,4.183,1052,3.766,1053,3.766,1069,4.816]],["title/classes/UpdateUserPasswordDto.html",[59,0.111,396,2.186]],["body/classes/UpdateUserPasswordDto.html",[3,0.184,4,0.166,5,0.166,8,0.462,19,0.835,22,0.015,23,0.73,24,0.693,36,0.29,50,0.24,56,1.837,59,0.187,105,0.011,106,0.011,148,1.685,150,1.563,200,1.631,292,1.398,396,3.318,409,3.899,509,2.703,518,4.127,520,3.9,521,3.9,522,3.31,523,2.423,525,3.645,526,3.31,533,3.989,534,3.609,718,4.687,1049,2.304,1052,5.205,1053,5.205,1054,4.009,1070,4.616,1071,4.616]],["title/entities/Users.html",[48,1.11,145,2.073]],["body/entities/Users.html",[3,0.2,4,0.18,5,0.18,8,0.5,19,0.697,22,0.015,23,0.791,24,0.475,36,0.334,45,1.406,48,1.774,50,0.2,57,3.15,58,3.252,59,0.14,105,0.011,106,0.011,145,3.313,146,2.931,148,1.774,149,3.155,150,1.305,151,3.912,152,4.935,153,4.201,154,3.912,156,4.201,157,1.003,158,3.588,159,4.345,160,3.588,161,4.527,162,4.527,163,2.174,164,2.273,1072,4.345,1073,5.003]],["title/classes/UsersBaseEntity.html",[59,0.111,156,2.629]],["body/classes/UsersBaseEntity.html",[3,0.137,4,0.123,5,0.123,8,0.342,9,1.228,10,2.014,19,1.002,22,0.015,23,1.113,24,0.668,31,0.829,36,0.301,45,0.962,50,0.137,53,1.598,54,1.424,55,2.372,56,1.595,57,1.708,58,2.123,59,0.137,71,1.209,74,2.033,105,0.009,106,0.009,148,1.374,149,2.123,150,1.878,152,2.676,153,4.139,156,3.253,157,1.371,158,4.717,161,2.455,162,2.455,163,2.123,164,3.198,279,2.705,289,2.477,292,1.037,311,2.278,316,2.278,317,2.278,324,3.822,344,4.46,433,2.676,434,2.455,530,4.124,531,3.253,532,3.043,536,4.458,537,2.676,538,4.458,539,4.46,540,2.972,541,2.676,542,2.972,543,2.676,544,2.972,545,2.676,546,2.972,547,2.455,722,2.676,913,4.245,1074,2.972,1075,6.219,1076,3.422,1077,3.422,1078,3.422,1079,3.422,1080,3.422,1081,3.422,1082,4.888,1083,4.888,1084,4.888,1085,4.888,1086,3.422,1087,2.972]],["title/controllers/UsersControllerAdmin.html",[132,2.833,165,1.452]],["body/controllers/UsersControllerAdmin.html",[3,0.145,4,0.13,5,0.13,8,0.363,9,1.281,19,0.937,21,1.605,22,0.015,23,1.009,24,0.606,25,1.605,31,1.628,36,0.325,39,0.574,48,1.02,50,0.145,53,2.28,56,1.733,59,0.102,63,1.142,73,1.962,105,0.009,106,0.009,127,1.649,132,3.655,150,1.754,165,1.335,167,2.01,168,2.033,170,2.544,171,2.033,183,2.261,190,2.01,191,2.821,192,2.01,193,2.417,194,2.01,196,1.649,197,2.315,198,1.649,199,2.01,200,1.283,218,1.906,220,3.392,221,2.839,228,3.655,229,2.839,563,4.085,802,2.604,816,3.154,826,2.985,834,2.839,946,3.985,987,3.985,992,2.839,1049,3.649,1088,3.154,1089,5.546,1090,2.839,1091,3.631,1092,3.631,1093,3.631,1094,3.631,1095,3.631,1096,3.631,1097,3.173,1098,3.154,1099,3.154,1100,3.631,1101,3.154,1102,3.154,1103,3.154,1104,3.631,1105,3.631,1106,3.631,1107,3.631,1108,3.631]],["title/controllers/UsersControllerPublic.html",[165,1.452,735,2.833]],["body/controllers/UsersControllerPublic.html",[3,0.164,4,0.148,5,0.148,8,0.411,9,1.396,19,0.773,21,1.396,22,0.015,23,0.878,24,0.527,25,1.396,31,1.345,36,0.364,39,0.65,48,1.976,50,0.164,59,0.115,63,1.294,73,1.62,90,1.964,105,0.01,106,0.01,127,1.868,150,1.449,157,0.825,165,1.512,167,2.277,171,2.215,190,2.277,191,3.074,192,2.277,196,1.868,197,2.523,198,1.868,199,2.277,200,1.453,205,2.409,206,2.409,214,2.561,218,2.159,231,3.572,232,3.572,406,3.696,563,4.244,735,3.983,941,2.738,1049,3.759,1099,3.572,1101,3.572,1102,3.572,1103,3.572,1109,3.572,1110,5.554,1111,4.113,1112,5.554,1113,4.113,1114,4.113,1115,4.113,1116,3.457,1117,3.572,1118,2.95,1119,4.113,1120,4.113,1121,4.113]],["title/modules/UsersModule.html",[107,0.887,122,2.313]],["body/modules/UsersModule.html",[3,0.186,4,0.167,5,0.167,22,0.014,36,0.354,39,0.736,48,1.309,50,0.186,59,0.131,105,0.011,106,0.011,107,1.502,109,1.712,110,1.938,111,2.116,112,2.116,113,1.938,114,2.781,115,3.037,122,4.62,123,2.739,124,2.116,125,2.023,133,2.116,238,3.1,239,2.215,1097,4.975,1098,4.045,1116,4.975,1117,4.045,1118,3.34,1122,4.045,1123,4.045,1124,4.045,1125,4.657,1126,4.657]],["title/injectables/UsersServiceAdmin.html",[37,1.11,1097,2.459]],["body/injectables/UsersServiceAdmin.html",[3,0.123,4,0.11,5,0.11,8,0.308,9,1.137,10,2.522,14,1.804,19,0.918,21,1.584,22,0.015,23,1.077,24,0.598,25,1.584,31,1.526,36,0.319,37,1.271,39,0.486,45,0.864,48,1.508,50,0.123,53,2.286,54,2.969,55,1.882,56,1.055,59,0.086,62,1.28,64,1.663,70,1.915,71,1.896,73,1.923,74,3.128,75,1.915,76,1.802,90,1.839,94,2.374,105,0.008,106,0.008,164,1.397,168,1.804,170,2.258,171,1.804,183,2.816,196,1.397,197,2.055,198,1.397,224,2.97,239,1.463,241,1.463,246,3.275,250,3.143,259,1.915,274,2.65,279,2.504,310,1.915,334,3.011,531,3.011,532,2.816,563,3.861,617,2.405,631,3.011,802,3.244,826,2.65,834,3.537,855,2.671,1049,3.402,1089,5.138,1090,3.537,1097,2.816,1118,2.206,1127,2.671,1128,2.671,1129,3.076,1130,3.929,1131,3.076,1132,3.076,1133,3.076,1134,3.076,1135,3.076,1136,2.671,1137,3.076,1138,3.076,1139,3.076,1140,3.076,1141,3.076,1142,2.671,1143,2.671]],["title/injectables/UsersServicePublic.html",[37,1.11,1116,2.459]],["body/injectables/UsersServicePublic.html",[3,0.136,4,0.122,5,0.122,8,0.339,9,1.221,10,2.538,14,1.937,17,2.978,18,2.947,19,0.862,21,1.557,22,0.015,23,0.979,24,0.647,25,1.557,31,1.374,36,0.354,37,1.365,39,0.536,42,1.878,43,1.878,44,1.987,45,0.953,46,1.411,47,2.112,48,1.365,50,0.136,55,2.36,59,0.095,62,2.021,63,1.067,64,2.277,71,2.189,73,0.99,77,1.693,83,1.353,90,1.807,102,2.258,105,0.009,106,0.009,149,1.474,160,2.433,168,1.937,171,2.263,196,1.541,197,2.206,198,1.541,239,1.614,241,1.614,246,3.429,250,3.323,255,2.946,256,2.688,258,2.653,259,2.112,265,2.946,268,2.946,269,2.653,270,2.946,432,2.433,469,2.433,563,4.207,842,2.946,850,2.653,853,2.653,1049,3.272,1090,3.798,1116,3.024,1118,2.433,1128,2.946,1130,4.218,1136,2.946,1142,2.946,1144,2.946,1145,4.857,1146,3.392,1147,3.392,1148,3.392,1149,3.392,1150,3.392,1151,4.857,1152,4.857,1153,4.857,1154,3.392,1155,3.392,1156,3.392,1157,3.392]],["title/classes/authDto.html",[59,0.111,367,2.313]],["body/classes/authDto.html",[3,0.201,4,0.181,5,0.181,8,0.504,19,0.882,22,0.014,24,0.601,36,0.306,50,0.201,55,2.885,56,1.697,59,0.178,105,0.011,106,0.011,148,1.781,150,1.653,200,1.779,289,3.013,292,1.526,367,3.712,516,3.937,518,4.062,519,4.955,520,3.839,521,3.839,523,2.643,525,3.163,554,5.504,1158,4.374,1159,5.036,1160,5.036,1161,5.036,1162,5.036,1163,5.036]],["title/coverage.html",[1164,4.224]],["body/coverage.html",[0,2.719,1,1.453,5,0.078,6,3.109,7,3.109,22,0.015,24,0.207,37,1.86,46,1.803,48,0.613,51,2.275,52,1.453,59,0.211,60,1.453,83,0.871,90,0.637,101,1.883,105,0.006,106,0.006,113,1.447,128,1.566,129,1.566,130,1.566,131,1.566,132,1.566,135,1.707,145,2.595,147,1.896,149,0.948,156,1.453,157,1.379,158,1.566,165,2.303,166,1.896,173,1.453,177,0.948,187,1.359,201,1.359,204,1.359,205,2.037,207,1.279,208,1.279,210,1.038,211,0.992,242,1.896,243,1.896,260,1.359,261,1.359,291,1.707,293,1.896,294,1.896,308,2.494,337,1.707,338,1.896,339,1.896,355,1.453,356,1.896,357,1.896,362,1.359,367,1.279,377,1.359,379,2.315,393,1.566,394,1.896,396,1.208,406,1.453,407,1.359,409,2.037,423,1.896,463,1.896,481,1.453,482,1.453,484,1.146,508,1.896,509,3.369,527,1.359,528,1.896,529,2.719,530,1.279,548,1.208,549,1.896,550,2.719,563,1.279,564,1.896,566,1.896,599,1.566,606,1.896,633,1.566,635,1.896,636,1.896,640,1.566,641,1.896,642,1.896,650,1.707,651,1.896,652,1.896,659,1.09,666,1.896,694,1.896,726,3.765,734,1.566,735,1.566,742,1.566,743,1.896,789,1.896,794,1.896,803,1.453,806,1.359,824,1.896,854,6.387,866,1.896,867,2.719,886,1.896,888,1.707,889,1.707,890,1.707,893,1.707,912,1.896,919,1.896,942,1.279,949,1.359,995,1.896,1009,1.359,1021,1.896,1034,1.896,1049,1.09,1057,1.896,1060,1.896,1072,1.896,1074,1.896,1088,1.896,1097,1.359,1109,1.896,1116,1.359,1127,1.896,1144,1.896,1158,1.896,1164,1.707,1165,1.896,1166,2.183,1167,2.183,1168,1.896,1169,6.876,1170,7.585,1171,3.765,1172,3.765,1173,4.335,1174,2.183,1175,2.183,1176,3.02,1177,3.02,1178,6.034,1179,1.896,1180,1.896,1181,6.034,1182,6.264,1183,2.183,1184,5.399,1185,1.896,1186,3.02,1187,3.478,1188,1.896,1189,3.389,1190,3.389,1191,1.896,1192,1.896,1193,1.896,1194,1.896,1195,1.896,1196,1.896,1197,6.618,1198,3.478,1199,5.399,1200,3.02,1201,1.896,1202,1.707,1203,1.896,1204,3.02,1205,1.896,1206,2.183]],["title/dependencies.html",[110,1.978,1207,2.859]],["body/dependencies.html",[22,0.015,39,0.851,40,3.353,41,3.155,105,0.012,106,0.012,110,2.241,434,3.863,490,4.114,491,3.863,500,5.739,507,4.678,576,4.678,602,3.585,756,4.678,1066,4.678,1208,5.386,1209,5.386,1210,7.148,1211,5.386,1212,5.386,1213,5.386,1214,5.386,1215,5.386,1216,5.386,1217,5.386,1218,5.386,1219,5.386,1220,5.386,1221,5.386,1222,5.386]],["title/miscellaneous/enumerations.html",[1223,2.05,1224,4.129]],["body/miscellaneous/enumerations.html",[8,0.566,22,0.014,42,3.77,43,3.134,90,2.131,101,3.293,105,0.012,106,0.012,296,4.885,300,4.44,1189,4.427,1190,5.326,1223,3.525,1224,4.917,1225,6.811,1226,4.917,1227,5.661,1228,6.811]],["title/miscellaneous/functions.html",[1223,2.05,1229,4.129]],["body/miscellaneous/functions.html",[8,0.381,21,1.859,22,0.014,23,1.169,24,0.702,25,1.859,31,0.922,32,1.812,48,1.071,56,1.229,74,1.585,101,1.655,105,0.009,106,0.009,113,2.945,149,1.655,157,1.057,204,3.762,205,2.231,207,3.087,208,3.539,260,3.281,261,2.372,299,2.372,300,2.231,303,4.675,406,4.022,484,3.716,557,3.281,596,3.309,629,4.577,631,2.536,633,3.78,685,5.663,874,5.248,888,4.121,889,4.121,890,4.121,905,3.309,907,3.309,908,3.309,1168,3.309,1171,3.309,1172,5.663,1186,3.309,1188,4.577,1196,3.309,1200,5.248,1201,3.309,1202,4.121,1203,4.577,1204,5.663,1205,3.309,1223,2.372,1229,3.309,1230,3.81,1231,3.81,1232,3.81,1233,5.27,1234,5.27,1235,6.042,1236,3.81,1237,3.81,1238,3.81,1239,3.81,1240,3.81,1241,7.08,1242,5.27]],["title/index.html",[8,0.329,1243,3.292,1244,3.292]],["body/index.html",[4,0.115,22,0.014,105,0.008,106,0.008,125,2.909,246,1.78,313,4.305,327,2.307,490,4.408,525,3.016,551,1.78,782,2.793,785,2.793,787,2.515,868,6.002,1143,2.793,1164,2.515,1165,4.059,1202,4.305,1245,3.216,1246,3.216,1247,5.505,1248,4.674,1249,3.216,1250,3.216,1251,3.216,1252,3.216,1253,4.674,1254,3.216,1255,3.216,1256,6.043,1257,3.216,1258,7.08,1259,3.216,1260,3.216,1261,3.216,1262,3.216,1263,4.674,1264,3.216,1265,4.674,1266,3.216,1267,5.505,1268,3.216,1269,4.674,1270,3.216,1271,3.216,1272,3.216,1273,3.216,1274,3.216,1275,6.043,1276,6.697,1277,4.674,1278,3.216,1279,3.216,1280,3.216,1281,3.216,1282,3.216,1283,6.697,1284,4.674,1285,6.043,1286,3.216,1287,4.674,1288,3.216,1289,3.216,1290,4.674,1291,6.697,1292,6.043,1293,3.216,1294,4.674,1295,3.216,1296,3.216,1297,3.216,1298,3.216,1299,6.043,1300,3.216,1301,3.216,1302,3.216,1303,3.216,1304,4.674,1305,3.216,1306,3.216,1307,3.216,1308,3.216,1309,3.216,1310,4.674,1311,3.216,1312,3.216,1313,3.216,1314,4.674,1315,3.216,1316,3.216,1317,5.249,1318,4.674,1319,3.216,1320,3.216,1321,3.216,1322,3.216,1323,3.216,1324,3.216,1325,3.216,1326,3.216,1327,4.674,1328,3.216,1329,2.793,1330,3.216,1331,3.216,1332,3.216,1333,3.216,1334,3.216,1335,3.216,1336,3.216,1337,4.674,1338,3.216,1339,3.216,1340,3.216,1341,3.216,1342,4.674,1343,3.216,1344,3.216,1345,3.216,1346,4.674,1347,4.674,1348,3.216,1349,3.216,1350,3.216,1351,3.216,1352,3.216,1353,3.216,1354,3.216,1355,3.216,1356,3.216,1357,2.793,1358,3.216,1359,3.216,1360,3.216,1361,3.216,1362,3.216,1363,3.216,1364,2.793]],["title/modules.html",[109,1.986]],["body/modules.html",[22,0.011,105,0.011,106,0.011,108,3.33,109,1.839,118,3.115,119,3.115,120,3.33,121,3.115,122,2.931,346,3.588,349,3.33,350,3.33,476,3.588,480,3.115,495,3.33,496,3.33,730,3.33,1317,6.974,1329,6.005,1365,8.03,1366,8.03,1367,8.135,1368,6.914]],["title/overview.html",[1369,4.692]],["body/overview.html",[2,2.381,22,0.014,105,0.008,106,0.008,107,0.684,108,4.995,109,1.12,110,1.267,111,1.383,112,1.383,113,1.267,114,1.267,115,1.383,116,2.645,117,2.645,118,4.23,119,4.713,120,4.372,121,4.507,122,4.3,123,2.04,124,1.383,125,1.323,127,1.383,146,1.784,201,4.23,234,2.645,235,2.645,236,2.645,241,1.449,292,0.923,346,4.712,347,2.645,348,2.645,349,4.738,350,4.738,377,4.23,407,4.23,413,2.645,415,2.645,416,2.645,476,5.001,477,2.645,478,2.645,479,2.645,480,3.666,481,3.551,482,3.551,493,2.645,494,2.645,495,3.551,496,3.551,634,2.184,730,4.738,731,2.645,806,4.23,818,2.645,819,2.645,820,2.645,856,2.645,857,2.645,858,4.633,949,4.23,1009,4.23,1015,2.645,1016,2.645,1017,2.645,1087,2.645,1097,4.23,1116,4.23,1122,2.645,1123,2.645,1124,2.645,1369,2.645,1370,3.046,1371,3.046,1372,3.046,1373,3.046,1374,3.046,1375,3.046]],["title/properties.html",[148,1.336,1207,2.859]],["body/properties.html",[22,0.014,105,0.013,106,0.013,148,1.723,551,3.394,1357,5.326,1364,5.326,1376,6.132,1377,6.132,1378,6.132]],["title/miscellaneous/variables.html",[1223,2.05,1379,4.129]],["body/miscellaneous/variables.html",[8,0.405,18,2.614,22,0.015,24,0.592,28,2.695,34,2.521,56,0.944,64,2.293,65,2.521,73,1.181,83,1.615,90,1.952,105,0.01,106,0.01,146,2.371,157,0.812,164,1.839,289,1.759,299,4.592,300,4.32,551,2.241,553,2.371,580,3.516,581,3.516,582,3.516,583,3.516,584,3.516,585,3.516,586,3.166,587,3.516,588,3.516,589,3.516,590,4.772,591,3.516,592,3.516,593,3.516,594,3.516,852,3.516,893,4.296,1176,3.516,1177,3.516,1179,5.417,1180,4.772,1185,3.516,1189,3.166,1190,5.23,1191,4.772,1192,5.809,1193,4.772,1194,3.516,1195,4.772,1223,2.521,1226,5.417,1379,3.516,1380,4.049,1381,5.495,1382,4.049,1383,5.495,1384,5.495,1385,4.049,1386,4.049,1387,5.495,1388,4.049,1389,4.049,1390,4.049,1391,4.049,1392,4.049,1393,4.049,1394,4.049,1395,4.049,1396,4.049,1397,4.049]],["title/routes.html",[1398,4.692]],["body/routes.html",[22,0.013,105,0.013,106,0.013,1398,5.545]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":854,"title":{},"body":{"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1377,"title":{},"body":{"properties.html":{}}}],["0.2.0",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1170,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1181,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1182,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1184,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1187,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1183,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":701,"title":{},"body":{"classes/PaginatedQueryDto.html":{},"classes/ResponseInterceptor.html":{}}}],["1.1.26",{"_index":1209,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1173,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1175,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1087,"title":{},"body":{"classes/UsersBaseEntity.html":{},"overview.html":{}}}],["10.0.0",{"_index":1210,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":726,"title":{},"body":{"classes/PaginatedQueryDto.html":{},"coverage.html":{}}}],["100'})@isnumber()@isoptional()@min(1)@max(100)@type(undefined",{"_index":702,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["11.0.0",{"_index":1211,"title":{},"body":{"dependencies.html":{}}}],["13.0.0",{"_index":1218,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":1370,"title":{},"body":{"overview.html":{}}}],["16.4.7",{"_index":1215,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1374,"title":{},"body":{"overview.html":{}}}],["200",{"_index":1139,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["21",{"_index":1373,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1375,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1214,"title":{},"body":{"dependencies.html":{}}}],["3.1.5",{"_index":1216,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1174,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1372,"title":{},"body":{"overview.html":{}}}],["4.4.0",{"_index":1217,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1371,"title":{},"body":{"overview.html":{}}}],["__dirname",{"_index":590,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["_datasource",{"_index":17,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/UsersServicePublic.html":{}}}],["_jwtservice",{"_index":26,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["_loggerservice",{"_index":610,"title":{},"body":{"classes/ErrorService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{}}}],["_reflector",{"_index":749,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["accept",{"_index":958,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["access",{"_index":97,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["accesstoken",{"_index":444,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["action",{"_index":334,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{},"injectables/RolesService.html":{},"injectables/UsersServiceAdmin.html":{}}}],["add",{"_index":329,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["admin",{"_index":101,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/AuthControllerAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"classes/CreateAdminDto.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["admin.email",{"_index":452,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["admin.id",{"_index":285,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{}}}],["admin.role.role",{"_index":103,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["admin@gmail.com",{"_index":511,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin_api_path",{"_index":1191,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admindto",{"_index":459,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["adminguard",{"_index":1,"title":{"guards/AdminGuard.html":{}},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"coverage.html":{}}}],["adminrole",{"_index":286,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["adminroutemodules",{"_index":108,"title":{"modules/AdminRouteModules.html":{}},"body":{"modules/AdminRouteModules.html":{},"modules/RouterModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":46,"title":{"entities/Admins.html":{}},"body":{"guards/AdminGuard.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"controllers/AuthControllerAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/UsersServicePublic.html":{},"coverage.html":{}}}],["admins/admins.module",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{}}}],["adminscontroller",{"_index":129,"title":{"controllers/AdminsController.html":{}},"body":{"modules/AdminRouteModules.html":{},"controllers/AdminsController.html":{},"coverage.html":{}}}],["adminsmodule",{"_index":118,"title":{"modules/AdminsModule.html":{}},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["adminsrepository",{"_index":248,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["adminsservice",{"_index":219,"title":{},"body":{"controllers/AdminsController.html":{}}}],["adminsserviceadmin",{"_index":201,"title":{"injectables/AdminsServiceAdmin.html":{}},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"coverage.html":{},"overview.html":{}}}],["adminstable1753017922617",{"_index":291,"title":{"classes/AdminsTable1753017922617.html":{}},"body":{"classes/AdminsTable1753017922617.html":{},"coverage.html":{}}}],["adminstablealter1753018246777",{"_index":337,"title":{"classes/AdminsTableAlter1753018246777.html":{}},"body":{"classes/AdminsTableAlter1753018246777.html":{},"coverage.html":{}}}],["afterupdate",{"_index":850,"title":{},"body":{"injectables/RolesService.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServicePublic.html":{}}}],["afterupdate.affected",{"_index":853,"title":{},"body":{"injectables/RolesService.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServicePublic.html":{}}}],["allowing",{"_index":1305,"title":{},"body":{"index.html":{}}}],["already",{"_index":842,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersServicePublic.html":{}}}],["alter.ts",{"_index":339,"title":{},"body":{"classes/AdminsTableAlter1753018246777.html":{},"coverage.html":{}}}],["alter.ts:12",{"_index":341,"title":{},"body":{"classes/AdminsTableAlter1753018246777.html":{}}}],["alter.ts:4",{"_index":340,"title":{},"body":{"classes/AdminsTableAlter1753018246777.html":{}}}],["alter.ts:6",{"_index":342,"title":{},"body":{"classes/AdminsTableAlter1753018246777.html":{}}}],["amazing",{"_index":1352,"title":{},"body":{"index.html":{}}}],["api",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/admin",{"_index":864,"title":{},"body":{"modules/RouterModule.html":{}}}],["api/public",{"_index":865,"title":{},"body":{"modules/RouterModule.html":{}}}],["api_prefix",{"_index":1192,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_prefix?.startswith",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api_prefix}/${controllerprefix.admin",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api_prefix}/${controllerprefix.public",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":405,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["apiexcludeendpoint",{"_index":946,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{}}}],["apiexcludeendpoint()@delete(':id",{"_index":1094,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["apioperation",{"_index":947,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["apioperation({summary",{"_index":922,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["apiproperty",{"_index":518,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/authDto.html":{}}}],["apiproperty({example",{"_index":554,"title":{},"body":{"classes/CreateTodosDto.html":{},"classes/authDto.html":{}}}],["apiproperty({type",{"_index":533,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["apipropertyoptional",{"_index":716,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["apipropertyoptional({enum",{"_index":713,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["apipropertyoptional({type",{"_index":699,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["apitags",{"_index":199,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["apitags('admins",{"_index":215,"title":{},"body":{"controllers/AdminsController.html":{}}}],["apitags('authentication",{"_index":380,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["apitags('roles",{"_index":810,"title":{},"body":{"controllers/RolesController.html":{}}}],["apitags('todos",{"_index":951,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["apitags('users",{"_index":1099,"title":{},"body":{"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["app",{"_index":629,"title":{},"body":{"classes/ErrorService.html":{},"miscellaneous/functions.html":{}}}],["app_filter",{"_index":601,"title":{},"body":{"modules/ErrorFilterModule.html":{}}}],["app_interceptor",{"_index":781,"title":{},"body":{"modules/ResponseModule.html":{}}}],["appdatasource",{"_index":893,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":1276,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1253,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":346,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":612,"title":{},"body":{"classes/ErrorService.html":{}}}],["array.isarray(datafromservice",{"_index":773,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["array.isarray(exceptionresponse.message",{"_index":625,"title":{},"body":{"classes/ErrorService.html":{}}}],["asc",{"_index":724,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["async",{"_index":10,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/DatabaseModule.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["auth",{"_index":355,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"coverage.html":{}}}],["authcontrolleradmin",{"_index":128,"title":{"controllers/AuthControllerAdmin.html":{}},"body":{"modules/AdminRouteModules.html":{},"controllers/AuthControllerAdmin.html":{},"coverage.html":{}}}],["authcontrollerpublic",{"_index":393,"title":{"controllers/AuthControllerPublic.html":{}},"body":{"controllers/AuthControllerPublic.html":{},"modules/PublicRouteModules.html":{},"coverage.html":{}}}],["authdto",{"_index":367,"title":{"classes/authDto.html":{}},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/authDto.html":{},"coverage.html":{}}}],["authdto.email",{"_index":436,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["authdto.password",{"_index":442,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["authmodule",{"_index":119,"title":{"modules/AuthModule.html":{}},"body":{"modules/AdminRouteModules.html":{},"modules/AuthModule.html":{},"modules/PublicRouteModules.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1357,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":383,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["authserviceadmin",{"_index":377,"title":{"injectables/AuthServiceAdmin.html":{}},"body":{"controllers/AuthControllerAdmin.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"coverage.html":{},"overview.html":{}}}],["authservicepublic",{"_index":407,"title":{"injectables/AuthServicePublic.html":{}},"body":{"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServicePublic.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1368,"title":{},"body":{"modules.html":{}}}],["await",{"_index":71,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/DatabaseModule.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["aws",{"_index":1294,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1353,"title":{},"body":{"index.html":{}}}],["base.entity",{"_index":159,"title":{},"body":{"entities/Admins.html":{},"entities/Users.html":{}}}],["base.entity.ts",{"_index":1074,"title":{},"body":{"classes/UsersBaseEntity.html":{},"coverage.html":{}}}],["base.entity.ts:11",{"_index":1076,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["base.entity.ts:15",{"_index":1079,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["base.entity.ts:23",{"_index":1081,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["base.entity.ts:8",{"_index":1077,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["based",{"_index":1289,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":567,"title":{},"body":{"classes/DBBaseEntity.html":{}}}],["bcrypt",{"_index":433,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/UsersBaseEntity.html":{}}}],["bcrypt.compare",{"_index":441,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["bcrypt.hash(this.password",{"_index":1086,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["bcryptjs",{"_index":434,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/UsersBaseEntity.html":{},"dependencies.html":{}}}],["bearer",{"_index":82,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["beforeinsert",{"_index":1082,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["beforeinsert()@beforeupdate",{"_index":1080,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["beforeupdate",{"_index":1083,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["below",{"_index":964,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["between",{"_index":700,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["binding",{"_index":783,"title":{},"body":{"modules/ResponseModule.html":{}}}],["board",{"_index":1345,"title":{},"body":{"index.html":{}}}],["body",{"_index":191,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["boolean",{"_index":557,"title":{},"body":{"classes/CreateTodosDto.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/PaginatedQueryDto.html":{},"entities/Todos.html":{},"miscellaneous/functions.html":{}}}],["boolean'})@isboolean()@isoptional()@transform",{"_index":709,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["bootstrap",{"_index":113,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/PublicRouteModules.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1367,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1365,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1248,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":752,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["catch",{"_index":75,"title":{},"body":{"guards/AdminGuard.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/UsersServiceAdmin.html":{}}}],["catch(exception",{"_index":611,"title":{},"body":{"classes/ErrorService.html":{}}}],["changed",{"_index":390,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["changed')@putadmin()@patch('change",{"_index":364,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["changepassword",{"_index":358,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["changepassword(admin",{"_index":360,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["changepassword(undefined",{"_index":427,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["changepassword(user",{"_index":395,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["channel",{"_index":1320,"title":{},"body":{"index.html":{}}}],["character",{"_index":318,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{}}}],["check",{"_index":1283,"title":{},"body":{"index.html":{}}}],["class",{"_index":59,"title":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Auth.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"classes/ErrorService.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UsersBaseEntity.html":{},"classes/authDto.html":{}},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{},"coverage.html":{}}}],["classes",{"_index":292,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Auth.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"classes/ErrorService.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"classes/ResponseInterceptor.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UsersBaseEntity.html":{},"classes/authDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":779,"title":{},"body":{"modules/ResponseModule.html":{}}}],["cli.module.ts",{"_index":901,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["clicks",{"_index":1304,"title":{},"body":{"index.html":{}}}],["climodule",{"_index":476,"title":{"modules/CliModule.html":{}},"body":{"modules/CliModule.html":{},"modules.html":{},"overview.html":{}}}],["cloud",{"_index":1288,"title":{},"body":{"index.html":{}}}],["cluster_adminroutemodules",{"_index":116,"title":{},"body":{"modules/AdminRouteModules.html":{},"overview.html":{}}}],["cluster_adminroutemodules_imports",{"_index":117,"title":{},"body":{"modules/AdminRouteModules.html":{},"overview.html":{}}}],["cluster_adminsmodule",{"_index":234,"title":{},"body":{"modules/AdminsModule.html":{},"overview.html":{}}}],["cluster_adminsmodule_exports",{"_index":236,"title":{},"body":{"modules/AdminsModule.html":{},"overview.html":{}}}],["cluster_adminsmodule_providers",{"_index":235,"title":{},"body":{"modules/AdminsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":348,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":413,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":416,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":414,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":415,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_climodule",{"_index":477,"title":{},"body":{"modules/CliModule.html":{},"overview.html":{}}}],["cluster_climodule_imports",{"_index":479,"title":{},"body":{"modules/CliModule.html":{},"overview.html":{}}}],["cluster_climodule_providers",{"_index":478,"title":{},"body":{"modules/CliModule.html":{},"overview.html":{}}}],["cluster_commonmodules",{"_index":493,"title":{},"body":{"modules/CommonModules.html":{},"overview.html":{}}}],["cluster_commonmodules_imports",{"_index":494,"title":{},"body":{"modules/CommonModules.html":{},"overview.html":{}}}],["cluster_publicroutemodules",{"_index":731,"title":{},"body":{"modules/PublicRouteModules.html":{},"overview.html":{}}}],["cluster_publicroutemodules_imports",{"_index":732,"title":{},"body":{"modules/PublicRouteModules.html":{}}}],["cluster_rolesmodule",{"_index":818,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":820,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":819,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_routermodule",{"_index":856,"title":{},"body":{"modules/RouterModule.html":{},"overview.html":{}}}],["cluster_routermodule_imports",{"_index":857,"title":{},"body":{"modules/RouterModule.html":{},"overview.html":{}}}],["cluster_todosmodule",{"_index":1015,"title":{},"body":{"modules/TodosModule.html":{},"overview.html":{}}}],["cluster_todosmodule_exports",{"_index":1016,"title":{},"body":{"modules/TodosModule.html":{},"overview.html":{}}}],["cluster_todosmodule_providers",{"_index":1017,"title":{},"body":{"modules/TodosModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1122,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1124,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1123,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":344,"title":{},"body":{"classes/AdminsTableAlter1753018246777.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"classes/UsersBaseEntity.html":{}}}],["column({name",{"_index":915,"title":{},"body":{"entities/Todos.html":{}}}],["column({nullable",{"_index":913,"title":{},"body":{"entities/Todos.html":{},"classes/UsersBaseEntity.html":{}}}],["come",{"_index":1311,"title":{},"body":{"index.html":{}}}],["command",{"_index":491,"title":{},"body":{"modules/CliModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"dependencies.html":{}}}],["command({command",{"_index":870,"title":{},"body":{"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{}}}],["commandmodule",{"_index":489,"title":{},"body":{"modules/CliModule.html":{}}}],["common",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"modules/CliModule.html":{}}}],["commonmodules",{"_index":349,"title":{"modules/CommonModules.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModules.html":{},"modules.html":{},"overview.html":{}}}],["compodoc/compodoc",{"_index":1208,"title":{},"body":{"dependencies.html":{}}}],["configuration",{"_index":899,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["conflictexception",{"_index":258,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/RolesService.html":{},"injectables/UsersServicePublic.html":{}}}],["conflictexception('role",{"_index":841,"title":{},"body":{"injectables/RolesService.html":{}}}],["conflictexception('user",{"_index":268,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["console.log",{"_index":81,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["console.log(__dirname",{"_index":492,"title":{},"body":{"modules/CliModule.html":{}}}],["console.log(exception",{"_index":623,"title":{},"body":{"classes/ErrorService.html":{}}}],["console.log(exceptionresponse",{"_index":621,"title":{},"body":{"classes/ErrorService.html":{}}}],["console.log(queryparams",{"_index":226,"title":{},"body":{"controllers/AdminsController.html":{}}}],["consolelogger",{"_index":667,"title":{},"body":{"classes/MyLogger.html":{}}}],["const",{"_index":64,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/DatabaseModule.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":322,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["constructor(@inject",{"_index":763,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["constructor(_datasource",{"_index":425,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"injectables/SeedUsersDatabase.html":{}}}],["constructor(_jwtservice",{"_index":15,"title":{},"body":{"guards/AdminGuard.html":{},"guards/PublicUserGuard.html":{}}}],["constructor(_loggerservice",{"_index":608,"title":{},"body":{"classes/ErrorService.html":{},"injectables/SeedTodoDatabase.html":{}}}],["constructor(_reflector",{"_index":746,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["constructor(adminsrepository",{"_index":245,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["constructor(private",{"_index":218,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"classes/ErrorService.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["constructor(rolesrepository",{"_index":827,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(todosrepository",{"_index":1022,"title":{},"body":{"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["constructor(usersrepository",{"_index":1128,"title":{},"body":{"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AdminGuard.html":{},"classes/MyLogger.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{}}}],["context.gethandler",{"_index":770,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["context.switchtohttp",{"_index":66,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{}}}],["controller",{"_index":165,"title":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"coverage.html":{}}}],["controller('admin",{"_index":217,"title":{},"body":{"controllers/AdminsController.html":{}}}],["controller('auth",{"_index":382,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["controller('roles",{"_index":811,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('todos",{"_index":953,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["controller('users",{"_index":1101,"title":{},"body":{"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["controller(`${controllerprefix.admin}/admins",{"_index":216,"title":{},"body":{"controllers/AdminsController.html":{}}}],["controller(`${controllerprefix.admin}/auth",{"_index":381,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["controller(`${controllerprefix.admin}/roles",{"_index":809,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller(`${controllerprefix.admin}/todos",{"_index":952,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["controller(`${controllerprefix.admin}/users",{"_index":1100,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["controller(`${controllerprefix.public}/auth",{"_index":410,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["controller(`${controllerprefix.public}/todos",{"_index":1011,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["controller(`${controllerprefix.public}/users",{"_index":1119,"title":{},"body":{"controllers/UsersControllerPublic.html":{}}}],["controllerprefix",{"_index":1225,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["controllerprefix.admin",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controllerprefix.public",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controllers",{"_index":127,"title":{},"body":{"modules/AdminRouteModules.html":{},"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/PublicRouteModules.html":{},"modules/ResponseModule.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"overview.html":{}}}],["count",{"_index":772,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["courses",{"_index":1326,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1164,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":168,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["create(@body",{"_index":221,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/RolesController.html":{},"controllers/UsersControllerAdmin.html":{}}}],["create(@user",{"_index":977,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["create(createadmindto",{"_index":172,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{}}}],["create(createroledto",{"_index":795,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["create(createuserdto",{"_index":1090,"title":{},"body":{"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["create(user",{"_index":920,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["createadmindto",{"_index":173,"title":{"classes/CreateAdminDto.html":{}},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["createadmindto.email",{"_index":267,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["createadmindto.name",{"_index":288,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["createadmindto.password",{"_index":290,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["created",{"_index":970,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["created_at",{"_index":311,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"classes/Init1752751622275.html":{},"classes/UsersBaseEntity.html":{}}}],["createdat",{"_index":279,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{}}}],["createdatecolumn",{"_index":572,"title":{},"body":{"classes/DBBaseEntity.html":{}}}],["createdatecolumn({type",{"_index":537,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"classes/UsersBaseEntity.html":{}}}],["createparamdecorator((_",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createroledto",{"_index":527,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["createroledto.name",{"_index":845,"title":{},"body":{"injectables/RolesService.html":{}}}],["createroledto.name.tolowercase",{"_index":840,"title":{},"body":{"injectables/RolesService.html":{}}}],["createtododto",{"_index":921,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{}}}],["createtodosdto",{"_index":548,"title":{"classes/CreateTodosDto.html":{}},"body":{"classes/CreateTodosDto.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateTodosDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":563,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1153,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["creation",{"_index":1138,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["ctx",{"_index":65,"title":{},"body":{"guards/AdminGuard.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":67,"title":{},"body":{"guards/AdminGuard.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{}}}],["ctx.getresponse",{"_index":69,"title":{},"body":{"guards/AdminGuard.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":274,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"classes/ResponseInterceptor.html":{},"injectables/RolesService.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{}}}],["database",{"_index":584,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":498,"title":{},"body":{"modules/CommonModules.html":{}}}],["databasemodule",{"_index":480,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datafromservice",{"_index":774,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["datasource",{"_index":18,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/DatabaseModule.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/UsersServicePublic.html":{},"miscellaneous/variables.html":{}}}],["datasource(options).initialize",{"_index":597,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["datasourcefactory",{"_index":595,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["date",{"_index":536,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"classes/UsersBaseEntity.html":{}}}],["datum.description",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datum.title",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbbaseentity",{"_index":530,"title":{"classes/DBBaseEntity.html":{}},"body":{"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"classes/UsersBaseEntity.html":{},"coverage.html":{}}}],["dbbaseentity:11",{"_index":544,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UsersBaseEntity.html":{}}}],["dbbaseentity:14",{"_index":540,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UsersBaseEntity.html":{}}}],["dbbaseentity:17",{"_index":546,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UsersBaseEntity.html":{}}}],["dbbaseentity:20",{"_index":542,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UsersBaseEntity.html":{}}}],["debug",{"_index":668,"title":{},"body":{"classes/MyLogger.html":{}}}],["debug(message",{"_index":672,"title":{},"body":{"classes/MyLogger.html":{}}}],["declarations",{"_index":112,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/PublicRouteModules.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decodeddata",{"_index":86,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["decodeddata.email",{"_index":93,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["decodeddata.id",{"_index":92,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["decorator/put",{"_index":376,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["decorators",{"_index":150,"title":{},"body":{"entities/Admins.html":{},"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"classes/PaginatedQueryDto.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"classes/authDto.html":{}}}],["deeper",{"_index":1322,"title":{},"body":{"index.html":{}}}],["default",{"_index":299,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{},"entities/Todos.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":19,"title":{},"body":{"guards/AdminGuard.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"classes/ErrorService.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{}}}],["delete",{"_index":194,"title":{},"body":{"controllers/AdminsController.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{}}}],["delete(':id",{"_index":992,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{}}}],["deleted_at",{"_index":317,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"classes/Init1752751622275.html":{},"classes/UsersBaseEntity.html":{}}}],["deletedat",{"_index":531,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"injectables/TodosServiceAdmin.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{}}}],["deletedatecolumn",{"_index":573,"title":{},"body":{"classes/DBBaseEntity.html":{}}}],["deletedatecolumn({type",{"_index":541,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"classes/UsersBaseEntity.html":{}}}],["dependencies",{"_index":110,"title":{"dependencies.html":{}},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/PublicRouteModules.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1275,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1293,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1284,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1303,"title":{},"body":{"index.html":{}}}],["desc",{"_index":725,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["describe",{"_index":872,"title":{},"body":{"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{}}}],["description",{"_index":551,"title":{},"body":{"classes/CreateTodosDto.html":{},"classes/Init1752751622275.html":{},"classes/PaginatedQueryDto.html":{},"injectables/SeedTodoDatabase.html":{},"entities/Todos.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["detail",{"_index":402,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["development",{"_index":1260,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1332,"title":{},"body":{"index.html":{}}}],["directly",{"_index":902,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["discord",{"_index":1319,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1321,"title":{},"body":{"index.html":{}}}],["docs/paginate",{"_index":211,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"interfaces/ICommonOptions.html":{},"classes/PaginatedQueryDto.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"coverage.html":{}}}],["documentation",{"_index":1165,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["does't",{"_index":438,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["doesn't",{"_index":472,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["doespasswordmatch",{"_index":455,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["don't",{"_index":458,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["dotenv",{"_index":576,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":577,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["down",{"_index":297,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["down(queryrunner",{"_index":302,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["drop",{"_index":335,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["dto",{"_index":961,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["dto/auth.dto",{"_index":375,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["dto/create",{"_index":196,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["dto/update",{"_index":198,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["dtos",{"_index":969,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["e2e",{"_index":1270,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1249,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1281,"title":{},"body":{"index.html":{}}}],["email",{"_index":55,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{}}}],["endpoint",{"_index":991,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["ensure",{"_index":1279,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1336,"title":{},"body":{"index.html":{}}}],["entities",{"_index":146,"title":{},"body":{"entities/Admins.html":{},"modules/DatabaseModule.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"entities/Users.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/admin.entity",{"_index":213,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{}}}],["entities/role.entity",{"_index":822,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/todos.entity",{"_index":1019,"title":{},"body":{"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["entities/user.entity",{"_index":1118,"title":{},"body":{"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["entity",{"_index":145,"title":{"entities/Admins.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"entities/Users.html":{}},"body":{"entities/Admins.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"entities/Users.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":591,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":723,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["enumerations",{"_index":1224,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":76,"title":{},"body":{"guards/AdminGuard.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"classes/MyLogger.html":{},"guards/PublicUserGuard.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/UsersServiceAdmin.html":{}}}],["error('no",{"_index":882,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["error(message",{"_index":675,"title":{},"body":{"classes/MyLogger.html":{}}}],["error.message",{"_index":1140,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["error.service",{"_index":600,"title":{},"body":{"modules/ErrorFilterModule.html":{}}}],["error/error.module",{"_index":502,"title":{},"body":{"modules/CommonModules.html":{}}}],["error?.message",{"_index":910,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["error?.stack",{"_index":911,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["errorfiltermodule",{"_index":495,"title":{"modules/ErrorFilterModule.html":{}},"body":{"modules/CommonModules.html":{},"modules/ErrorFilterModule.html":{},"modules.html":{},"overview.html":{}}}],["errormessage",{"_index":624,"title":{},"body":{"classes/ErrorService.html":{}}}],["errorservice",{"_index":599,"title":{"classes/ErrorService.html":{}},"body":{"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"coverage.html":{}}}],["example",{"_index":525,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/authDto.html":{},"index.html":{}}}],["exception",{"_index":614,"title":{},"body":{"classes/ErrorService.html":{}}}],["exception.getresponse",{"_index":620,"title":{},"body":{"classes/ErrorService.html":{}}}],["exception.getstatus",{"_index":618,"title":{},"body":{"classes/ErrorService.html":{}}}],["exception.stack",{"_index":622,"title":{},"body":{"classes/ErrorService.html":{}}}],["exceptionfilter",{"_index":607,"title":{},"body":{"classes/ErrorService.html":{}}}],["exceptionresponse",{"_index":619,"title":{},"body":{"classes/ErrorService.html":{}}}],["exceptionresponse.message",{"_index":627,"title":{},"body":{"classes/ErrorService.html":{}}}],["exceptionresponse.message?.[0",{"_index":626,"title":{},"body":{"classes/ErrorService.html":{}}}],["exclude",{"_index":1084,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["exclude()@column({nullable",{"_index":1078,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exisitng",{"_index":883,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["existingroles",{"_index":838,"title":{},"body":{"injectables/RolesService.html":{}}}],["existinguser",{"_index":435,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["existinguser.email",{"_index":447,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["existinguser.id",{"_index":446,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["existinguser.password",{"_index":443,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["existinguser.role.id",{"_index":448,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["existinguser.role.role",{"_index":449,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["existinguserinadmins",{"_index":1152,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["existinguserinusers",{"_index":1151,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["existingusersinadmin",{"_index":263,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["existingusersinusers",{"_index":264,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["exists",{"_index":269,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/RolesService.html":{},"injectables/UsersServicePublic.html":{}}}],["experience",{"_index":1324,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":450,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{}}}],["exports",{"_index":115,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/PublicRouteModules.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":40,"title":{},"body":{"guards/AdminGuard.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"dependencies.html":{}}}],["extends",{"_index":163,"title":{},"body":{"entities/Admins.html":{},"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"interfaces/ICommonOptions.html":{},"classes/MyLogger.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{}}}],["failed",{"_index":632,"title":{},"body":{"classes/ErrorService.html":{}}}],["false",{"_index":164,"title":{},"body":{"entities/Admins.html":{},"classes/CreateTodosDto.html":{},"modules/DatabaseModule.html":{},"classes/Init1752751622275.html":{},"classes/PaginatedQueryDto.html":{},"classes/ResponseInterceptor.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{},"miscellaneous/variables.html":{}}}],["false})@isboolean",{"_index":558,"title":{},"body":{"classes/CreateTodosDto.html":{}}}],["false})@joincolumn({name",{"_index":154,"title":{},"body":{"entities/Admins.html":{},"entities/Todos.html":{},"entities/Users.html":{}}}],["fast",{"_index":1297,"title":{},"body":{"index.html":{}}}],["features",{"_index":1307,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":179,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["few",{"_index":1299,"title":{},"body":{"index.html":{}}}],["fields",{"_index":959,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{},"coverage.html":{}}}],["findall",{"_index":1089,"title":{},"body":{"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{}}}],["findallpaginated",{"_index":169,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{}}}],["findallpaginated(@query",{"_index":225,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/RolesController.html":{}}}],["findallpaginated(queryparams",{"_index":176,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/RolesController.html":{}}}],["findallpaginated(undefined",{"_index":1026,"title":{},"body":{"injectables/TodosServiceAdmin.html":{}}}],["findallpaginated(user",{"_index":998,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["findallpaginated(userid",{"_index":925,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["findallpaginateddata",{"_index":260,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["findallpaginateddata(options",{"_index":1238,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findmanyoptions",{"_index":637,"title":{},"body":{"interfaces/ICommonOptions.html":{}}}],["findme",{"_index":424,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["findme(admin",{"_index":429,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["findme(user",{"_index":466,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["findone",{"_index":170,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{}}}],["findone(@param('id",{"_index":229,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/RolesController.html":{},"controllers/UsersControllerAdmin.html":{}}}],["findone(@param('todosid",{"_index":984,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["findone(@user",{"_index":1013,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["findone(id",{"_index":183,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{}}}],["findone(todosid",{"_index":932,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"injectables/TodosServiceAdmin.html":{}}}],["findone(user",{"_index":1001,"title":{},"body":{"controllers/TodosControllerPublic.html":{},"injectables/TodosServicePublic.html":{}}}],["findpaginated",{"_index":825,"title":{},"body":{"injectables/RolesService.html":{},"injectables/TodosServicePublic.html":{}}}],["findpaginated(queryparams",{"_index":832,"title":{},"body":{"injectables/RolesService.html":{}}}],["findpaginated(undefined",{"_index":1038,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["fk_53511787e1f412d746c4bf223ff",{"_index":664,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["fk_5733c73cd81c566a90cc4802f96",{"_index":345,"title":{},"body":{"classes/AdminsTableAlter1753018246777.html":{}}}],["fk_a2cecd1a3531c0b041e29ba46e1",{"_index":663,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["fk_d27f7a7f01967e4a5e8ba73ebb0",{"_index":330,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{}}}],["focus",{"_index":1306,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1339,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":331,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["form",{"_index":1068,"title":{},"body":{"classes/UpdateTodosDto.html":{}}}],["found",{"_index":454,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"injectables/TodosServicePublic.html":{}}}],["framework",{"_index":1247,"title":{},"body":{"index.html":{}}}],["fs.writefilesync('./todos.json",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":1335,"title":{},"body":{"index.html":{}}}],["function",{"_index":1169,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1229,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1302,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":228,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{}}}],["get(':id')@putadmin",{"_index":184,"title":{},"body":{"controllers/AdminsController.html":{}}}],["get(':todosid",{"_index":983,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["get('me",{"_index":387,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["get('user/:userid",{"_index":979,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["getting",{"_index":1243,"title":{"index.html":{}},"body":{}}],["global",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{}}}],["globally",{"_index":786,"title":{},"body":{"modules/ResponseModule.html":{},"controllers/TodosControllerAdmin.html":{}}}],["graph",{"_index":1329,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":1349,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AdminGuard.html":{},"guards/PublicUserGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AdminGuard.html":{},"guards/PublicUserGuard.html":{},"overview.html":{}}}],["hands",{"_index":1323,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1312,"title":{},"body":{"index.html":{}}}],["hashpassword",{"_index":1075,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["hassle",{"_index":895,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["help",{"_index":1327,"title":{},"body":{"index.html":{}}}],["helper",{"_index":891,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["helper.ts",{"_index":1172,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":787,"title":{},"body":{"modules/ResponseModule.html":{},"injectables/SeedUsersDatabase.html":{},"index.html":{}}}],["hide",{"_index":990,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["host",{"_index":586,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/ErrorService.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":616,"title":{},"body":{"classes/ErrorService.html":{}}}],["https://docs.nestjs.com/interceptors#binding",{"_index":788,"title":{},"body":{"modules/ResponseModule.html":{}}}],["https://nestjs.com",{"_index":1361,"title":{},"body":{"index.html":{}}}],["https://stackoverflow.com/questions/62700524/nest",{"_index":956,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["icommonoptions",{"_index":633,"title":{"interfaces/ICommonOptions.html":{}},"body":{"interfaces/ICommonOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["id",{"_index":53,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{}}}],["id'})@responsemessage('todo",{"_index":933,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["identifier",{"_index":1166,"title":{},"body":{"coverage.html":{}}}],["ijwtpayload",{"_index":52,"title":{"interfaces/IJwtPayload.html":{}},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"coverage.html":{}}}],["ilike",{"_index":1042,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["implements",{"_index":61,"title":{},"body":{"guards/AdminGuard.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"modules/AppModule.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{}}}],["imports",{"_index":133,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/DatabaseModule.html":{},"modules/PublicRouteModules.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"guards/AdminGuard.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{}}}],["information",{"_index":1286,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1309,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":539,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UsersBaseEntity.html":{}}}],["init.ts",{"_index":652,"title":{},"body":{"classes/Init1752751622275.html":{},"coverage.html":{}}}],["init.ts:14",{"_index":654,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["init.ts:4",{"_index":653,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["init.ts:6",{"_index":655,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["init1752751622275",{"_index":650,"title":{"classes/Init1752751622275.html":{}},"body":{"classes/Init1752751622275.html":{},"coverage.html":{}}}],["inject",{"_index":755,"title":{},"body":{"classes/ResponseInterceptor.html":{},"injectables/SeedUsersDatabase.html":{}}}],["injectable",{"_index":37,"title":{"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"coverage.html":{}}}],["injectables",{"_index":241,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"overview.html":{}}}],["injectrepository",{"_index":259,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["injectrepository(admins",{"_index":262,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["injectrepository(roles",{"_index":837,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(todos",{"_index":1031,"title":{},"body":{"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["injectrepository(users",{"_index":1136,"title":{},"body":{"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["install",{"_index":1301,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1259,"title":{},"body":{"index.html":{}}}],["instanceloader",{"_index":686,"title":{},"body":{"classes/MyLogger.html":{}}}],["instead",{"_index":1064,"title":{},"body":{"classes/UpdateTodosDto.html":{}}}],["integer",{"_index":321,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{},"classes/PaginatedQueryDto.html":{}}}],["integer'})@isnumber()@isoptional()@type(undefined",{"_index":704,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["interact",{"_index":1330,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":745,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":750,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["interceptors",{"_index":784,"title":{},"body":{"modules/ResponseModule.html":{}}}],["interface",{"_index":51,"title":{"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{}},"body":{"guards/AdminGuard.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"guards/PublicUserGuard.html":{},"coverage.html":{}}}],["interfaces",{"_index":634,"title":{},"body":{"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"overview.html":{}}}],["interfaces/pagination",{"_index":759,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["ipaginationmetadata",{"_index":640,"title":{"interfaces/IPaginationMetadata.html":{}},"body":{"interfaces/IPaginationMetadata.html":{},"classes/ResponseInterceptor.html":{},"coverage.html":{}}}],["is_completed",{"_index":660,"title":{},"body":{"classes/Init1752751622275.html":{},"entities/Todos.html":{}}}],["isboolean",{"_index":562,"title":{},"body":{"classes/CreateTodosDto.html":{},"classes/PaginatedQueryDto.html":{}}}],["iscompleted",{"_index":552,"title":{},"body":{"classes/CreateTodosDto.html":{},"entities/Todos.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["isemail",{"_index":519,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/authDto.html":{}}}],["isenum",{"_index":792,"title":{},"body":{"entities/Roles.html":{}}}],["isenum(userrole",{"_index":793,"title":{},"body":{"entities/Roles.html":{}}}],["isnotempty",{"_index":520,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"entities/Roles.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/authDto.html":{}}}],["isnotempty()@isenum(userrole)@column({nullable",{"_index":790,"title":{},"body":{"entities/Roles.html":{}}}],["isnotempty()@minlength(1)@isemail()@apiproperty({example",{"_index":510,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty()@minlength(8)@isstring()@apiproperty({example",{"_index":515,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":717,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["isoptional",{"_index":718,"title":{},"body":{"classes/PaginatedQueryDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["ispasswordverified",{"_index":440,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["isstring",{"_index":521,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/PaginatedQueryDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/authDto.html":{}}}],["isstring()@isnotempty",{"_index":534,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":1050,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":1054,"title":{},"body":{"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["isstring()@minlength(1)@apiproperty({example",{"_index":513,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{}}}],["job",{"_index":1342,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1344,"title":{},"body":{"index.html":{}}}],["join",{"_index":1355,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":161,"title":{},"body":{"entities/Admins.html":{},"entities/Todos.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{}}}],["js",{"_index":957,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["json.stringify(newdata",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json/index.ts",{"_index":1177,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["json/todos.json",{"_index":878,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["jsondata",{"_index":1179,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsondata.map((datum",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtmodule",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":16,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["kamil",{"_index":1358,"title":{},"body":{"index.html":{}}}],["key",{"_index":327,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{},"index.html":{}}}],["keyof",{"_index":638,"title":{},"body":{"interfaces/ICommonOptions.html":{}}}],["learn",{"_index":1315,"title":{},"body":{"index.html":{}}}],["legend",{"_index":111,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/PublicRouteModules.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1364,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1347,"title":{},"body":{"index.html":{}}}],["limit",{"_index":643,"title":{},"body":{"interfaces/IPaginationMetadata.html":{},"classes/PaginatedQueryDto.html":{}}}],["linkedin",{"_index":1341,"title":{},"body":{"index.html":{}}}],["list",{"_index":927,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["literal",{"_index":256,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServicePublic.html":{}}}],["localhost",{"_index":587,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["log",{"_index":669,"title":{},"body":{"classes/MyLogger.html":{}}}],["log(message",{"_index":678,"title":{},"body":{"classes/MyLogger.html":{}}}],["logger.service",{"_index":603,"title":{},"body":{"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{}}}],["loggermodule",{"_index":499,"title":{},"body":{"modules/CommonModules.html":{}}}],["loggermodule.forroot",{"_index":503,"title":{},"body":{"modules/CommonModules.html":{}}}],["loggerservice",{"_index":1241,"title":{},"body":{"miscellaneous/functions.html":{}}}],["login",{"_index":359,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["login(@body",{"_index":385,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["login(authdto",{"_index":366,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["look",{"_index":955,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["looking",{"_index":1287,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1338,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":900,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"controllers/TodosControllerAdmin.html":{}}}],["makes",{"_index":1295,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1308,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":162,"title":{},"body":{"entities/Admins.html":{},"entities/Todos.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{}}}],["manytoone(undefined",{"_index":151,"title":{},"body":{"entities/Admins.html":{},"entities/Todos.html":{},"entities/Users.html":{}}}],["map",{"_index":757,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["map((datafromservice",{"_index":765,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["mapped",{"_index":1065,"title":{},"body":{"classes/UpdateTodosDto.html":{}}}],["match",{"_index":439,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["matching",{"_index":106,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["mau",{"_index":1291,"title":{},"body":{"index.html":{}}}],["max",{"_index":719,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["max(100",{"_index":728,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["me(@user",{"_index":388,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["me(admin",{"_index":371,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["me(user",{"_index":400,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["message",{"_index":631,"title":{},"body":{"classes/ErrorService.html":{},"classes/MyLogger.html":{},"classes/ResponseInterceptor.html":{},"injectables/UsersServiceAdmin.html":{},"miscellaneous/functions.html":{}}}],["metadata",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["metadata.interface",{"_index":760,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["metadata.interface.ts",{"_index":642,"title":{},"body":{"interfaces/IPaginationMetadata.html":{},"coverage.html":{}}}],["methods",{"_index":9,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/ErrorService.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["migrationinterface",{"_index":295,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["migrations",{"_index":592,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["migrations/**/*{.ts,.js",{"_index":593,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["min",{"_index":720,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["min(1",{"_index":727,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["minlength",{"_index":522,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["minlength(1",{"_index":524,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":526,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["miscellaneous",{"_index":1223,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1346,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1263,"title":{},"body":{"index.html":{}}}],["module",{"_index":107,"title":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"modules/PublicRouteModules.html":{},"modules/ResponseModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"modules/PublicRouteModules.html":{},"modules/ResponseModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"injectables/SeedUsersDatabase.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":109,"title":{"modules.html":{}},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"modules/PublicRouteModules.html":{},"modules/ResponseModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/common.module",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/common.module.ts",{"_index":497,"title":{},"body":{"modules/CommonModules.html":{}}}],["modules/database/database.module",{"_index":486,"title":{},"body":{"modules/CliModule.html":{}}}],["modules/database/database.module.ts",{"_index":575,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["modules/entities/base.entity",{"_index":547,"title":{},"body":{"classes/CreateRoleDto.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"classes/UsersBaseEntity.html":{}}}],["modules/entities/base.entity.ts",{"_index":566,"title":{},"body":{"classes/DBBaseEntity.html":{},"coverage.html":{}}}],["modules/entities/base.entity.ts:11",{"_index":570,"title":{},"body":{"classes/DBBaseEntity.html":{}}}],["modules/entities/base.entity.ts:14",{"_index":568,"title":{},"body":{"classes/DBBaseEntity.html":{}}}],["modules/entities/base.entity.ts:17",{"_index":571,"title":{},"body":{"classes/DBBaseEntity.html":{}}}],["modules/entities/base.entity.ts:20",{"_index":569,"title":{},"body":{"classes/DBBaseEntity.html":{}}}],["modules/entities/user",{"_index":158,"title":{},"body":{"entities/Admins.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"coverage.html":{}}}],["modules/error/error.module.ts",{"_index":598,"title":{},"body":{"modules/ErrorFilterModule.html":{}}}],["modules/error/error.service.ts",{"_index":606,"title":{},"body":{"classes/ErrorService.html":{},"coverage.html":{}}}],["modules/error/error.service.ts:6",{"_index":609,"title":{},"body":{"classes/ErrorService.html":{}}}],["modules/error/error.service.ts:9",{"_index":613,"title":{},"body":{"classes/ErrorService.html":{}}}],["modules/logger.service",{"_index":485,"title":{},"body":{"modules/CliModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{}}}],["modules/logger.service.ts",{"_index":666,"title":{},"body":{"classes/MyLogger.html":{},"coverage.html":{}}}],["modules/logger.service.ts:16",{"_index":677,"title":{},"body":{"classes/MyLogger.html":{}}}],["modules/logger.service.ts:20",{"_index":683,"title":{},"body":{"classes/MyLogger.html":{}}}],["modules/logger.service.ts:24",{"_index":673,"title":{},"body":{"classes/MyLogger.html":{}}}],["modules/logger.service.ts:28",{"_index":681,"title":{},"body":{"classes/MyLogger.html":{}}}],["modules/logger.service.ts:4",{"_index":679,"title":{},"body":{"classes/MyLogger.html":{}}}],["modules/request/decorators/request.decorator",{"_index":214,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerPublic.html":{}}}],["modules/request/decorators/request.decorator.ts",{"_index":1185,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules/response/decorators/response.decorator",{"_index":209,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["modules/response/decorators/response.decorator.ts",{"_index":1186,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["modules/response/interfaces/pagination",{"_index":641,"title":{},"body":{"interfaces/IPaginationMetadata.html":{},"coverage.html":{}}}],["modules/response/response.interceptor.ts",{"_index":743,"title":{},"body":{"classes/ResponseInterceptor.html":{},"coverage.html":{}}}],["modules/response/response.interceptor.ts:15",{"_index":748,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["modules/response/response.interceptor.ts:18",{"_index":753,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["modules/response/respose.module.ts",{"_index":778,"title":{},"body":{"modules/ResponseModule.html":{}}}],["modules/swagger",{"_index":210,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"interfaces/ICommonOptions.html":{},"classes/PaginatedQueryDto.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"coverage.html":{}}}],["modules/utils/functions/common",{"_index":261,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["modules/utils/interfaces/common",{"_index":635,"title":{},"body":{"interfaces/ICommonOptions.html":{},"coverage.html":{}}}],["more",{"_index":1285,"title":{},"body":{"index.html":{}}}],["mylogger",{"_index":484,"title":{"classes/MyLogger.html":{}},"body":{"modules/CliModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"classes/MyLogger.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["myśliwiec",{"_index":1359,"title":{},"body":{"index.html":{}}}],["name",{"_index":23,"title":{},"body":{"guards/AdminGuard.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"classes/ErrorService.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":1333,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1202,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestapplication",{"_index":685,"title":{},"body":{"classes/MyLogger.html":{},"miscellaneous/functions.html":{}}}],["nestfactory",{"_index":688,"title":{},"body":{"classes/MyLogger.html":{}}}],["nestframework",{"_index":1363,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":744,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["nestjs",{"_index":490,"title":{},"body":{"modules/CliModule.html":{},"modules/CommonModules.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":39,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"modules/AppModule.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"classes/MyLogger.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":602,"title":{},"body":{"modules/ErrorFilterModule.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"modules/RouterModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":41,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1212,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1213,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":200,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/PaginatedQueryDto.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"classes/authDto.html":{}}}],["nestjs/typeorm",{"_index":239,"title":{},"body":{"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"modules/DatabaseModule.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["nestrouter",{"_index":858,"title":{},"body":{"modules/RouterModule.html":{},"overview.html":{}}}],["nestrouter.register",{"_index":862,"title":{},"body":{"modules/RouterModule.html":{}}}],["new",{"_index":83,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/DatabaseModule.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServicePublic.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newdata",{"_index":852,"title":{},"body":{"injectables/RolesService.html":{},"miscellaneous/variables.html":{}}}],["newpassword",{"_index":1052,"title":{},"body":{"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["newtodo",{"_index":1043,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["next",{"_index":751,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":764,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["nextpage",{"_index":644,"title":{},"body":{"interfaces/IPaginationMetadata.html":{}}}],["node.js",{"_index":1246,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":432,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServicePublic.html":{}}}],["notfoundexception('admin",{"_index":453,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["notfoundexception('todo",{"_index":1046,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["notfoundexception('user",{"_index":471,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["now",{"_index":315,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{}}}],["null",{"_index":310,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/ResponseInterceptor.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{}}}],["nullable",{"_index":153,"title":{},"body":{"entities/Admins.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{}}}],["number",{"_index":54,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/PaginatedQueryDto.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{}}}],["observable",{"_index":754,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["offer",{"_index":1343,"title":{},"body":{"index.html":{}}}],["official",{"_index":1292,"title":{},"body":{"index.html":{}}}],["oldpassword",{"_index":1053,"title":{},"body":{"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["open",{"_index":1348,"title":{},"body":{"index.html":{}}}],["optional",{"_index":25,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/ErrorService.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":596,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":125,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/PublicRouteModules.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1369,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1207,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":645,"title":{},"body":{"interfaces/IPaginationMetadata.html":{},"classes/PaginatedQueryDto.html":{}}}],["paginatedquerydto",{"_index":177,"title":{"classes/PaginatedQueryDto.html":{}},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"interfaces/ICommonOptions.html":{},"classes/PaginatedQueryDto.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"coverage.html":{}}}],["param",{"_index":193,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{}}}],["param('id",{"_index":988,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["param('userid",{"_index":981,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/ErrorService.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":1334,"title":{},"body":{"index.html":{}}}],["partial",{"_index":1063,"title":{},"body":{"classes/UpdateTodosDto.html":{}}}],["partialtype",{"_index":1062,"title":{},"body":{"classes/UpdateTodosDto.html":{}}}],["partialtype(createtodosdto",{"_index":1061,"title":{},"body":{"classes/UpdateTodosDto.html":{}}}],["password",{"_index":289,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Init1752751622275.html":{},"classes/UsersBaseEntity.html":{},"classes/authDto.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":361,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["passwords.newpassword",{"_index":461,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["passwords.oldpassword",{"_index":456,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["patch",{"_index":192,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["patch(':id",{"_index":987,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{}}}],["patch('change",{"_index":391,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["patch('update/:id",{"_index":815,"title":{},"body":{"controllers/RolesController.html":{}}}],["patch('update/me",{"_index":231,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/UsersControllerPublic.html":{}}}],["patch('update/me')@putadmin",{"_index":188,"title":{},"body":{"controllers/AdminsController.html":{}}}],["path",{"_index":863,"title":{},"body":{"modules/RouterModule.html":{}}}],["picktype",{"_index":1059,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["picktype(createroledto",{"_index":1058,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["pino",{"_index":500,"title":{},"body":{"modules/CommonModules.html":{},"dependencies.html":{}}}],["pinohttp",{"_index":504,"title":{},"body":{"modules/CommonModules.html":{}}}],["pipe",{"_index":965,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["pk_a3ffb1c0c8416b9fc6f907b7433",{"_index":658,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["pk_c1433d71a4838793a49dcad46ab",{"_index":656,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["pk_ca8cafd59ca6faaf67995344225",{"_index":662,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["pk_e3b38270c97a854c48d2e80874e",{"_index":325,"title":{},"body":{"classes/AdminsTable1753017922617.html":{}}}],["plaintoinstance",{"_index":762,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["plaintoinstance(paginatedquerydto",{"_index":767,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["platform",{"_index":1290,"title":{},"body":{"index.html":{}}}],["please",{"_index":1318,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":1258,"title":{},"body":{"index.html":{}}}],["port",{"_index":588,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["possible",{"_index":1282,"title":{},"body":{"index.html":{}}}],["post",{"_index":190,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["post('create",{"_index":220,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{}}}],["post('create')@putadmin",{"_index":174,"title":{},"body":{"controllers/AdminsController.html":{}}}],["post('login",{"_index":384,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["post('register",{"_index":1112,"title":{},"body":{"controllers/UsersControllerPublic.html":{}}}],["postgres",{"_index":580,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":167,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["prefix.constant.ts",{"_index":1190,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["preparedatatocreateadmin",{"_index":244,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["preparedatatocreateadmin(createadmindto",{"_index":253,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["prepareddata",{"_index":270,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["preparedrolesdata",{"_index":843,"title":{},"body":{"injectables/RolesService.html":{}}}],["preparedupdate",{"_index":281,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["preparedupdateroledata",{"_index":848,"title":{},"body":{"injectables/RolesService.html":{}}}],["prepareusercreatedata",{"_index":1145,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["prepareusercreatedata(createuserdto",{"_index":1148,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["pretty",{"_index":507,"title":{},"body":{"modules/CommonModules.html":{},"dependencies.html":{}}}],["prevpage",{"_index":646,"title":{},"body":{"interfaces/IPaginationMetadata.html":{}}}],["primary",{"_index":326,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{}}}],["primarygeneratedcolumn",{"_index":543,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"classes/UsersBaseEntity.html":{}}}],["private",{"_index":62,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["process.env.database_name",{"_index":585,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.database_password",{"_index":583,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.database_port",{"_index":589,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.database_username",{"_index":582,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.jwt_expires_in",{"_index":451,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["process.env.jwt_secret",{"_index":89,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["production",{"_index":1265,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1245,"title":{},"body":{"index.html":{}}}],["project",{"_index":1256,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AdminGuard.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/TodosServicePublic.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":265,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["properties",{"_index":148,"title":{"properties.html":{}},"body":{"entities/Admins.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/PaginatedQueryDto.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"classes/authDto.html":{},"properties.html":{}}}],["protected",{"_index":12,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["provide",{"_index":604,"title":{},"body":{"modules/ErrorFilterModule.html":{},"modules/ResponseModule.html":{}}}],["providers",{"_index":114,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/ErrorFilterModule.html":{},"modules/PublicRouteModules.html":{},"modules/ResponseModule.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":296,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{},"miscellaneous/enumerations.html":{}}}],["public_api_path",{"_index":1193,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["publicroutemodules",{"_index":730,"title":{"modules/PublicRouteModules.html":{}},"body":{"modules/PublicRouteModules.html":{},"modules/RouterModule.html":{},"modules.html":{},"overview.html":{}}}],["publicuserguard",{"_index":60,"title":{"guards/PublicUserGuard.html":{}},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"coverage.html":{}}}],["put",{"_index":967,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["putadmin",{"_index":204,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["putadmin()@get(':id",{"_index":800,"title":{},"body":{"controllers/RolesController.html":{}}}],["putadmin()@patch('update/:id",{"_index":804,"title":{},"body":{"controllers/RolesController.html":{}}}],["putadmin()@post('create",{"_index":796,"title":{},"body":{"controllers/RolesController.html":{}}}],["putadmin()@responsemessage('admins",{"_index":178,"title":{},"body":{"controllers/AdminsController.html":{}}}],["putadmin()@showpagination()@get",{"_index":798,"title":{},"body":{"controllers/RolesController.html":{}}}],["putpublicuser",{"_index":406,"title":{},"body":{"controllers/AuthControllerPublic.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerPublic.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["putpublicuser()@patch('change",{"_index":397,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["putpublicuser()@patch('update/me",{"_index":1114,"title":{},"body":{"controllers/UsersControllerPublic.html":{}}}],["putpublicuser()@responsemessage('todos",{"_index":999,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["puts",{"_index":1067,"title":{},"body":{"classes/UpdateTodosDto.html":{}}}],["query",{"_index":195,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["query.dto",{"_index":212,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"interfaces/ICommonOptions.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["query.dto.ts",{"_index":694,"title":{},"body":{"classes/PaginatedQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:18",{"_index":708,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["query.dto.ts:25",{"_index":707,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["query.dto.ts:32",{"_index":712,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["query.dto.ts:39",{"_index":715,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["query.dto.ts:50",{"_index":703,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["query.dto.ts:58",{"_index":705,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["query.dto.ts:74",{"_index":710,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["query.interface.ts",{"_index":636,"title":{},"body":{"interfaces/ICommonOptions.html":{},"coverage.html":{}}}],["query.ts",{"_index":1188,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["queryoptions",{"_index":280,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"interfaces/ICommonOptions.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["queryparams",{"_index":182,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["queryrunner",{"_index":303,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"miscellaneous/functions.html":{}}}],["queryrunner.manager.find(users",{"_index":881,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["queryrunner.query(`alter",{"_index":328,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["queryrunner.query(`create",{"_index":307,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{}}}],["queryrunner.query(`drop",{"_index":336,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{}}}],["questions",{"_index":1316,"title":{},"body":{"index.html":{}}}],["read",{"_index":782,"title":{},"body":{"modules/ResponseModule.html":{},"index.html":{}}}],["readonly",{"_index":63,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServicePublic.html":{}}}],["ready",{"_index":1274,"title":{},"body":{"index.html":{}}}],["real",{"_index":1331,"title":{},"body":{"index.html":{}}}],["references",{"_index":332,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["reflect",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":747,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["register",{"_index":1110,"title":{},"body":{"controllers/UsersControllerPublic.html":{}}}],["register(@body",{"_index":1120,"title":{},"body":{"controllers/UsersControllerPublic.html":{}}}],["register(createuserdto",{"_index":1111,"title":{},"body":{"controllers/UsersControllerPublic.html":{}}}],["relation",{"_index":884,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["relations",{"_index":95,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/TodosServicePublic.html":{}}}],["remove",{"_index":826,"title":{},"body":{"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{}}}],["remove(@param('id",{"_index":1107,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["remove(@user",{"_index":993,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["remove(id",{"_index":834,"title":{},"body":{"injectables/RolesService.html":{},"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{}}}],["remove(user",{"_index":937,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["removes",{"_index":855,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersServiceAdmin.html":{}}}],["rename",{"_index":343,"title":{},"body":{"classes/AdminsTableAlter1753018246777.html":{}}}],["repo",{"_index":275,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"interfaces/ICommonOptions.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["repository",{"_index":246,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"interfaces/ICommonOptions.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"index.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AdminGuard.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["request.headers?.authorization?.split",{"_index":80,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["request.query",{"_index":768,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["request?.['user",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request['user",{"_index":100,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["requestquery",{"_index":766,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["require('./todos",{"_index":877,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["require('./todos.json",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiring",{"_index":1298,"title":{},"body":{"index.html":{}}}],["reset",{"_index":124,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/PublicRouteModules.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1310,"title":{},"body":{"index.html":{}}}],["response",{"_index":68,"title":{},"body":{"guards/AdminGuard.html":{},"classes/ErrorService.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{}}}],["response.interceptor",{"_index":780,"title":{},"body":{"modules/ResponseModule.html":{}}}],["response.status(status).json",{"_index":630,"title":{},"body":{"classes/ErrorService.html":{}}}],["response.statuscode",{"_index":775,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["response/respose.module",{"_index":501,"title":{},"body":{"modules/CommonModules.html":{}}}],["responseinterceptor",{"_index":742,"title":{"classes/ResponseInterceptor.html":{}},"body":{"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"coverage.html":{}}}],["responsemessage",{"_index":207,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["responsemessage('admins",{"_index":223,"title":{},"body":{"controllers/AdminsController.html":{}}}],["responsemessage('detail",{"_index":372,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["responsemessage('logged",{"_index":401,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["responsemessage('login",{"_index":368,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["responsemessage('password",{"_index":363,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["responsemessage('todo",{"_index":963,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["responsemessage('todos",{"_index":980,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["responsemessage('update",{"_index":986,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["responsemessage(message",{"_index":1239,"title":{},"body":{"miscellaneous/functions.html":{}}}],["responsemodule",{"_index":496,"title":{"modules/ResponseModule.html":{}},"body":{"modules/CommonModules.html":{},"modules/ResponseModule.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":105,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["return",{"_index":73,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/DatabaseModule.html":{},"interfaces/IJwtPayload.html":{},"classes/PaginatedQueryDto.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/ErrorService.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":58,"title":{},"body":{"guards/AdminGuard.html":{},"entities/Admins.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"entities/Roles.html":{},"injectables/RolesService.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{}}}],["role.dto",{"_index":808,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{}}}],["role.dto.ts",{"_index":529,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:12",{"_index":535,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.id",{"_index":152,"title":{},"body":{"entities/Admins.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{}}}],["role_id",{"_index":57,"title":{},"body":{"guards/AdminGuard.html":{},"entities/Admins.html":{},"classes/AdminsTableAlter1753018246777.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{}}}],["roleanduserseedcontext",{"_index":904,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["roleid",{"_index":320,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{}}}],["roles",{"_index":149,"title":{"entities/Roles.html":{}},"body":{"entities/Admins.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/Init1752751622275.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServicePublic.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["roles\"(\"id",{"_index":333,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["roles.constant",{"_index":44,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"entities/Roles.html":{},"injectables/RolesService.html":{},"injectables/UsersServicePublic.html":{}}}],["roles.constant.ts",{"_index":1228,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles.service",{"_index":807,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["rolescontroller",{"_index":131,"title":{"controllers/RolesController.html":{}},"body":{"modules/AdminRouteModules.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":120,"title":{"modules/RolesModule.html":{}},"body":{"modules/AdminRouteModules.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":829,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":806,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["router.ts",{"_index":1203,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["router/router.module",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["routerexplorer",{"_index":684,"title":{},"body":{"classes/MyLogger.html":{}}}],["routermodule",{"_index":350,"title":{"modules/RouterModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RouterModule.html":{},"modules.html":{},"overview.html":{}}}],["routes",{"_index":1398,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["routes/admin.routes.module",{"_index":860,"title":{},"body":{"modules/RouterModule.html":{}}}],["routes/public.routes.module",{"_index":861,"title":{},"body":{"modules/RouterModule.html":{}}}],["routesresolver",{"_index":687,"title":{},"body":{"classes/MyLogger.html":{}}}],["run",{"_index":868,"title":{},"body":{"injectables/SeedTodoDatabase.html":{},"index.html":{}}}],["runs",{"_index":1280,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":756,"title":{},"body":{"classes/ResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":758,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["same",{"_index":898,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["scalable",{"_index":1250,"title":{},"body":{"index.html":{}}}],["search",{"_index":695,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["searchfield",{"_index":696,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["searchparams",{"_index":926,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["secret",{"_index":88,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["see",{"_index":975,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["seed",{"_index":871,"title":{},"body":{"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{}}}],["seed.command",{"_index":487,"title":{},"body":{"modules/CliModule.html":{}}}],["seed.command.ts",{"_index":867,"title":{},"body":{"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"coverage.html":{}}}],["seed.command.ts:19",{"_index":873,"title":{},"body":{"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{}}}],["seed.command.ts:8",{"_index":887,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["seed.command.ts:9",{"_index":869,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["seedadmin",{"_index":888,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["seedadmin(queryrunner",{"_index":908,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"miscellaneous/functions.html":{}}}],["seeder",{"_index":874,"title":{},"body":{"injectables/SeedTodoDatabase.html":{},"miscellaneous/functions.html":{}}}],["seedtododatabase",{"_index":481,"title":{"injectables/SeedTodoDatabase.html":{}},"body":{"modules/CliModule.html":{},"injectables/SeedTodoDatabase.html":{},"coverage.html":{},"overview.html":{}}}],["seedtodoscontext",{"_index":879,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["seeduserroles",{"_index":889,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeduserroles(queryrunner",{"_index":905,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"miscellaneous/functions.html":{}}}],["seedusers",{"_index":890,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["seedusers(queryrunner",{"_index":907,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"miscellaneous/functions.html":{}}}],["seedusersdatabase",{"_index":482,"title":{"injectables/SeedUsersDatabase.html":{}},"body":{"modules/CliModule.html":{},"injectables/SeedUsersDatabase.html":{},"coverage.html":{},"overview.html":{}}}],["select",{"_index":94,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServiceAdmin.html":{}}}],["serial",{"_index":309,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{}}}],["server",{"_index":1251,"title":{},"body":{"index.html":{}}}],["services/admin.admin",{"_index":202,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{}}}],["services/admin.auth.service",{"_index":378,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"modules/AuthModule.html":{}}}],["services/admin.todos.service",{"_index":950,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"modules/TodosModule.html":{}}}],["services/admin.users.service",{"_index":1098,"title":{},"body":{"controllers/UsersControllerAdmin.html":{},"modules/UsersModule.html":{}}}],["services/public.auth.service",{"_index":408,"title":{},"body":{"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{}}}],["services/public.todos.service",{"_index":1010,"title":{},"body":{"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{}}}],["services/public.users.service",{"_index":1117,"title":{},"body":{"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{}}}],["setup",{"_index":1257,"title":{},"body":{"index.html":{}}}],["showpagination",{"_index":208,"title":{},"body":{"controllers/AdminsController.html":{},"classes/ResponseInterceptor.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["showpagination(showpagination",{"_index":1240,"title":{},"body":{"miscellaneous/functions.html":{}}}],["side",{"_index":1252,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1300,"title":{},"body":{"index.html":{}}}],["skippagination",{"_index":647,"title":{},"body":{"interfaces/IPaginationMetadata.html":{},"classes/PaginatedQueryDto.html":{},"classes/ResponseInterceptor.html":{}}}],["sortfield",{"_index":697,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["sortorder",{"_index":698,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AdminRouteModules.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"modules/PublicRouteModules.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/RouterModule.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{},"index.html":{}}}],["source.ts",{"_index":1195,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":960,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["sponsors",{"_index":1351,"title":{},"body":{"index.html":{}}}],["src/.../cli.ts",{"_index":1230,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../common",{"_index":1232,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../controller",{"_index":1226,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../data",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1231,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../put",{"_index":1233,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../request.decorator.ts",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../response.decorator.ts",{"_index":1234,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../seed",{"_index":1235,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger",{"_index":1236,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.ts",{"_index":1237,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":1227,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["src/cli.ts",{"_index":1168,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/commands/cli.module.ts",{"_index":483,"title":{},"body":{"modules/CliModule.html":{}}}],["src/commands/seed",{"_index":1171,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/commands/todo",{"_index":866,"title":{},"body":{"injectables/SeedTodoDatabase.html":{},"coverage.html":{}}}],["src/commands/todos",{"_index":1176,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/commands/user",{"_index":886,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"coverage.html":{}}}],["src/common",{"_index":157,"title":{},"body":{"entities/Admins.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"modules/CommonModules.html":{},"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"modules/ErrorFilterModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IPaginationMetadata.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"classes/ResponseInterceptor.html":{},"modules/ResponseModule.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerPublic.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/constants/controller",{"_index":1189,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/constants/user",{"_index":43,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"entities/Roles.html":{},"injectables/RolesService.html":{},"injectables/UsersServicePublic.html":{},"miscellaneous/enumerations.html":{}}}],["src/data",{"_index":1194,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1196,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/1752751622275",{"_index":651,"title":{},"body":{"classes/Init1752751622275.html":{},"coverage.html":{}}}],["src/migrations/1753017922617",{"_index":293,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"coverage.html":{}}}],["src/migrations/1753018246777",{"_index":338,"title":{},"body":{"classes/AdminsTableAlter1753018246777.html":{},"coverage.html":{}}}],["src/modules/admins/admins.module",{"_index":134,"title":{},"body":{"modules/AdminRouteModules.html":{}}}],["src/modules/admins/admins.module.ts",{"_index":237,"title":{},"body":{"modules/AdminsModule.html":{}}}],["src/modules/admins/controller/admin.admin",{"_index":135,"title":{},"body":{"modules/AdminRouteModules.html":{},"controllers/AdminsController.html":{},"coverage.html":{}}}],["src/modules/admins/dto/create",{"_index":508,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["src/modules/admins/dto/update",{"_index":379,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"coverage.html":{}}}],["src/modules/admins/entities/admin.entity",{"_index":47,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AuthControllerAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/UsersServicePublic.html":{}}}],["src/modules/admins/entities/admin.entity.ts",{"_index":147,"title":{},"body":{"entities/Admins.html":{},"coverage.html":{}}}],["src/modules/admins/entities/admin.entity.ts:9",{"_index":155,"title":{},"body":{"entities/Admins.html":{}}}],["src/modules/admins/services/admin.admin",{"_index":242,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"coverage.html":{}}}],["src/modules/auth/auth.module",{"_index":137,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/PublicRouteModules.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":417,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/controllers/admin.auth.controller",{"_index":138,"title":{},"body":{"modules/AdminRouteModules.html":{}}}],["src/modules/auth/controllers/admin.auth.controller.ts",{"_index":357,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"coverage.html":{}}}],["src/modules/auth/controllers/admin.auth.controller.ts:19",{"_index":370,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["src/modules/auth/controllers/admin.auth.controller.ts:26",{"_index":374,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["src/modules/auth/controllers/admin.auth.controller.ts:33",{"_index":365,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["src/modules/auth/controllers/public.auth.controller",{"_index":736,"title":{},"body":{"modules/PublicRouteModules.html":{}}}],["src/modules/auth/controllers/public.auth.controller.ts",{"_index":394,"title":{},"body":{"controllers/AuthControllerPublic.html":{},"coverage.html":{}}}],["src/modules/auth/controllers/public.auth.controller.ts:20",{"_index":399,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["src/modules/auth/controllers/public.auth.controller.ts:27",{"_index":404,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["src/modules/auth/controllers/public.auth.controller.ts:33",{"_index":398,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["src/modules/auth/decorator/put",{"_index":205,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerPublic.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/dto/auth.dto.ts",{"_index":1158,"title":{},"body":{"classes/authDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/auth.dto.ts:11",{"_index":1160,"title":{},"body":{"classes/authDto.html":{}}}],["src/modules/auth/dto/auth.dto.ts:16",{"_index":1162,"title":{},"body":{"classes/authDto.html":{}}}],["src/modules/auth/entities/auth.entity.ts",{"_index":356,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/modules/auth/guards/put",{"_index":6,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"coverage.html":{}}}],["src/modules/auth/services/admin.auth.service.ts",{"_index":423,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"coverage.html":{}}}],["src/modules/auth/services/admin.auth.service.ts:14",{"_index":426,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["src/modules/auth/services/admin.auth.service.ts:20",{"_index":431,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["src/modules/auth/services/admin.auth.service.ts:60",{"_index":430,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["src/modules/auth/services/admin.auth.service.ts:64",{"_index":428,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["src/modules/auth/services/public.auth.service.ts",{"_index":463,"title":{},"body":{"injectables/AuthServicePublic.html":{},"coverage.html":{}}}],["src/modules/auth/services/public.auth.service.ts:14",{"_index":464,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["src/modules/auth/services/public.auth.service.ts:20",{"_index":468,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["src/modules/auth/services/public.auth.service.ts:60",{"_index":467,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["src/modules/auth/services/public.auth.service.ts:64",{"_index":465,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["src/modules/roles/controllers/admin.roles.controller",{"_index":139,"title":{},"body":{"modules/AdminRouteModules.html":{}}}],["src/modules/roles/controllers/admin.roles.controller.ts",{"_index":794,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/modules/roles/controllers/admin.roles.controller.ts:29",{"_index":797,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/modules/roles/controllers/admin.roles.controller.ts:36",{"_index":799,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/modules/roles/controllers/admin.roles.controller.ts:42",{"_index":801,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/modules/roles/controllers/admin.roles.controller.ts:48",{"_index":805,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/modules/roles/dto/create",{"_index":528,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/modules/roles/dto/update",{"_index":1057,"title":{},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/modules/roles/entities/role.entity",{"_index":160,"title":{},"body":{"entities/Admins.html":{},"injectables/AdminsServiceAdmin.html":{},"entities/Users.html":{},"injectables/UsersServicePublic.html":{}}}],["src/modules/roles/entities/role.entity.ts",{"_index":789,"title":{},"body":{"entities/Roles.html":{},"coverage.html":{}}}],["src/modules/roles/entities/role.entity.ts:11",{"_index":791,"title":{},"body":{"entities/Roles.html":{}}}],["src/modules/roles/roles.module",{"_index":140,"title":{},"body":{"modules/AdminRouteModules.html":{}}}],["src/modules/roles/roles.module.ts",{"_index":821,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/modules/roles/roles.service.ts",{"_index":824,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/modules/roles/roles.service.ts:12",{"_index":828,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/modules/roles/roles.service.ts:18",{"_index":830,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/modules/roles/roles.service.ts:38",{"_index":833,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/modules/roles/roles.service.ts:50",{"_index":831,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/modules/roles/roles.service.ts:58",{"_index":836,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/modules/roles/roles.service.ts:76",{"_index":835,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/modules/todos/controllers/admin.todos.controller",{"_index":141,"title":{},"body":{"modules/AdminRouteModules.html":{}}}],["src/modules/todos/controllers/admin.todos.controller.ts",{"_index":919,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"coverage.html":{}}}],["src/modules/todos/controllers/admin.todos.controller.ts:38",{"_index":924,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["src/modules/todos/controllers/admin.todos.controller.ts:47",{"_index":930,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["src/modules/todos/controllers/admin.todos.controller.ts:61",{"_index":935,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["src/modules/todos/controllers/admin.todos.controller.ts:69",{"_index":945,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["src/modules/todos/controllers/admin.todos.controller.ts:82",{"_index":940,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["src/modules/todos/controllers/public.todos.controller",{"_index":737,"title":{},"body":{"modules/PublicRouteModules.html":{}}}],["src/modules/todos/controllers/public.todos.controller.ts",{"_index":995,"title":{},"body":{"controllers/TodosControllerPublic.html":{},"coverage.html":{}}}],["src/modules/todos/controllers/public.todos.controller.ts:34",{"_index":997,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["src/modules/todos/controllers/public.todos.controller.ts:42",{"_index":1000,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["src/modules/todos/controllers/public.todos.controller.ts:56",{"_index":1003,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["src/modules/todos/controllers/public.todos.controller.ts:64",{"_index":1008,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["src/modules/todos/controllers/public.todos.controller.ts:77",{"_index":1006,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["src/modules/todos/dto/create",{"_index":549,"title":{},"body":{"classes/CreateTodosDto.html":{},"coverage.html":{}}}],["src/modules/todos/dto/update",{"_index":1060,"title":{},"body":{"classes/UpdateTodosDto.html":{},"coverage.html":{}}}],["src/modules/todos/entities/todos.entity",{"_index":875,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["src/modules/todos/entities/todos.entity.ts",{"_index":912,"title":{},"body":{"entities/Todos.html":{},"coverage.html":{}}}],["src/modules/todos/entities/todos.entity.ts:11",{"_index":914,"title":{},"body":{"entities/Todos.html":{}}}],["src/modules/todos/entities/todos.entity.ts:14",{"_index":916,"title":{},"body":{"entities/Todos.html":{}}}],["src/modules/todos/entities/todos.entity.ts:18",{"_index":918,"title":{},"body":{"entities/Todos.html":{}}}],["src/modules/todos/entities/todos.entity.ts:8",{"_index":917,"title":{},"body":{"entities/Todos.html":{}}}],["src/modules/todos/services/admin.todos.service.ts",{"_index":1021,"title":{},"body":{"injectables/TodosServiceAdmin.html":{},"coverage.html":{}}}],["src/modules/todos/services/admin.todos.service.ts:12",{"_index":1023,"title":{},"body":{"injectables/TodosServiceAdmin.html":{}}}],["src/modules/todos/services/admin.todos.service.ts:18",{"_index":1025,"title":{},"body":{"injectables/TodosServiceAdmin.html":{}}}],["src/modules/todos/services/admin.todos.service.ts:22",{"_index":1027,"title":{},"body":{"injectables/TodosServiceAdmin.html":{}}}],["src/modules/todos/services/admin.todos.service.ts:54",{"_index":1028,"title":{},"body":{"injectables/TodosServiceAdmin.html":{}}}],["src/modules/todos/services/admin.todos.service.ts:64",{"_index":1030,"title":{},"body":{"injectables/TodosServiceAdmin.html":{}}}],["src/modules/todos/services/admin.todos.service.ts:68",{"_index":1029,"title":{},"body":{"injectables/TodosServiceAdmin.html":{}}}],["src/modules/todos/services/public.todos.service.ts",{"_index":1034,"title":{},"body":{"injectables/TodosServicePublic.html":{},"coverage.html":{}}}],["src/modules/todos/services/public.todos.service.ts:111",{"_index":1040,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["src/modules/todos/services/public.todos.service.ts:12",{"_index":1035,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["src/modules/todos/services/public.todos.service.ts:18",{"_index":1036,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["src/modules/todos/services/public.todos.service.ts:31",{"_index":1039,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["src/modules/todos/services/public.todos.service.ts:60",{"_index":1037,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["src/modules/todos/services/public.todos.service.ts:80",{"_index":1041,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["src/modules/todos/todos.module",{"_index":142,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/PublicRouteModules.html":{}}}],["src/modules/todos/todos.module.ts",{"_index":1018,"title":{},"body":{"modules/TodosModule.html":{}}}],["src/modules/users/controllers/admin.users.controller",{"_index":143,"title":{},"body":{"modules/AdminRouteModules.html":{}}}],["src/modules/users/controllers/admin.users.controller.ts",{"_index":1088,"title":{},"body":{"controllers/UsersControllerAdmin.html":{},"coverage.html":{}}}],["src/modules/users/controllers/admin.users.controller.ts:22",{"_index":1091,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["src/modules/users/controllers/admin.users.controller.ts:27",{"_index":1092,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["src/modules/users/controllers/admin.users.controller.ts:32",{"_index":1093,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["src/modules/users/controllers/admin.users.controller.ts:37",{"_index":1096,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["src/modules/users/controllers/admin.users.controller.ts:43",{"_index":1095,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["src/modules/users/controllers/public.users.controller",{"_index":738,"title":{},"body":{"modules/PublicRouteModules.html":{}}}],["src/modules/users/controllers/public.users.controller.ts",{"_index":1109,"title":{},"body":{"controllers/UsersControllerPublic.html":{},"coverage.html":{}}}],["src/modules/users/controllers/public.users.controller.ts:17",{"_index":1113,"title":{},"body":{"controllers/UsersControllerPublic.html":{}}}],["src/modules/users/controllers/public.users.controller.ts:23",{"_index":1115,"title":{},"body":{"controllers/UsersControllerPublic.html":{}}}],["src/modules/users/dto/create",{"_index":564,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/update",{"_index":409,"title":{},"body":{"controllers/AuthControllerPublic.html":{},"injectables/AuthServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity",{"_index":49,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/SeedTodoDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":1072,"title":{},"body":{"entities/Users.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:9",{"_index":1073,"title":{},"body":{"entities/Users.html":{}}}],["src/modules/users/services/admin.users.service.ts",{"_index":1127,"title":{},"body":{"injectables/UsersServiceAdmin.html":{},"coverage.html":{}}}],["src/modules/users/services/admin.users.service.ts:15",{"_index":1131,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["src/modules/users/services/admin.users.service.ts:34",{"_index":1132,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["src/modules/users/services/admin.users.service.ts:49",{"_index":1133,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["src/modules/users/services/admin.users.service.ts:67",{"_index":1135,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["src/modules/users/services/admin.users.service.ts:71",{"_index":1134,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["src/modules/users/services/admin.users.service.ts:9",{"_index":1129,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["src/modules/users/services/public.users.service.ts",{"_index":1144,"title":{},"body":{"injectables/UsersServicePublic.html":{},"coverage.html":{}}}],["src/modules/users/services/public.users.service.ts:16",{"_index":1146,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["src/modules/users/services/public.users.service.ts:23",{"_index":1147,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["src/modules/users/services/public.users.service.ts:49",{"_index":1150,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["src/modules/users/services/public.users.service.ts:81",{"_index":1149,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["src/modules/users/users.module",{"_index":144,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/PublicRouteModules.html":{}}}],["src/modules/users/users.module.ts",{"_index":1125,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/router/router.module.ts",{"_index":859,"title":{},"body":{"modules/RouterModule.html":{}}}],["src/router/routes/admin.routes.module.ts",{"_index":126,"title":{},"body":{"modules/AdminRouteModules.html":{}}}],["src/router/routes/public.routes.module.ts",{"_index":733,"title":{},"body":{"modules/PublicRouteModules.html":{}}}],["src/swagger",{"_index":1201,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/swagger.ts",{"_index":1205,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":1261,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1264,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1266,"title":{},"body":{"index.html":{}}}],["started",{"_index":1244,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1255,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1167,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":617,"title":{},"body":{"classes/ErrorService.html":{},"classes/ResponseInterceptor.html":{},"injectables/UsersServiceAdmin.html":{}}}],["stay",{"_index":1337,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1277,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1296,"title":{},"body":{"index.html":{}}}],["string",{"_index":56,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"guards/PublicUserGuard.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{},"classes/authDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string'})@isoptional()@isstring",{"_index":706,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":711,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["success",{"_index":224,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"classes/ErrorService.html":{},"classes/ResponseInterceptor.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{}}}],["success')@delete(':id')@putadmin",{"_index":939,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["success')@delete(':id')@putpublicuser",{"_index":1005,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["success')@get(':id')@putpublicuser",{"_index":1002,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["success')@get(':todosid')@putadmin",{"_index":934,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["success')@patch(':id')@putadmin",{"_index":944,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["success')@patch(':id')@putpublicuser",{"_index":1007,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["success')@post('login",{"_index":369,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["success')@putadmin()@get('me",{"_index":373,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["success')@putpublicuser()@get('me",{"_index":403,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["success')@showpagination()@get",{"_index":180,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/TodosControllerPublic.html":{}}}],["success')@showpagination()@putadmin",{"_index":929,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["such",{"_index":894,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["summary",{"_index":962,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["super.debug(message",{"_index":692,"title":{},"body":{"classes/MyLogger.html":{}}}],["super.error(message",{"_index":690,"title":{},"body":{"classes/MyLogger.html":{}}}],["super.log(message",{"_index":689,"title":{},"body":{"classes/MyLogger.html":{}}}],["super.verbose(message",{"_index":693,"title":{},"body":{"classes/MyLogger.html":{}}}],["super.warn(message",{"_index":691,"title":{},"body":{"classes/MyLogger.html":{}}}],["support",{"_index":1317,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1366,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":761,"title":{},"body":{"classes/ResponseInterceptor.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"classes/UpdateTodosDto.html":{}}}],["swaggerinit",{"_index":1204,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["swaggerinit(app",{"_index":1242,"title":{},"body":{"miscellaneous/functions.html":{}}}],["synchronize",{"_index":594,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":639,"title":{},"body":{"interfaces/ICommonOptions.html":{}}}],["table",{"_index":308,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{},"coverage.html":{}}}],["table.ts",{"_index":294,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"coverage.html":{}}}],["table.ts:11",{"_index":304,"title":{},"body":{"classes/AdminsTable1753017922617.html":{}}}],["table.ts:4",{"_index":301,"title":{},"body":{"classes/AdminsTable1753017922617.html":{}}}],["table.ts:6",{"_index":306,"title":{},"body":{"classes/AdminsTable1753017922617.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1278,"title":{},"body":{"index.html":{}}}],["target",{"_index":506,"title":{},"body":{"modules/CommonModules.html":{}}}],["test",{"_index":1269,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1272,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1271,"title":{},"body":{"index.html":{}}}],["test@123",{"_index":516,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/authDto.html":{}}}],["test@123'})@isnotempty()@isstring",{"_index":1161,"title":{},"body":{"classes/authDto.html":{}}}],["test@gmail.com",{"_index":1163,"title":{},"body":{"classes/authDto.html":{}}}],["test@gmail.com'})@isnotempty()@isemail()@isstring",{"_index":1159,"title":{},"body":{"classes/authDto.html":{}}}],["testfn",{"_index":1180,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tests",{"_index":1267,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1350,"title":{},"body":{"index.html":{}}}],["this._datasource",{"_index":892,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["this._datasource.createqueryrunner",{"_index":880,"title":{},"body":{"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{}}}],["this._datasource.manager.create(admins",{"_index":460,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["this._datasource.manager.create(users",{"_index":474,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["this._datasource.manager.findone(admins",{"_index":102,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AuthServiceAdmin.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/UsersServicePublic.html":{}}}],["this._datasource.manager.findone(roles",{"_index":287,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["this._datasource.manager.findone(users",{"_index":91,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["this._datasource.manager.update(admins",{"_index":462,"title":{},"body":{"injectables/AuthServiceAdmin.html":{}}}],["this._datasource.manager.update(users",{"_index":475,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["this._jwtservice.verify(token",{"_index":87,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["this._loggerservice",{"_index":906,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["this._loggerservice.error",{"_index":909,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["this._loggerservice.error(exceptionresponse",{"_index":628,"title":{},"body":{"classes/ErrorService.html":{}}}],["this._loggerservice.log('starting",{"_index":885,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["this._reflector.get",{"_index":771,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["this._reflector.get('message",{"_index":769,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["this.adminsrepository",{"_index":276,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["this.adminsrepository.create(prepareddata",{"_index":272,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["this.adminsrepository.create(updateadmindto",{"_index":282,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["this.adminsrepository.findone",{"_index":266,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["this.adminsrepository.save(admin",{"_index":273,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["this.adminsrepository.update(admin.id",{"_index":283,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["this.adminsservice.create(createadmindto",{"_index":222,"title":{},"body":{"controllers/AdminsController.html":{}}}],["this.adminsservice.findallpaginated(queryparams",{"_index":227,"title":{},"body":{"controllers/AdminsController.html":{}}}],["this.adminsservice.findone(+id",{"_index":230,"title":{},"body":{"controllers/AdminsController.html":{}}}],["this.adminsservice.update",{"_index":233,"title":{},"body":{"controllers/AdminsController.html":{}}}],["this.authservice.changepassword",{"_index":392,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["this.authservice.findme(admin",{"_index":389,"title":{},"body":{"controllers/AuthControllerAdmin.html":{}}}],["this.authservice.findme(user",{"_index":412,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["this.authservice.login(authdto",{"_index":386,"title":{},"body":{"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{}}}],["this.jwtservice.sign",{"_index":445,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["this.page",{"_index":777,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["this.password",{"_index":1085,"title":{},"body":{"classes/UsersBaseEntity.html":{}}}],["this.preparedatatocreateadmin(createadmindto",{"_index":271,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["this.prepareusercreatedata(createuserdto",{"_index":1154,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["this.rolesrepository",{"_index":847,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.create",{"_index":844,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":839,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.save(preparedrolesdata",{"_index":846,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.update",{"_index":851,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.create(createroledto",{"_index":812,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":814,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findpaginated(queryparams",{"_index":813,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.update(+id",{"_index":817,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.todosrepository",{"_index":1032,"title":{},"body":{"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["this.todosrepository.create",{"_index":1044,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["this.todosrepository.delete",{"_index":1048,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["this.todosrepository.findone",{"_index":1033,"title":{},"body":{"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["this.todosrepository.save(newtodo",{"_index":1045,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["this.todosrepository.update",{"_index":1047,"title":{},"body":{"injectables/TodosServicePublic.html":{}}}],["this.todosservice.create(user",{"_index":978,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["this.todosservice.findallpaginated",{"_index":982,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["this.todosservice.findone(+todosid",{"_index":985,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["this.todosservice.findone(user",{"_index":1014,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["this.todosservice.findpaginated",{"_index":1012,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["this.todosservice.remove(user",{"_index":994,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["this.todosservice.update(user",{"_index":989,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["this.totalpage",{"_index":776,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["this.usersrepository.create(prepareddata",{"_index":1155,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["this.usersrepository.find",{"_index":1141,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["this.usersrepository.findone",{"_index":1142,"title":{},"body":{"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["this.usersrepository.insert(createuserdto",{"_index":1137,"title":{},"body":{"injectables/UsersServiceAdmin.html":{}}}],["this.usersrepository.save(user",{"_index":1156,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["this.usersrepository.update",{"_index":1157,"title":{},"body":{"injectables/UsersServicePublic.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1103,"title":{},"body":{"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["this.usersservice.findall",{"_index":1104,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["this.usersservice.findone(+id",{"_index":1105,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["this.usersservice.remove(+id",{"_index":1108,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["this.usersservice.update",{"_index":1121,"title":{},"body":{"controllers/UsersControllerPublic.html":{}}}],["this.usersservice.update(+id",{"_index":1106,"title":{},"body":{"controllers/UsersControllerAdmin.html":{}}}],["this.verifytokenavailabilityandadduser(request",{"_index":72,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["throw",{"_index":77,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServicePublic.html":{}}}],["time",{"_index":313,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{},"index.html":{}}}],["timestamp",{"_index":312,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{}}}],["timestamptz",{"_index":538,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"classes/UsersBaseEntity.html":{}}}],["title",{"_index":553,"title":{},"body":{"classes/CreateTodosDto.html":{},"classes/Init1752751622275.html":{},"injectables/SeedTodoDatabase.html":{},"entities/Todos.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"miscellaneous/variables.html":{}}}],["title'})@isstring()@isnotempty",{"_index":560,"title":{},"body":{"classes/CreateTodosDto.html":{}}}],["todo",{"_index":488,"title":{},"body":{"modules/CliModule.html":{},"classes/CreateTodosDto.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["todo'})@apiexcludeendpoint()@responsemessage('todo",{"_index":938,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["todo'})@isstring",{"_index":555,"title":{},"body":{"classes/CreateTodosDto.html":{}}}],["todo'})@post('create')@putadmin()@responsemessage('todo",{"_index":923,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["todo'})@post('create')@putpublicuser()@responsemessage('todo",{"_index":996,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["todo'})@responsemessage('todo",{"_index":1004,"title":{},"body":{"controllers/TodosControllerPublic.html":{}}}],["todo'})@responsemessage('update",{"_index":943,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["todos",{"_index":659,"title":{"entities/Todos.html":{}},"body":{"classes/Init1752751622275.html":{},"injectables/SeedTodoDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"coverage.html":{}}}],["todos'})@get('user/:userid')@responsemessage('todos",{"_index":928,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["todos.dto",{"_index":948,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateTodosDto.html":{}}}],["todos.dto.ts",{"_index":550,"title":{},"body":{"classes/CreateTodosDto.html":{},"classes/UpdateTodosDto.html":{},"coverage.html":{}}}],["todos.dto.ts:12",{"_index":556,"title":{},"body":{"classes/CreateTodosDto.html":{}}}],["todos.dto.ts:16",{"_index":559,"title":{},"body":{"classes/CreateTodosDto.html":{}}}],["todos.dto.ts:8",{"_index":561,"title":{},"body":{"classes/CreateTodosDto.html":{}}}],["todoscontrolleradmin",{"_index":130,"title":{"controllers/TodosControllerAdmin.html":{}},"body":{"modules/AdminRouteModules.html":{},"controllers/TodosControllerAdmin.html":{},"coverage.html":{}}}],["todoscontrollerpublic",{"_index":734,"title":{"controllers/TodosControllerPublic.html":{}},"body":{"modules/PublicRouteModules.html":{},"controllers/TodosControllerPublic.html":{},"coverage.html":{}}}],["todosid",{"_index":936,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"injectables/TodosServiceAdmin.html":{}}}],["todosjson",{"_index":876,"title":{},"body":{"injectables/SeedTodoDatabase.html":{}}}],["todosmodule",{"_index":121,"title":{"modules/TodosModule.html":{}},"body":{"modules/AdminRouteModules.html":{},"modules/PublicRouteModules.html":{},"modules/TodosModule.html":{},"modules.html":{},"overview.html":{}}}],["todosrepository",{"_index":1024,"title":{},"body":{"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["todosservice",{"_index":954,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{}}}],["todosserviceadmin",{"_index":949,"title":{"injectables/TodosServiceAdmin.html":{}},"body":{"controllers/TodosControllerAdmin.html":{},"modules/TodosModule.html":{},"injectables/TodosServiceAdmin.html":{},"coverage.html":{},"overview.html":{}}}],["todosservicepublic",{"_index":1009,"title":{"injectables/TodosServicePublic.html":{}},"body":{"controllers/TodosControllerPublic.html":{},"modules/TodosModule.html":{},"injectables/TodosServicePublic.html":{},"coverage.html":{},"overview.html":{}}}],["token",{"_index":79,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["tokentype",{"_index":78,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["total",{"_index":648,"title":{},"body":{"interfaces/IPaginationMetadata.html":{}}}],["totalpage",{"_index":649,"title":{},"body":{"interfaces/IPaginationMetadata.html":{}}}],["touch",{"_index":1356,"title":{},"body":{"index.html":{}}}],["trace",{"_index":676,"title":{},"body":{"classes/MyLogger.html":{}}}],["transform",{"_index":721,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["transformer",{"_index":722,"title":{},"body":{"classes/PaginatedQueryDto.html":{},"classes/ResponseInterceptor.html":{},"classes/UsersBaseEntity.html":{}}}],["transport",{"_index":505,"title":{},"body":{"modules/CommonModules.html":{}}}],["true",{"_index":74,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"modules/AuthModule.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"classes/PaginatedQueryDto.html":{},"guards/PublicUserGuard.html":{},"controllers/TodosControllerAdmin.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":70,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"injectables/UsersServiceAdmin.html":{}}}],["twitter",{"_index":1362,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"guards/AdminGuard.html":{},"entities/Admins.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"classes/ErrorService.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IPaginationMetadata.html":{},"classes/Init1752751622275.html":{},"classes/MyLogger.html":{},"classes/PaginatedQueryDto.html":{},"guards/PublicUserGuard.html":{},"classes/ResponseInterceptor.html":{},"entities/Roles.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateTodosDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"classes/authDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":45,"title":{},"body":{"guards/AdminGuard.html":{},"entities/Admins.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/DBBaseEntity.html":{},"modules/DatabaseModule.html":{},"interfaces/ICommonOptions.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"entities/Roles.html":{},"injectables/RolesService.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["typeormmodule",{"_index":238,"title":{},"body":{"modules/AdminsModule.html":{},"modules/DatabaseModule.html":{},"modules/RolesModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([admins",{"_index":240,"title":{},"body":{"modules/AdminsModule.html":{}}}],["typeormmodule.forfeature([roles",{"_index":823,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([todos",{"_index":1020,"title":{},"body":{"modules/TodosModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":1126,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":578,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1066,"title":{},"body":{"classes/UpdateTodosDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1254,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":38,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["unauthorizedexception(\"email",{"_index":437,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["unauthorizedexception(\"passwords",{"_index":457,"title":{},"body":{"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{}}}],["unauthorizedexception('token",{"_index":84,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["unauthorizedexception('unauthorized",{"_index":96,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["unavailable",{"_index":85,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["undefined",{"_index":729,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["undefined})@isoptional()@isstring",{"_index":714,"title":{},"body":{"classes/PaginatedQueryDto.html":{}}}],["unique",{"_index":324,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{},"classes/UsersBaseEntity.html":{}}}],["unit",{"_index":1268,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":250,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["unlicensed",{"_index":1378,"title":{},"body":{"properties.html":{}}}],["up",{"_index":298,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["up(queryrunner",{"_index":305,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{}}}],["update",{"_index":171,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["update(@param('id",{"_index":816,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersControllerAdmin.html":{}}}],["update(@user",{"_index":232,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/UsersControllerPublic.html":{}}}],["update(admin",{"_index":186,"title":{},"body":{"controllers/AdminsController.html":{}}}],["update(id",{"_index":802,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersControllerAdmin.html":{},"injectables/UsersServiceAdmin.html":{}}}],["update(undefined",{"_index":255,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["update(user",{"_index":941,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerPublic.html":{}}}],["updateadmindto",{"_index":187,"title":{"classes/UpdateAdminDto.html":{}},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"coverage.html":{}}}],["updateadminpassworddto",{"_index":362,"title":{"classes/UpdateAdminPasswordDto.html":{}},"body":{"controllers/AuthControllerAdmin.html":{},"injectables/AuthServiceAdmin.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"coverage.html":{}}}],["updated_at",{"_index":316,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"classes/Init1752751622275.html":{},"classes/UsersBaseEntity.html":{}}}],["updatedat",{"_index":532,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UsersBaseEntity.html":{},"injectables/UsersServiceAdmin.html":{}}}],["updatedatecolumn",{"_index":574,"title":{},"body":{"classes/DBBaseEntity.html":{}}}],["updatedatecolumn({type",{"_index":545,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/DBBaseEntity.html":{},"classes/UsersBaseEntity.html":{}}}],["updateddata",{"_index":284,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["updateroledto",{"_index":803,"title":{"classes/UpdateRoleDto.html":{}},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updateroledto.name",{"_index":849,"title":{},"body":{"injectables/RolesService.html":{}}}],["updates",{"_index":1143,"title":{},"body":{"injectables/UsersServiceAdmin.html":{},"index.html":{}}}],["updatetodosdto",{"_index":942,"title":{"classes/UpdateTodosDto.html":{}},"body":{"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"classes/UpdateTodosDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1049,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"coverage.html":{}}}],["updateuserdto:12",{"_index":1051,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["updateuserpassworddto",{"_index":396,"title":{"classes/UpdateUserPasswordDto.html":{}},"body":{"controllers/AuthControllerPublic.html":{},"injectables/AuthServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["updateuserpassworddto:22",{"_index":1056,"title":{},"body":{"classes/UpdateAdminPasswordDto.html":{}}}],["updateuserpassworddto:31",{"_index":1055,"title":{},"body":{"classes/UpdateAdminPasswordDto.html":{}}}],["uq_051db7d37d478a69a7432df1479",{"_index":323,"title":{},"body":{"classes/AdminsTable1753017922617.html":{}}}],["uq_97672ac88f789774dd47f7c8be3",{"_index":657,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["useclass",{"_index":605,"title":{},"body":{"modules/ErrorFilterModule.html":{},"modules/ResponseModule.html":{}}}],["used",{"_index":897,"title":{},"body":{"injectables/SeedUsersDatabase.html":{},"controllers/TodosControllerAdmin.html":{}}}],["usefactory",{"_index":579,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":411,"title":{},"body":{"controllers/AuthControllerPublic.html":{}}}],["usepipes(new",{"_index":972,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["user",{"_index":90,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"modules/CliModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"modules/RouterModule.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":206,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"controllers/RolesController.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"controllers/UsersControllerPublic.html":{}}}],["user.decorator.ts",{"_index":1200,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.dto",{"_index":197,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/AuthControllerAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServiceAdmin.html":{},"injectables/AuthServicePublic.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["user.dto.ts",{"_index":509,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAdminPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":514,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:12",{"_index":1069,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:18",{"_index":512,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":1071,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{}}}],["user.dto.ts:26",{"_index":517,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":1070,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{}}}],["user.email",{"_index":470,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["user.guard.ts",{"_index":7,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"coverage.html":{}}}],["user.guard.ts:102",{"_index":35,"title":{},"body":{"guards/AdminGuard.html":{}}}],["user.guard.ts:22",{"_index":739,"title":{},"body":{"guards/PublicUserGuard.html":{}}}],["user.guard.ts:28",{"_index":740,"title":{},"body":{"guards/PublicUserGuard.html":{}}}],["user.guard.ts:42",{"_index":741,"title":{},"body":{"guards/PublicUserGuard.html":{}}}],["user.guard.ts:82",{"_index":20,"title":{},"body":{"guards/AdminGuard.html":{}}}],["user.guard.ts:88",{"_index":29,"title":{},"body":{"guards/AdminGuard.html":{}}}],["user.id",{"_index":469,"title":{},"body":{"injectables/AuthServicePublic.html":{},"entities/Todos.html":{},"injectables/TodosServicePublic.html":{},"injectables/UsersServicePublic.html":{}}}],["user.role.role",{"_index":98,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["user@email.com",{"_index":565,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user_id",{"_index":661,"title":{},"body":{"classes/Init1752751622275.html":{},"entities/Todos.html":{}}}],["userdto",{"_index":473,"title":{},"body":{"injectables/AuthServicePublic.html":{}}}],["userid",{"_index":931,"title":{},"body":{"controllers/TodosControllerAdmin.html":{},"injectables/TodosServiceAdmin.html":{}}}],["username",{"_index":581,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["userrole",{"_index":42,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{},"entities/Roles.html":{},"injectables/RolesService.html":{},"injectables/UsersServicePublic.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":104,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AdminsServiceAdmin.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["userrole.user",{"_index":99,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["users",{"_index":48,"title":{"entities/Users.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/AdminsController.html":{},"injectables/AdminsServiceAdmin.html":{},"controllers/AuthControllerPublic.html":{},"injectables/AuthServicePublic.html":{},"interfaces/IJwtPayload.html":{},"classes/Init1752751622275.html":{},"guards/PublicUserGuard.html":{},"injectables/SeedTodoDatabase.html":{},"injectables/SeedUsersDatabase.html":{},"entities/Todos.html":{},"controllers/TodosControllerAdmin.html":{},"controllers/TodosControllerPublic.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{},"entities/Users.html":{},"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["users\"(\"id",{"_index":665,"title":{},"body":{"classes/Init1752751622275.html":{}}}],["users.controller",{"_index":136,"title":{},"body":{"modules/AdminRouteModules.html":{}}}],["users.controller.ts",{"_index":166,"title":{},"body":{"controllers/AdminsController.html":{},"coverage.html":{}}}],["users.controller.ts:32",{"_index":175,"title":{},"body":{"controllers/AdminsController.html":{}}}],["users.controller.ts:40",{"_index":181,"title":{},"body":{"controllers/AdminsController.html":{}}}],["users.controller.ts:47",{"_index":185,"title":{},"body":{"controllers/AdminsController.html":{}}}],["users.controller.ts:53",{"_index":189,"title":{},"body":{"controllers/AdminsController.html":{}}}],["users.service",{"_index":203,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{}}}],["users.service.ts",{"_index":243,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"coverage.html":{}}}],["users.service.ts:113",{"_index":254,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["users.service.ts:14",{"_index":247,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["users.service.ts:20",{"_index":249,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["users.service.ts:45",{"_index":251,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["users.service.ts:67",{"_index":252,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["users.service.ts:86",{"_index":257,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{}}}],["users/users.module",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{}}}],["usersbaseentity",{"_index":156,"title":{"classes/UsersBaseEntity.html":{}},"body":{"entities/Admins.html":{},"entities/Users.html":{},"classes/UsersBaseEntity.html":{},"coverage.html":{}}}],["userscontrolleradmin",{"_index":132,"title":{"controllers/UsersControllerAdmin.html":{}},"body":{"modules/AdminRouteModules.html":{},"controllers/UsersControllerAdmin.html":{},"coverage.html":{}}}],["userscontrollerpublic",{"_index":735,"title":{"controllers/UsersControllerPublic.html":{}},"body":{"modules/PublicRouteModules.html":{},"controllers/UsersControllerPublic.html":{},"coverage.html":{}}}],["usersmodule",{"_index":122,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminRouteModules.html":{},"modules/AuthModule.html":{},"modules/PublicRouteModules.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1130,"title":{},"body":{"injectables/UsersServiceAdmin.html":{},"injectables/UsersServicePublic.html":{}}}],["usersservice",{"_index":1102,"title":{},"body":{"controllers/UsersControllerAdmin.html":{},"controllers/UsersControllerPublic.html":{}}}],["usersserviceadmin",{"_index":1097,"title":{"injectables/UsersServiceAdmin.html":{}},"body":{"controllers/UsersControllerAdmin.html":{},"modules/UsersModule.html":{},"injectables/UsersServiceAdmin.html":{},"coverage.html":{},"overview.html":{}}}],["usersservicepublic",{"_index":1116,"title":{"injectables/UsersServicePublic.html":{}},"body":{"controllers/UsersControllerPublic.html":{},"modules/UsersModule.html":{},"injectables/UsersServicePublic.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":785,"title":{},"body":{"modules/ResponseModule.html":{},"index.html":{}}}],["validaiton",{"_index":976,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["validate",{"_index":966,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["validated",{"_index":971,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["validationpipe",{"_index":973,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["validator",{"_index":523,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTodosDto.html":{},"classes/CreateUserDto.html":{},"classes/PaginatedQueryDto.html":{},"entities/Roles.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/authDto.html":{}}}],["validsearchfields",{"_index":277,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"interfaces/ICommonOptions.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["validsortfields",{"_index":278,"title":{},"body":{"injectables/AdminsServiceAdmin.html":{},"interfaces/ICommonOptions.html":{},"injectables/RolesService.html":{},"injectables/TodosServiceAdmin.html":{},"injectables/TodosServicePublic.html":{}}}],["value",{"_index":300,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/AdminsTableAlter1753018246777.html":{},"classes/Init1752751622275.html":{},"classes/PaginatedQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1178,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1379,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varying",{"_index":319,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{}}}],["verbose",{"_index":670,"title":{},"body":{"classes/MyLogger.html":{}}}],["verbose(message",{"_index":680,"title":{},"body":{"classes/MyLogger.html":{}}}],["verifytokenavailabilityandadduser",{"_index":13,"title":{},"body":{"guards/AdminGuard.html":{},"guards/PublicUserGuard.html":{}}}],["verifytokenavailabilityandadduser(request",{"_index":33,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/IJwtPayload.html":{},"guards/PublicUserGuard.html":{}}}],["version",{"_index":1376,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1325,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1314,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1328,"title":{},"body":{"index.html":{}}}],["void",{"_index":615,"title":{},"body":{"classes/ErrorService.html":{},"classes/MyLogger.html":{}}}],["warn",{"_index":671,"title":{},"body":{"classes/MyLogger.html":{}}}],["warn(message",{"_index":682,"title":{},"body":{"classes/MyLogger.html":{}}}],["watch",{"_index":1262,"title":{},"body":{"index.html":{}}}],["we've",{"_index":896,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["website",{"_index":1360,"title":{},"body":{"index.html":{}}}],["well",{"_index":903,"title":{},"body":{"injectables/SeedUsersDatabase.html":{}}}],["whitelist",{"_index":974,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["whose",{"_index":968,"title":{},"body":{"controllers/TodosControllerAdmin.html":{}}}],["working",{"_index":1313,"title":{},"body":{"index.html":{}}}],["x",{"_index":1340,"title":{},"body":{"index.html":{}}}],["yes",{"_index":674,"title":{},"body":{"classes/MyLogger.html":{}}}],["you'd",{"_index":1354,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1273,"title":{},"body":{"index.html":{}}}],["zone",{"_index":314,"title":{},"body":{"classes/AdminsTable1753017922617.html":{},"classes/Init1752751622275.html":{}}}],["zoom",{"_index":123,"title":{},"body":{"modules/AdminRouteModules.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CliModule.html":{},"modules/CommonModules.html":{},"modules/PublicRouteModules.html":{},"modules/RolesModule.html":{},"modules/RouterModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AdminGuard.html":{"url":"guards/AdminGuard.html","title":"guard - AdminGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AdminGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/put-user.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Protected\n                                    Async\n                                verifyTokenAvailabilityAndAddUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(_jwtService: JwtService, _dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/put-user.guard.ts:82\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/put-user.guard.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        verifyTokenAvailabilityAndAddUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAvailabilityAndAddUser(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/put-user.guard.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserRole } from 'src/constants/user-roles.constant';\nimport { DataSource } from 'typeorm';\nimport { Admins } from 'src/modules/admins/entities/admin.entity';\nimport { Users } from 'src/modules/users/entities/user.entity';\n\nexport interface IJwtPayload {\n  id: number;\n  email: string;\n  role_id: number;\n  role: string;\n}\n\n@Injectable()\nexport class PublicUserGuard implements CanActivate {\n  constructor(\n    private readonly _jwtService: JwtService,\n    private readonly _dataSource: DataSource,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const ctx = context.switchToHttp();\n\n    const request = ctx.getRequest();\n    // const response = ctx.getResponse();\n\n    try {\n      await this.verifyTokenAvailabilityAndAddUser(request);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  protected async verifyTokenAvailabilityAndAddUser(request: Request) {\n    const [tokenType, token] = request.headers?.authorization?.split(' ') ?? [];\n\n    // console.log({ tokenType, token });\n\n    if (!token || tokenType !== 'Bearer')\n      throw new UnauthorizedException('token unavailable');\n\n    const decodedData = this._jwtService.verify(token, {\n      secret: process.env.JWT_SECRET,\n    });\n\n    const user = await this._dataSource.manager.findOne(Users, {\n      where: {\n        id: decodedData.id,\n        email: decodedData.email,\n      },\n      select: {\n        role: {\n          id: true,\n          role: true,\n        },\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    if (!user) throw new UnauthorizedException('unauthorized access');\n\n    if (user.role.role !== UserRole.USER)\n      throw new UnauthorizedException('unauthorized access');\n\n    request['user'] = user;\n\n    return;\n  }\n}\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n  constructor(\n    private readonly _jwtService: JwtService,\n    private readonly _dataSource: DataSource,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const ctx = context.switchToHttp();\n\n    const request = ctx.getRequest();\n    // const response = ctx.getResponse();\n\n    try {\n      await this.verifyTokenAvailabilityAndAddUser(request);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  protected async verifyTokenAvailabilityAndAddUser(request: Request) {\n    const [tokenType, token] = request.headers?.authorization?.split(' ') ?? [];\n\n    // console.log({ tokenType, token });\n\n    if (!token || tokenType !== 'Bearer')\n      throw new UnauthorizedException('token unavailable');\n\n    const decodedData = this._jwtService.verify(token, {\n      secret: process.env.JWT_SECRET,\n    });\n\n    const admin = await this._dataSource.manager.findOne(Admins, {\n      where: {\n        id: decodedData.id,\n        email: decodedData.email,\n      },\n      select: {\n        role: {\n          id: true,\n          role: true,\n        },\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    if (!admin) throw new UnauthorizedException('unauthorized access');\n\n    if (admin.role.role !== UserRole.ADMIN)\n      throw new UnauthorizedException('unauthorized access');\n\n    request['user'] = admin;\n\n    return;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminRouteModules.html":{"url":"modules/AdminRouteModules.html","title":"module - AdminRouteModules","body":"\n                   \n\n\n\n\n    Modules\n    AdminRouteModules\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminRouteModules\n\n\n\ncluster_AdminRouteModules_imports\n\n\n\n\nAdminsModule\n\nAdminsModule\n\n\n\nAdminRouteModules\n\nAdminRouteModules\n\nAdminRouteModules -->\n\nAdminsModule->AdminRouteModules\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAdminRouteModules -->\n\nAuthModule->AdminRouteModules\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAdminRouteModules -->\n\nRolesModule->AdminRouteModules\n\n\n\n\n\nTodosModule\n\nTodosModule\n\nAdminRouteModules -->\n\nTodosModule->AdminRouteModules\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAdminRouteModules -->\n\nUsersModule->AdminRouteModules\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/router/routes/admin.routes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthControllerAdmin\n                        \n                        \n                            AdminsController\n                        \n                        \n                            TodosControllerAdmin\n                        \n                        \n                            RolesController\n                        \n                        \n                            UsersControllerAdmin\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            TodosModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminsModule } from 'src/modules/admins/admins.module';\nimport { AdminsController } from 'src/modules/admins/controller/admin.admin-users.controller';\nimport { AuthModule } from 'src/modules/auth/auth.module';\nimport { AuthControllerAdmin } from 'src/modules/auth/controllers/admin.auth.controller';\nimport { RolesController } from 'src/modules/roles/controllers/admin.roles.controller';\nimport { RolesModule } from 'src/modules/roles/roles.module';\nimport { TodosControllerAdmin } from 'src/modules/todos/controllers/admin.todos.controller';\nimport { TodosModule } from 'src/modules/todos/todos.module';\nimport { UsersControllerAdmin } from 'src/modules/users/controllers/admin.users.controller';\nimport { UsersModule } from 'src/modules/users/users.module';\n\n@Module({\n  imports: [AuthModule, AdminsModule, TodosModule, RolesModule, UsersModule],\n  controllers: [\n    AuthControllerAdmin,\n    AdminsController,\n    TodosControllerAdmin,\n    RolesController,\n    UsersControllerAdmin,\n  ],\n})\nexport class AdminRouteModules {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Admins.html":{"url":"entities/Admins.html","title":"entity - Admins","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Admins\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/admins/entities/admin.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, role => role.id, {nullable: false})@JoinColumn({name: 'role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/admins/entities/admin.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { UsersBaseEntity } from 'src/common-modules/entities/user-base.entity';\nimport { Roles } from 'src/modules/roles/entities/role.entity';\nimport { Entity, JoinColumn, ManyToOne } from 'typeorm';\n\n@Entity()\nexport class Admins extends UsersBaseEntity {\n  @ManyToOne(() => Roles, (role) => role.id, { nullable: false })\n  @JoinColumn({ name: 'role_id' })\n  role: Roles;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminsController.html":{"url":"controllers/AdminsController.html","title":"controller - AdminsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/admins/controller/admin.admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin-users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findAllPaginated\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAdminDto: CreateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@PutAdmin()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/admins/controller/admin.admin-users.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAdminDto\n                                            \n                                                            CreateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findAllPaginated\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllPaginated(queryParams: PaginatedQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @PutAdmin()@ResponseMessage('admins fetch success')@ShowPagination()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/admins/controller/admin.admin-users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryParams\n                                            \n                                                            PaginatedQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@PutAdmin()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/admins/controller/admin.admin-users.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(admin: Admins, updateAdminDto: UpdateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update/me')@PutAdmin()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/admins/controller/admin.admin-users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                admin\n                                            \n                                                            Admins\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAdminDto\n                                            \n                                                            UpdateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { CreateAdminDto } from '../dto/create-admin-user.dto';\nimport { UpdateAdminDto } from '../dto/update-admin-user.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AdminsServiceAdmin } from '../services/admin.admin-users.service';\nimport { PutAdmin } from 'src/modules/auth/decorator/put-user.decorator';\nimport {\n  ResponseMessage,\n  ShowPagination,\n} from 'src/common-modules/response/decorators/response.decorator';\nimport { PaginatedQueryDto } from 'src/common-modules/swagger-docs/paginate-query.dto';\nimport { Admins } from '../entities/admin.entity';\nimport { User } from 'src/common-modules/request/decorators/request.decorator';\n\n@ApiTags('Admins')\n// @Controller(`${ControllerPrefix.ADMIN}/admins`)\n@Controller('admin-users')\nexport class AdminsController {\n  constructor(private readonly adminsService: AdminsServiceAdmin) {}\n\n  @Post('create')\n  @PutAdmin()\n  create(@Body() createAdminDto: CreateAdminDto) {\n    return this.adminsService.create(createAdminDto);\n  }\n\n  @PutAdmin()\n  @ResponseMessage('admins fetch success')\n  @ShowPagination()\n  @Get()\n  findAllPaginated(@Query() queryParams: PaginatedQueryDto) {\n    // console.log(queryParams);\n    return this.adminsService.findAllPaginated(queryParams);\n  }\n\n  @Get(':id')\n  @PutAdmin()\n  findOne(@Param('id') id: string) {\n    return this.adminsService.findOne(+id);\n  }\n\n  @Patch('update/me')\n  @PutAdmin()\n  update(@User() admin: Admins, @Body() updateAdminDto: UpdateAdminDto) {\n    return this.adminsService.update({ admin, updateAdminDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminsModule.html":{"url":"modules/AdminsModule.html","title":"module - AdminsModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminsModule\n\n\n\ncluster_AdminsModule_providers\n\n\n\ncluster_AdminsModule_exports\n\n\n\n\nAdminsServiceAdmin \n\nAdminsServiceAdmin \n\n\n\nAdminsModule\n\nAdminsModule\n\nAdminsServiceAdmin  -->\n\nAdminsModule->AdminsServiceAdmin \n\n\n\n\n\nAdminsServiceAdmin\n\nAdminsServiceAdmin\n\nAdminsModule -->\n\nAdminsServiceAdmin->AdminsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/admins/admins.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminsServiceAdmin\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminsServiceAdmin\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Admins } from './entities/admin.entity';\nimport { AdminsServiceAdmin } from './services/admin.admin-users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Admins])],\n  providers: [AdminsServiceAdmin],\n  exports: [AdminsServiceAdmin],\n})\nexport class AdminsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminsServiceAdmin.html":{"url":"injectables/AdminsServiceAdmin.html","title":"injectable - AdminsServiceAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminsServiceAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/admins/services/admin.admin-users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAllPaginated\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                prepareDataToCreateAdmin\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(adminsRepository: Repository, _dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/modules/admins/services/admin.admin-users.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAdminDto: CreateAdminDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/admins/services/admin.admin-users.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAdminDto\n                                            \n                                                            CreateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllPaginated\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllPaginated(queryParams: PaginatedQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/admins/services/admin.admin-users.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryParams\n                                            \n                                                            PaginatedQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/admins/services/admin.admin-users.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        prepareDataToCreateAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    prepareDataToCreateAdmin(createAdminDto: CreateAdminDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/admins/services/admin.admin-users.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAdminDto\n                                            \n                                                            CreateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/admins/services/admin.admin-users.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { CreateAdminDto } from '../dto/create-admin-user.dto';\nimport { UpdateAdminDto } from '../dto/update-admin-user.dto';\nimport { DataSource, Repository } from 'typeorm';\nimport { Admins } from '../entities/admin.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Roles } from 'src/modules/roles/entities/role.entity';\nimport { UserRole } from 'src/constants/user-roles.constant';\nimport { Users } from 'src/modules/users/entities/user.entity';\nimport { PaginatedQueryDto } from 'src/common-modules/swagger-docs/paginate-query.dto';\nimport { findAllPaginatedData } from 'src/common-modules/utils/functions/common-query';\n\n@Injectable()\nexport class AdminsServiceAdmin {\n  constructor(\n    @InjectRepository(Admins)\n    private adminsRepository: Repository,\n    private readonly _dataSource: DataSource,\n  ) {}\n  async create(createAdminDto: CreateAdminDto) {\n    const [existingUsersInAdmin, existingUsersInUsers] = await Promise.all([\n      this.adminsRepository.findOne({\n        where: {\n          email: createAdminDto.email,\n        },\n      }),\n      this._dataSource.manager.findOne(Users, {\n        where: {\n          email: createAdminDto.email,\n        },\n      }),\n    ]);\n\n    if (existingUsersInAdmin || existingUsersInUsers)\n      throw new ConflictException('user exists with this email');\n\n    const preparedData = await this.prepareDataToCreateAdmin(createAdminDto);\n    const admin = this.adminsRepository.create(preparedData);\n\n    await this.adminsRepository.save(admin);\n\n    return admin;\n  }\n\n  async findAllPaginated(queryParams: PaginatedQueryDto) {\n    const data = await findAllPaginatedData({\n      ...queryParams,\n      repo: this.adminsRepository,\n      validSearchFields: ['email', 'name'],\n      validSortFields: ['email', 'name', 'createdAt'],\n      queryOptions: {\n        select: {\n          role: {\n            id: true,\n            role: true,\n          },\n        },\n        relations: {\n          role: true,\n        },\n      },\n    });\n\n    return data;\n  }\n\n  async findOne(id: number) {\n    const admin = await this.adminsRepository.findOne({\n      where: {\n        id,\n      },\n      select: {\n        role: {\n          id: true,\n          role: true,\n        },\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    return admin;\n  }\n\n  async update({\n    admin,\n    updateAdminDto,\n  }: {\n    admin: Admins;\n    updateAdminDto: UpdateAdminDto;\n  }) {\n    const preparedUpdate = this.adminsRepository.create(updateAdminDto);\n\n    await this.adminsRepository.update(admin.id, preparedUpdate);\n\n    const updatedData = await this.adminsRepository.findOne({\n      where: {\n        id: admin.id,\n      },\n      select: {\n        id: true,\n        role: true,\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    return updatedData;\n  }\n\n  async prepareDataToCreateAdmin(createAdminDto: CreateAdminDto) {\n    const adminRole = await this._dataSource.manager.findOne(Roles, {\n      where: {\n        role: UserRole.ADMIN,\n      },\n      select: {\n        id: true,\n        role: true,\n      },\n    });\n\n    return {\n      name: createAdminDto.name,\n      email: createAdminDto.email,\n      password: createAdminDto.password,\n      role: adminRole,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminsTable1753017922617.html":{"url":"classes/AdminsTable1753017922617.html","title":"class - AdminsTable1753017922617","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminsTable1753017922617\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1753017922617-admins-table.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AdminsTable1753017922617'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1753017922617-admins-table.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1753017922617-admins-table.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1753017922617-admins-table.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AdminsTable1753017922617 implements MigrationInterface {\n    name = 'AdminsTable1753017922617'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \"admins\" (\"id\" SERIAL NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"deleted_at\" TIMESTAMP WITH TIME ZONE, \"name\" character varying NOT NULL, \"email\" character varying NOT NULL, \"password\" character varying NOT NULL, \"roleId\" integer NOT NULL, CONSTRAINT \"UQ_051db7d37d478a69a7432df1479\" UNIQUE (\"email\"), CONSTRAINT \"PK_e3b38270c97a854c48d2e80874e\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`ALTER TABLE \"admins\" ADD CONSTRAINT \"FK_d27f7a7f01967e4a5e8ba73ebb0\" FOREIGN KEY (\"roleId\") REFERENCES \"roles\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"admins\" DROP CONSTRAINT \"FK_d27f7a7f01967e4a5e8ba73ebb0\"`);\n        await queryRunner.query(`DROP TABLE \"admins\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminsTableAlter1753018246777.html":{"url":"classes/AdminsTableAlter1753018246777.html","title":"class - AdminsTableAlter1753018246777","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminsTableAlter1753018246777\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1753018246777-admins-table-alter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AdminsTableAlter1753018246777'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1753018246777-admins-table-alter.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1753018246777-admins-table-alter.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1753018246777-admins-table-alter.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AdminsTableAlter1753018246777 implements MigrationInterface {\n    name = 'AdminsTableAlter1753018246777'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"admins\" DROP CONSTRAINT \"FK_d27f7a7f01967e4a5e8ba73ebb0\"`);\n        await queryRunner.query(`ALTER TABLE \"admins\" RENAME COLUMN \"roleId\" TO \"role_id\"`);\n        await queryRunner.query(`ALTER TABLE \"admins\" ADD CONSTRAINT \"FK_5733c73cd81c566a90cc4802f96\" FOREIGN KEY (\"role_id\") REFERENCES \"roles\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"admins\" DROP CONSTRAINT \"FK_5733c73cd81c566a90cc4802f96\"`);\n        await queryRunner.query(`ALTER TABLE \"admins\" RENAME COLUMN \"role_id\" TO \"roleId\"`);\n        await queryRunner.query(`ALTER TABLE \"admins\" ADD CONSTRAINT \"FK_d27f7a7f01967e4a5e8ba73ebb0\" FOREIGN KEY (\"roleId\") REFERENCES \"roles\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCommonModules\n\nCommonModules\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonModules->AppModule\n\n\n\n\n\nRouterModule\n\nRouterModule\n\nAppModule -->\n\nRouterModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CommonModules\n                        \n                        \n                            RouterModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommonModules } from './common-modules/common.module';\nimport { RouterModule } from './router/router.module';\n\n@Module({\n  imports: [CommonModules, RouterModule],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthControllerAdmin.html":{"url":"controllers/AuthControllerAdmin.html","title":"controller - AuthControllerAdmin","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthControllerAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/controllers/admin.auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                me\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(admin: Admins, passwords: UpdateAdminPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('password changed')@PutAdmin()@Patch('change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/admin.auth.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                admin\n                                            \n                                                            Admins\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                passwords\n                                            \n                                                            UpdateAdminPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authDto: authDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Login Success')@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/admin.auth.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDto\n                                            \n                                                            authDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        me\n                        \n                    \n                \n            \n            \n                \n                        \n                    me(admin: Admins)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('detail fetch success')@PutAdmin()@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/admin.auth.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                admin\n                                            \n                                                            Admins\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get, Patch } from '@nestjs/common';\nimport { authDto } from '../dto/auth.dto';\nimport { ResponseMessage } from 'src/common-modules/response/decorators/response.decorator';\nimport { ApiTags } from '@nestjs/swagger';\nimport { PutAdmin } from '../decorator/put-user.decorator';\nimport { AuthServiceAdmin } from '../services/admin.auth.service';\nimport { User } from 'src/common-modules/request/decorators/request.decorator';\nimport { Admins } from 'src/modules/admins/entities/admin.entity';\nimport { UpdateAdminPasswordDto } from 'src/modules/admins/dto/update-admin-user.dto';\n\n@ApiTags('Authentication')\n// @Controller(`${ControllerPrefix.ADMIN}/auth`)\n@Controller('auth')\nexport class AuthControllerAdmin {\n  constructor(private readonly authService: AuthServiceAdmin) {}\n\n  @ResponseMessage('Login Success')\n  @Post('login')\n  login(@Body() authDto: authDto) {\n    return this.authService.login(authDto);\n  }\n\n  @ResponseMessage('detail fetch success')\n  @PutAdmin()\n  @Get('me')\n  me(@User() admin: Admins) {\n    return this.authService.findMe(admin);\n  }\n\n  @ResponseMessage('password changed')\n  @PutAdmin()\n  @Patch('change-password')\n  changePassword(\n    @User() admin: Admins,\n    @Body() passwords: UpdateAdminPasswordDto,\n  ) {\n    return this.authService.changePassword({ admin, passwords });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthControllerPublic.html":{"url":"controllers/AuthControllerPublic.html","title":"controller - AuthControllerPublic","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthControllerPublic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/controllers/public.auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                me\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(user: Users, passwords: UpdateUserPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @PutPublicUser()@Patch('change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/public.auth.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                passwords\n                                            \n                                                            UpdateUserPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authDto: authDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Login Success')@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/public.auth.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDto\n                                            \n                                                            authDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        me\n                        \n                    \n                \n            \n            \n                \n                        \n                    me(user: Users)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('logged in user detail fetch success')@PutPublicUser()@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/public.auth.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get, Patch } from '@nestjs/common';\nimport { authDto } from '../dto/auth.dto';\nimport { ResponseMessage } from 'src/common-modules/response/decorators/response.decorator';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { PutPublicUser } from '../decorator/put-user.decorator';\nimport { AuthServicePublic } from '../services/public.auth.service';\nimport { Users } from 'src/modules/users/entities/user.entity';\nimport { User } from 'src/common-modules/request/decorators/request.decorator';\nimport { UpdateUserPasswordDto } from 'src/modules/users/dto/update-user.dto';\n\n@ApiTags('Authentication')\n// @Controller(`${ControllerPrefix.PUBLIC}/auth`)\n@Controller('auth')\nexport class AuthControllerPublic {\n  constructor(private readonly authService: AuthServicePublic) {}\n\n  @ResponseMessage('Login Success')\n  @Post('login')\n  // @UseInterceptors(ClassSerializerInterceptor)\n  login(@Body() authDto: authDto) {\n    return this.authService.login(authDto);\n  }\n\n  @ResponseMessage('logged in user detail fetch success')\n  @PutPublicUser()\n  @Get('me')\n  me(@User() user: Users) {\n    return this.authService.findMe(user);\n  }\n\n  @PutPublicUser()\n  @Patch('change-password')\n  changePassword(\n    @User() user: Users,\n    @Body() passwords: UpdateUserPasswordDto,\n  ) {\n    return this.authService.changePassword({ user, passwords });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAdminsModule\n\nAdminsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAdminsModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthServiceAdmin \n\nAuthServiceAdmin \n\nAuthServiceAdmin  -->\n\nAuthModule->AuthServiceAdmin \n\n\n\n\n\nAuthServicePublic \n\nAuthServicePublic \n\nAuthServicePublic  -->\n\nAuthModule->AuthServicePublic \n\n\n\n\n\nAuthServiceAdmin\n\nAuthServiceAdmin\n\nAuthModule -->\n\nAuthServiceAdmin->AuthModule\n\n\n\n\n\nAuthServicePublic\n\nAuthServicePublic\n\nAuthModule -->\n\nAuthServicePublic->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthServiceAdmin\n                        \n                        \n                            AuthServicePublic\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthServiceAdmin\n                        \n                        \n                            AuthServicePublic\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { UsersModule } from '../users/users.module';\nimport { AdminsModule } from '../admins/admins.module';\nimport { AuthServiceAdmin } from './services/admin.auth.service';\nimport { AuthServicePublic } from './services/public.auth.service';\n\n@Module({\n  imports: [\n    AdminsModule,\n    UsersModule,\n    JwtModule.register({\n      global: true,\n    }),\n  ],\n  providers: [AuthServiceAdmin, AuthServicePublic, JwtService],\n  exports: [AuthServiceAdmin, AuthServicePublic],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthServiceAdmin.html":{"url":"injectables/AuthServiceAdmin.html","title":"injectable - AuthServiceAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthServiceAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/services/admin.auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                findMe\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_dataSource: DataSource, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/services/admin.auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/admin.auth.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findMe\n                        \n                    \n                \n            \n            \n                \nfindMe(admin: Admins)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/admin.auth.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                admin\n                                            \n                                                            Admins\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Admins\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authDto: authDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/admin.auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDto\n                                            \n                                                            authDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { authDto } from '../dto/auth.dto';\nimport * as bcrypt from 'bcryptjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { Admins } from 'src/modules/admins/entities/admin.entity';\nimport { UpdateAdminPasswordDto } from 'src/modules/admins/dto/update-admin-user.dto';\n\n@Injectable()\nexport class AuthServiceAdmin {\n  constructor(\n    private readonly _dataSource: DataSource,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async login(authDto: authDto) {\n    const existingUser = await this._dataSource.manager.findOne(Admins, {\n      where: {\n        email: authDto.email,\n      },\n      select: {\n        role: {\n          id: true,\n          role: true,\n        },\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    if (!existingUser)\n      throw new UnauthorizedException(\"email or password does't match\");\n\n    const isPasswordVerified = await bcrypt.compare(\n      authDto.password,\n      existingUser.password,\n    );\n\n    if (!isPasswordVerified)\n      throw new UnauthorizedException(\"email or password does't match\");\n\n    const accessToken = this.jwtService.sign(\n      {\n        id: existingUser.id,\n        email: existingUser.email,\n        role_id: existingUser.role.id,\n        role: existingUser.role.role,\n      },\n      { secret: process.env.JWT_SECRET, expiresIn: process.env.JWT_EXPIRES_IN },\n    );\n\n    return { user: existingUser, accessToken };\n  }\n\n  findMe(admin: Admins): Admins {\n    return admin;\n  }\n\n  async changePassword({\n    admin,\n    passwords,\n  }: {\n    admin: Admins;\n    passwords: UpdateAdminPasswordDto;\n  }) {\n    const existingUser = await this._dataSource.manager.findOne(Admins, {\n      where: {\n        id: admin.id,\n        email: admin.email,\n      },\n    });\n\n    if (!existingUser) {\n      throw new NotFoundException('admin not found');\n    }\n\n    const doesPasswordMatch = await bcrypt.compare(\n      passwords.oldPassword,\n      existingUser.password,\n    );\n\n    if (!doesPasswordMatch) {\n      throw new UnauthorizedException(\"passwords don't match\");\n    }\n\n    const adminDto = this._dataSource.manager.create(Admins, {\n      password: passwords.newPassword,\n    });\n\n    await this._dataSource.manager.update(Admins, admin.id, adminDto);\n\n    return admin;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthServicePublic.html":{"url":"injectables/AuthServicePublic.html","title":"injectable - AuthServicePublic","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthServicePublic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/services/public.auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                findMe\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_dataSource: DataSource, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/services/public.auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/public.auth.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findMe\n                        \n                    \n                \n            \n            \n                \nfindMe(user: Users)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/public.auth.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Users\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authDto: authDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/public.auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authDto\n                                            \n                                                            authDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { authDto } from '../dto/auth.dto';\nimport * as bcrypt from 'bcryptjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { Users } from 'src/modules/users/entities/user.entity';\nimport { UpdateUserPasswordDto } from 'src/modules/users/dto/update-user.dto';\n\n@Injectable()\nexport class AuthServicePublic {\n  constructor(\n    private readonly _dataSource: DataSource,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async login(authDto: authDto) {\n    const existingUser = await this._dataSource.manager.findOne(Users, {\n      where: {\n        email: authDto.email,\n      },\n      select: {\n        role: {\n          id: true,\n          role: true,\n        },\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    if (!existingUser)\n      throw new UnauthorizedException(\"email or password does't match\");\n\n    const isPasswordVerified = await bcrypt.compare(\n      authDto.password,\n      existingUser.password,\n    );\n\n    if (!isPasswordVerified)\n      throw new UnauthorizedException(\"email or password does't match\");\n\n    const accessToken = this.jwtService.sign(\n      {\n        id: existingUser.id,\n        email: existingUser.email,\n        role_id: existingUser.role.id,\n        role: existingUser.role.role,\n      },\n      { secret: process.env.JWT_SECRET, expiresIn: process.env.JWT_EXPIRES_IN },\n    );\n\n    return { user: existingUser, accessToken };\n  }\n\n  findMe(user: Users): Users {\n    return user;\n  }\n\n  async changePassword({\n    user,\n    passwords,\n  }: {\n    user: Users;\n    passwords: UpdateUserPasswordDto;\n  }) {\n    const existingUser = await this._dataSource.manager.findOne(Users, {\n      where: {\n        id: user.id,\n        email: user.email,\n      },\n    });\n\n    if (!existingUser) {\n      throw new NotFoundException('user not found');\n    }\n\n    const doesPasswordMatch = await bcrypt.compare(\n      passwords.oldPassword,\n      existingUser.password,\n    );\n\n    if (!doesPasswordMatch) {\n      throw new UnauthorizedException(\"passwords doesn't match\");\n    }\n\n    const userDto = this._dataSource.manager.create(Users, {\n      password: passwords.newPassword,\n    });\n\n    await this._dataSource.manager.update(Users, user.id, userDto);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CliModule.html":{"url":"modules/CliModule.html","title":"module - CliModule","body":"\n                   \n\n\n\n\n    Modules\n    CliModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CliModule\n\n\n\ncluster_CliModule_providers\n\n\n\ncluster_CliModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nCliModule\n\nCliModule\n\nCliModule -->\n\nDatabaseModule->CliModule\n\n\n\n\n\nSeedTodoDatabase\n\nSeedTodoDatabase\n\nCliModule -->\n\nSeedTodoDatabase->CliModule\n\n\n\n\n\nSeedUsersDatabase\n\nSeedUsersDatabase\n\nCliModule -->\n\nSeedUsersDatabase->CliModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/commands/cli.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeedTodoDatabase\n                        \n                        \n                            SeedUsersDatabase\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MyLogger } from '../common-modules/logger.service';\nimport { DatabaseModule } from '../common-modules/database/database.module';\nimport { SeedUsersDatabase } from './user-seed.command';\nimport { SeedTodoDatabase } from './todo-seed.command';\nimport { CommandModule } from 'nestjs-command';\n\n// console.log(__dirname)\n@Module({\n  imports: [CommandModule, DatabaseModule],\n  providers: [MyLogger, SeedUsersDatabase, SeedTodoDatabase],\n})\nexport class CliModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModules.html":{"url":"modules/CommonModules.html","title":"module - CommonModules","body":"\n                   \n\n\n\n\n    Modules\n    CommonModules\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModules\n\n\n\ncluster_CommonModules_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nCommonModules\n\nCommonModules\n\nCommonModules -->\n\nDatabaseModule->CommonModules\n\n\n\n\n\nErrorFilterModule\n\nErrorFilterModule\n\nCommonModules -->\n\nErrorFilterModule->CommonModules\n\n\n\n\n\nResponseModule\n\nResponseModule\n\nCommonModules -->\n\nResponseModule->CommonModules\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common-modules/common.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            ErrorFilterModule\n                        \n                        \n                            ResponseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseModule } from './database/database.module';\nimport { LoggerModule } from 'nestjs-pino';\nimport { ResponseModule } from './response/respose.module';\nimport { ErrorFilterModule } from './error/error.module';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    LoggerModule.forRoot({\n      pinoHttp: {\n        transport: {\n          target: 'pino-pretty',\n        },\n      },\n    }),\n    ResponseModule,\n    ErrorFilterModule,\n  ],\n})\nexport class CommonModules {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminDto.html":{"url":"classes/CreateAdminDto.html","title":"class - CreateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/admins/dto/create-admin-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(1)@IsEmail()@ApiProperty({example: 'admin@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/admins/dto/create-admin-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(1)@ApiProperty({example: 'Admin Admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/admins/dto/create-admin-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(8)@IsString()@ApiProperty({example: 'Test@123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/admins/dto/create-admin-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class CreateAdminDto {\n  @IsString()\n  @MinLength(1)\n  @ApiProperty({\n    example: 'Admin Admin',\n  })\n  name: string;\n\n  @IsNotEmpty()\n  @MinLength(1)\n  @IsEmail()\n  @ApiProperty({\n    example: 'admin@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @MinLength(8)\n  @IsString()\n  @ApiProperty({\n    example: 'Test@123',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/roles/dto/create-role.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DBBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: ''})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/roles/dto/create-role.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         DBBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         DBBaseEntity:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamptz', name: 'deleted_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         DBBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         DBBaseEntity:20\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         DBBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         DBBaseEntity:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamptz', name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         DBBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         DBBaseEntity:17\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { DBBaseEntity } from 'src/common-modules/entities/base.entity';\n\nexport class CreateRoleDto extends DBBaseEntity {\n  @ApiProperty({\n    type: 'string',\n    example: '',\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTodosDto.html":{"url":"classes/CreateTodosDto.html","title":"class - CreateTodosDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTodosDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todos/dto/create-todos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                isCompleted\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is the description of my todo'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/todos/dto/create-todos.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isCompleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/todos/dto/create-todos.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'My Todo Title'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/todos/dto/create-todos.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateTodosDto {\n  @ApiProperty({ example: 'My Todo Title' })\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({ example: 'This is the description of my todo' })\n  @IsString()\n  description: string;\n\n  @ApiProperty({ example: false })\n  @IsBoolean()\n  isCompleted: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(1)@IsEmail()@ApiProperty({example: 'user@email.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(1)@ApiProperty({example: 'User User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(8)@IsString()@ApiProperty({example: 'Test@123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @MinLength(1)\n  @ApiProperty({\n    example: 'User User',\n  })\n  name: string;\n\n  @IsNotEmpty()\n  @MinLength(1)\n  @IsEmail()\n  @ApiProperty({\n    example: 'user@email.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @MinLength(8)\n  @IsString()\n  @ApiProperty({\n    example: 'Test@123',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBBaseEntity.html":{"url":"classes/DBBaseEntity.html","title":"class - DBBaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBBaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common-modules/entities/base.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/entities/base.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamptz', name: 'deleted_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/entities/base.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/entities/base.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamptz', name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/entities/base.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  CreateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport class DBBaseEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @CreateDateColumn({ type: 'timestamptz', name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamptz', name: 'updated_at' })\n  updatedAt: Date;\n\n  @DeleteDateColumn({ type: 'timestamptz', name: 'deleted_at' })\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common-modules/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DataSource } from 'typeorm';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      useFactory: () => ({\n        type: 'postgres',\n        username: process.env.DATABASE_USERNAME,\n        password: process.env.DATABASE_PASSWORD,\n        database: process.env.DATABASE_NAME,\n        host: 'localhost',\n        port: +process.env.DATABASE_PORT,\n        entities: [__dirname + './../../**/*.entity{.ts,.js}'],\n        migrations: [__dirname + '/migrations/**/*{.ts,.js}'],\n        synchronize: false,\n      }),\n      dataSourceFactory: async (options) => {\n        const datasource = await new DataSource(options).initialize();\n\n        return datasource;\n      },\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ErrorFilterModule.html":{"url":"modules/ErrorFilterModule.html","title":"module - ErrorFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    ErrorFilterModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common-modules/error/error.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ErrorService } from './error.service';\nimport { APP_FILTER } from '@nestjs/core';\nimport { MyLogger } from '../logger.service';\n\n@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: ErrorService,\n    },\n    MyLogger,\n  ],\n})\nexport class ErrorFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorService.html":{"url":"classes/ErrorService.html","title":"class - ErrorService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common-modules/error/error.service.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_loggerService: MyLogger)\n                    \n                \n                        \n                            \n                                Defined in src/common-modules/error/error.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _loggerService\n                                                  \n                                                        \n                                                                        MyLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common-modules/error/error.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { MyLogger } from '../logger.service';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class ErrorService implements ExceptionFilter {\n  constructor(private readonly _loggerService: MyLogger) {}\n\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    const exceptionResponse = exception.getResponse();\n\n    // console.log(exceptionResponse, exception.stack);\n    // console.log(exception);\n\n    const errorMessage = Array.isArray(exceptionResponse.message)\n      ? exceptionResponse.message?.[0]\n      : exceptionResponse.message;\n\n    this._loggerService.error(exceptionResponse, exception.stack, 'app-error');\n\n    response.status(status).json({\n      message: errorMessage || 'Request Failed',\n      status,\n      success: status \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICommonOptions.html":{"url":"interfaces/ICommonOptions.html","title":"interface - ICommonOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICommonOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common-modules/utils/interfaces/common-query.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PaginatedQueryDto\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            queryOptions\n                                        \n                                \n                                \n                                        \n                                            repo\n                                        \n                                \n                                \n                                        \n                                            validSearchFields\n                                        \n                                \n                                \n                                        \n                                            validSortFields\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryOptions:     FindManyOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FindManyOptions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        repo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        repo:     Repository\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Repository\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validSearchFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validSearchFields:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validSortFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validSortFields:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PaginatedQueryDto } from 'src/common-modules/swagger-docs/paginate-query.dto';\nimport { FindManyOptions, Repository } from 'typeorm';\n\nexport interface ICommonOptions extends PaginatedQueryDto {\n  repo: Repository;\n  queryOptions: FindManyOptions;\n  validSearchFields: (keyof T)[];\n  validSortFields: (keyof T)[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJwtPayload.html":{"url":"interfaces/IJwtPayload.html","title":"interface - IJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/put-user.guard.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            role_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserRole } from 'src/constants/user-roles.constant';\nimport { DataSource } from 'typeorm';\nimport { Admins } from 'src/modules/admins/entities/admin.entity';\nimport { Users } from 'src/modules/users/entities/user.entity';\n\nexport interface IJwtPayload {\n  id: number;\n  email: string;\n  role_id: number;\n  role: string;\n}\n\n@Injectable()\nexport class PublicUserGuard implements CanActivate {\n  constructor(\n    private readonly _jwtService: JwtService,\n    private readonly _dataSource: DataSource,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const ctx = context.switchToHttp();\n\n    const request = ctx.getRequest();\n    // const response = ctx.getResponse();\n\n    try {\n      await this.verifyTokenAvailabilityAndAddUser(request);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  protected async verifyTokenAvailabilityAndAddUser(request: Request) {\n    const [tokenType, token] = request.headers?.authorization?.split(' ') ?? [];\n\n    // console.log({ tokenType, token });\n\n    if (!token || tokenType !== 'Bearer')\n      throw new UnauthorizedException('token unavailable');\n\n    const decodedData = this._jwtService.verify(token, {\n      secret: process.env.JWT_SECRET,\n    });\n\n    const user = await this._dataSource.manager.findOne(Users, {\n      where: {\n        id: decodedData.id,\n        email: decodedData.email,\n      },\n      select: {\n        role: {\n          id: true,\n          role: true,\n        },\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    if (!user) throw new UnauthorizedException('unauthorized access');\n\n    if (user.role.role !== UserRole.USER)\n      throw new UnauthorizedException('unauthorized access');\n\n    request['user'] = user;\n\n    return;\n  }\n}\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n  constructor(\n    private readonly _jwtService: JwtService,\n    private readonly _dataSource: DataSource,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const ctx = context.switchToHttp();\n\n    const request = ctx.getRequest();\n    // const response = ctx.getResponse();\n\n    try {\n      await this.verifyTokenAvailabilityAndAddUser(request);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  protected async verifyTokenAvailabilityAndAddUser(request: Request) {\n    const [tokenType, token] = request.headers?.authorization?.split(' ') ?? [];\n\n    // console.log({ tokenType, token });\n\n    if (!token || tokenType !== 'Bearer')\n      throw new UnauthorizedException('token unavailable');\n\n    const decodedData = this._jwtService.verify(token, {\n      secret: process.env.JWT_SECRET,\n    });\n\n    const admin = await this._dataSource.manager.findOne(Admins, {\n      where: {\n        id: decodedData.id,\n        email: decodedData.email,\n      },\n      select: {\n        role: {\n          id: true,\n          role: true,\n        },\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    if (!admin) throw new UnauthorizedException('unauthorized access');\n\n    if (admin.role.role !== UserRole.ADMIN)\n      throw new UnauthorizedException('unauthorized access');\n\n    request['user'] = admin;\n\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaginationMetadata.html":{"url":"interfaces/IPaginationMetadata.html","title":"interface - IPaginationMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaginationMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common-modules/response/interfaces/pagination-metadata.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            nextPage\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                        \n                                            prevPage\n                                        \n                                \n                                \n                                        \n                                            skipPagination\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                                \n                                        \n                                            totalPage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nextPage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nextPage:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prevPage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prevPage:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipPagination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skipPagination:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPaginationMetadata {\n  total: number;\n  limit: number;\n  page: number;\n  totalPage: number;\n  nextPage: number | null;\n  prevPage: number | null;\n  skipPagination: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Init1752751622275.html":{"url":"classes/Init1752751622275.html","title":"class - Init1752751622275","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Init1752751622275\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1752751622275-init.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Init1752751622275'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1752751622275-init.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1752751622275-init.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1752751622275-init.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class Init1752751622275 implements MigrationInterface {\n    name = 'Init1752751622275'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \"roles\" (\"id\" SERIAL NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"deleted_at\" TIMESTAMP WITH TIME ZONE, \"role\" character varying NOT NULL, CONSTRAINT \"PK_c1433d71a4838793a49dcad46ab\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TABLE \"users\" (\"id\" SERIAL NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"deleted_at\" TIMESTAMP WITH TIME ZONE, \"name\" character varying NOT NULL, \"email\" character varying NOT NULL, \"password\" character varying NOT NULL, \"role_id\" integer NOT NULL, CONSTRAINT \"UQ_97672ac88f789774dd47f7c8be3\" UNIQUE (\"email\"), CONSTRAINT \"PK_a3ffb1c0c8416b9fc6f907b7433\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TABLE \"todos\" (\"id\" SERIAL NOT NULL, \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"deleted_at\" TIMESTAMP WITH TIME ZONE, \"title\" character varying NOT NULL, \"description\" character varying NOT NULL, \"is_completed\" boolean NOT NULL DEFAULT false, \"user_id\" integer NOT NULL, CONSTRAINT \"PK_ca8cafd59ca6faaf67995344225\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`ALTER TABLE \"users\" ADD CONSTRAINT \"FK_a2cecd1a3531c0b041e29ba46e1\" FOREIGN KEY (\"role_id\") REFERENCES \"roles\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"todos\" ADD CONSTRAINT \"FK_53511787e1f412d746c4bf223ff\" FOREIGN KEY (\"user_id\") REFERENCES \"users\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"todos\" DROP CONSTRAINT \"FK_53511787e1f412d746c4bf223ff\"`);\n        await queryRunner.query(`ALTER TABLE \"users\" DROP CONSTRAINT \"FK_a2cecd1a3531c0b041e29ba46e1\"`);\n        await queryRunner.query(`DROP TABLE \"todos\"`);\n        await queryRunner.query(`DROP TABLE \"users\"`);\n        await queryRunner.query(`DROP TABLE \"roles\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MyLogger.html":{"url":"classes/MyLogger.html","title":"class - MyLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MyLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common-modules/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common-modules/logger.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common-modules/logger.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                trace\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common-modules/logger.service.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common-modules/logger.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common-modules/logger.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConsoleLogger } from '@nestjs/common';\n\nexport class MyLogger extends ConsoleLogger {\n  log(message: any, context?: string) {\n    if (\n      context !== 'RouterExplorer' &&\n      context !== 'NestApplication' &&\n      context !== 'InstanceLoader' &&\n      context !== 'RoutesResolver' &&\n      context !== 'NestFactory'\n    ) {\n      super.log(message, context);\n    }\n  }\n\n  error(message: any, trace?: string, context?: string) {\n    super.error(message, trace, context);\n  }\n\n  warn(message: any, context?: string) {\n    super.warn(message, context);\n  }\n\n  debug(message: any, context?: string) {\n    super.debug(message, context);\n  }\n\n  verbose(message: any, context?: string) {\n    super.verbose(message, context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedQueryDto.html":{"url":"classes/PaginatedQueryDto.html","title":"class - PaginatedQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common-modules/swagger-docs/paginate-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                search\n                            \n                            \n                                    \n                                    \n                                    \n                                searchField\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                skipPagination\n                            \n                            \n                                    \n                                    \n                                    \n                                sortField\n                            \n                            \n                                    \n                                    \n                                    \n                                sortOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'integer', description: 'between 1 and 100'})@IsNumber()@IsOptional()@Min(1)@Max(100)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/swagger-docs/paginate-query.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'integer'})@IsNumber()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/swagger-docs/paginate-query.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/swagger-docs/paginate-query.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        searchField\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/swagger-docs/paginate-query.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        skipPagination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'boolean'})@IsBoolean()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/swagger-docs/paginate-query.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sortField\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/swagger-docs/paginate-query.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sortOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: undefined})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/swagger-docs/paginate-query.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Max,\n  Min,\n} from 'class-validator';\nimport { Transform, Type } from 'class-transformer';\n\nexport class PaginatedQueryDto {\n  @ApiPropertyOptional({\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  searchField: string;\n\n  @ApiPropertyOptional({\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  search: string;\n\n  @ApiPropertyOptional({\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  sortField: string;\n\n  @ApiPropertyOptional({\n    enum: ['ASC', 'DESC'],\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder: string;\n\n  @ApiPropertyOptional({\n    type: 'integer',\n    description: 'between 1 and 100',\n  })\n  @IsNumber()\n  @IsOptional()\n  @Min(1)\n  @Max(100)\n  @Type(() => Number)\n  limit: number;\n\n  @ApiPropertyOptional({\n    type: 'integer',\n  })\n  @IsNumber()\n  @IsOptional()\n  @Type(() => Number)\n  page: number;\n\n  @ApiPropertyOptional({\n    type: 'boolean',\n  })\n  @IsBoolean()\n  @IsOptional()\n  @Transform(({ value }) => {\n    if (value === 'true' || value === true) {\n      return true;\n    }\n    if (value === 'false' || value === false) {\n      return false;\n    }\n    return undefined;\n  })\n  skipPagination: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PublicRouteModules.html":{"url":"modules/PublicRouteModules.html","title":"module - PublicRouteModules","body":"\n                   \n\n\n\n\n    Modules\n    PublicRouteModules\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PublicRouteModules\n\n\n\ncluster_PublicRouteModules_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nPublicRouteModules\n\nPublicRouteModules\n\nPublicRouteModules -->\n\nAuthModule->PublicRouteModules\n\n\n\n\n\nTodosModule\n\nTodosModule\n\nPublicRouteModules -->\n\nTodosModule->PublicRouteModules\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPublicRouteModules -->\n\nUsersModule->PublicRouteModules\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/router/routes/public.routes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthControllerPublic\n                        \n                        \n                            TodosControllerPublic\n                        \n                        \n                            UsersControllerPublic\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TodosModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from 'src/modules/auth/auth.module';\nimport { AuthControllerPublic } from 'src/modules/auth/controllers/public.auth.controller';\nimport { TodosControllerPublic } from 'src/modules/todos/controllers/public.todos.controller';\nimport { TodosModule } from 'src/modules/todos/todos.module';\nimport { UsersControllerPublic } from 'src/modules/users/controllers/public.users.controller';\nimport { UsersModule } from 'src/modules/users/users.module';\n\n@Module({\n  imports: [AuthModule, TodosModule, UsersModule],\n  controllers: [\n    AuthControllerPublic,\n    TodosControllerPublic,\n    UsersControllerPublic,\n  ],\n})\nexport class PublicRouteModules {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PublicUserGuard.html":{"url":"guards/PublicUserGuard.html","title":"guard - PublicUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PublicUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/put-user.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Protected\n                                    Async\n                                verifyTokenAvailabilityAndAddUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(_jwtService: JwtService, _dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/put-user.guard.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/put-user.guard.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        verifyTokenAvailabilityAndAddUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAvailabilityAndAddUser(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/put-user.guard.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserRole } from 'src/constants/user-roles.constant';\nimport { DataSource } from 'typeorm';\nimport { Admins } from 'src/modules/admins/entities/admin.entity';\nimport { Users } from 'src/modules/users/entities/user.entity';\n\nexport interface IJwtPayload {\n  id: number;\n  email: string;\n  role_id: number;\n  role: string;\n}\n\n@Injectable()\nexport class PublicUserGuard implements CanActivate {\n  constructor(\n    private readonly _jwtService: JwtService,\n    private readonly _dataSource: DataSource,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const ctx = context.switchToHttp();\n\n    const request = ctx.getRequest();\n    // const response = ctx.getResponse();\n\n    try {\n      await this.verifyTokenAvailabilityAndAddUser(request);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  protected async verifyTokenAvailabilityAndAddUser(request: Request) {\n    const [tokenType, token] = request.headers?.authorization?.split(' ') ?? [];\n\n    // console.log({ tokenType, token });\n\n    if (!token || tokenType !== 'Bearer')\n      throw new UnauthorizedException('token unavailable');\n\n    const decodedData = this._jwtService.verify(token, {\n      secret: process.env.JWT_SECRET,\n    });\n\n    const user = await this._dataSource.manager.findOne(Users, {\n      where: {\n        id: decodedData.id,\n        email: decodedData.email,\n      },\n      select: {\n        role: {\n          id: true,\n          role: true,\n        },\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    if (!user) throw new UnauthorizedException('unauthorized access');\n\n    if (user.role.role !== UserRole.USER)\n      throw new UnauthorizedException('unauthorized access');\n\n    request['user'] = user;\n\n    return;\n  }\n}\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n  constructor(\n    private readonly _jwtService: JwtService,\n    private readonly _dataSource: DataSource,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const ctx = context.switchToHttp();\n\n    const request = ctx.getRequest();\n    // const response = ctx.getResponse();\n\n    try {\n      await this.verifyTokenAvailabilityAndAddUser(request);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  protected async verifyTokenAvailabilityAndAddUser(request: Request) {\n    const [tokenType, token] = request.headers?.authorization?.split(' ') ?? [];\n\n    // console.log({ tokenType, token });\n\n    if (!token || tokenType !== 'Bearer')\n      throw new UnauthorizedException('token unavailable');\n\n    const decodedData = this._jwtService.verify(token, {\n      secret: process.env.JWT_SECRET,\n    });\n\n    const admin = await this._dataSource.manager.findOne(Admins, {\n      where: {\n        id: decodedData.id,\n        email: decodedData.email,\n      },\n      select: {\n        role: {\n          id: true,\n          role: true,\n        },\n      },\n      relations: {\n        role: true,\n      },\n    });\n\n    if (!admin) throw new UnauthorizedException('unauthorized access');\n\n    if (admin.role.role !== UserRole.ADMIN)\n      throw new UnauthorizedException('unauthorized access');\n\n    request['user'] = admin;\n\n    return;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseInterceptor.html":{"url":"classes/ResponseInterceptor.html","title":"class - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common-modules/response/response.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common-modules/response/response.interceptor.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common-modules/response/response.interceptor.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Request, Response } from 'express';\nimport { IPaginationMetadata } from './interfaces/pagination-metadata.interface';\nimport { PaginatedQueryDto } from '../swagger-docs/paginate-query.dto';\nimport { plainToInstance } from 'class-transformer';\n\nexport class ResponseInterceptor implements NestInterceptor {\n  constructor(@Inject() private readonly _reflector: Reflector) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next.handle().pipe(\n      map((dataFromService) => {\n        const ctx = context.switchToHttp();\n        const response: Response = ctx.getResponse();\n        const request = ctx.getRequest();\n\n        const requestQuery = plainToInstance(PaginatedQueryDto, request.query);\n\n        const message = this._reflector.get('message', context.getHandler());\n        const showPagination = this._reflector.get(\n          'showPagination',\n          context.getHandler(),\n        );\n\n        let data: any, count: number;\n        if (Array.isArray(dataFromService)) {\n          [data, count] = dataFromService;\n        } else {\n          data = dataFromService;\n        }\n\n        if (!showPagination || count == null) {\n          return {\n            message: message ?? 'Request Success',\n            status: response.statusCode,\n            success: response.statusCode = this.totalPage ? null : this.page + 1;\n            },\n            skipPagination: false,\n          };\n        }\n\n        return {\n          message: message ?? 'Request Success',\n          status: response.statusCode,\n          success: response.statusCode \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResponseModule.html":{"url":"modules/ResponseModule.html","title":"module - ResponseModule","body":"\n                   \n\n\n\n\n    Modules\n    ResponseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common-modules/response/respose.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { ClassSerializerInterceptor, Module } from '@nestjs/common';\nimport { ResponseInterceptor } from './response.interceptor';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\n\n// READ `Binding Interceptors` for using it globally from here: https://docs.nestjs.com/interceptors#binding-interceptors\n@Module({\n  controllers: [],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ResponseInterceptor,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ClassSerializerInterceptor,\n    },\n  ],\n})\nexport class ResponseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Roles.html":{"url":"entities/Roles.html","title":"entity - Roles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(UserRole)@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/roles/entities/role.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { DBBaseEntity } from 'src/common-modules/entities/base.entity';\nimport { UserRole } from 'src/constants/user-roles.constant';\nimport { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class Roles extends DBBaseEntity {\n  @IsNotEmpty()\n  @IsEnum(UserRole)\n  @Column({ nullable: false })\n  role: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/roles/controllers/admin.roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAllPaginated\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createRoleDto: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @PutAdmin()@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/roles/controllers/admin.roles.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRoleDto\n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAllPaginated\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllPaginated(queryParams: PaginatedQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @PutAdmin()@ShowPagination()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/roles/controllers/admin.roles.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryParams\n                                            \n                                                            PaginatedQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @PutAdmin()@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/roles/controllers/admin.roles.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateRoleDto: UpdateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @PutAdmin()@Patch('update/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/roles/controllers/admin.roles.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoleDto\n                                            \n                                                            UpdateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { RolesService } from '../roles.service';\nimport { CreateRoleDto } from '../dto/create-role.dto';\nimport { UpdateRoleDto } from '../dto/update-role.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { PaginatedQueryDto } from 'src/common-modules/swagger-docs/paginate-query.dto';\nimport { ShowPagination } from 'src/common-modules/response/decorators/response.decorator';\nimport { PutAdmin } from 'src/modules/auth/decorator/put-user.decorator';\n// import { ApiTags } from '@nestjs/swagger';\n\n// @Controller(`${ControllerPrefix.ADMIN}/roles`)\n\n@ApiTags('Roles')\n@Controller('roles')\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @PutAdmin()\n  @Post('create')\n  create(@Body() createRoleDto: CreateRoleDto) {\n    return this.rolesService.create(createRoleDto);\n  }\n\n  @PutAdmin()\n  @ShowPagination()\n  @Get()\n  findAllPaginated(@Query() queryParams: PaginatedQueryDto) {\n    return this.rolesService.findPaginated(queryParams);\n  }\n\n  @PutAdmin()\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @PutAdmin()\n  @Patch('update/:id')\n  update(@Param('id') id: string, @Body() updateRoleDto: UpdateRoleDto) {\n    return this.rolesService.update(+id, updateRoleDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RolesModule_exports\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Roles } from './entities/role.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Roles])],\n  providers: [RolesService],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPaginated\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/roles/roles.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createRoleDto: CreateRoleDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/roles/roles.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRoleDto\n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/roles/roles.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findPaginated\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPaginated(queryParams: PaginatedQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/roles/roles.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryParams\n                                            \n                                                            PaginatedQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/roles/roles.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateRoleDto: UpdateRoleDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/roles/roles.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoleDto\n                                            \n                                                            UpdateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { PaginatedQueryDto } from 'src/common-modules/swagger-docs/paginate-query.dto';\nimport { Repository } from 'typeorm';\nimport { Roles } from './entities/role.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { findAllPaginatedData } from 'src/common-modules/utils/functions/common-query';\nimport { UserRole } from 'src/constants/user-roles.constant';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  async create(createRoleDto: CreateRoleDto) {\n    const existingRoles = await this.rolesRepository.findOne({\n      where: {\n        role: createRoleDto.name.toLowerCase() as UserRole,\n      },\n    });\n\n    if (existingRoles) {\n      throw new ConflictException('role already exists');\n    }\n\n    const preparedRolesData = this.rolesRepository.create({\n      role: createRoleDto.name as UserRole,\n    });\n\n    await this.rolesRepository.save(preparedRolesData);\n\n    return preparedRolesData;\n  }\n\n  async findPaginated(queryParams: PaginatedQueryDto) {\n    const data = await findAllPaginatedData({\n      ...queryParams,\n      repo: this.rolesRepository,\n      validSearchFields: ['role'],\n      validSortFields: ['role', 'createdAt'],\n      queryOptions: {},\n    });\n\n    return data;\n  }\n\n  async findOne(id: number) {\n    return await this.rolesRepository.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async update(id: number, updateRoleDto: UpdateRoleDto) {\n    const preparedUpdateRoleData = this.rolesRepository.create({\n      role: updateRoleDto.name as UserRole,\n    });\n\n    const afterUpdate = await this.rolesRepository.update(\n      id,\n      preparedUpdateRoleData,\n    );\n\n    let newData: Roles;\n    if (afterUpdate.affected > 0) {\n      newData = await this.rolesRepository.findOne({ where: { id } });\n    }\n\n    return newData;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} role`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RouterModule.html":{"url":"modules/RouterModule.html","title":"module - RouterModule","body":"\n                   \n\n\n\n\n    Modules\n    RouterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RouterModule\n\n\n\ncluster_RouterModule_imports\n\n\n\n\nAdminRouteModules\n\nAdminRouteModules\n\n\n\nRouterModule\n\nRouterModule\n\nRouterModule -->\n\nAdminRouteModules->RouterModule\n\n\n\n\n\nNestRouter\n\nNestRouter\n\nRouterModule -->\n\nNestRouter->RouterModule\n\n\n\n\n\nPublicRouteModules\n\nPublicRouteModules\n\nRouterModule -->\n\nPublicRouteModules->RouterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/router/router.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AdminRouteModules\n                        \n                        \n                            NestRouter\n                        \n                        \n                            PublicRouteModules\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RouterModule as NestRouter } from '@nestjs/core';\nimport { AdminRouteModules } from './routes/admin.routes.module';\nimport { PublicRouteModules } from './routes/public.routes.module';\n\n@Module({\n  imports: [\n    AdminRouteModules,\n    PublicRouteModules,\n    NestRouter.register([\n      {\n        path: 'api/admin',\n        module: AdminRouteModules,\n      },\n      {\n        path: 'api/public-user',\n        module: PublicRouteModules,\n      },\n    ]),\n  ],\n})\nexport class RouterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeedTodoDatabase.html":{"url":"injectables/SeedTodoDatabase.html","title":"injectable - SeedTodoDatabase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SeedTodoDatabase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commands/todo-seed.command.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_loggerService: MyLogger, _dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/commands/todo-seed.command.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _loggerService\n                                                  \n                                                        \n                                                                        MyLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Command({command: 'seed-todos', describe: 'A command to seed todos'})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/todo-seed.command.ts:19\n                        \n                    \n\n\n            \n                \n                        Todos Seeder *\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MyLogger } from 'src/common-modules/logger.service';\nimport { DataSource } from 'typeorm';\nimport { Todos } from 'src/modules/todos/entities/todos.entity';\nimport { Command } from 'nestjs-command';\nimport { Injectable } from '@nestjs/common';\nimport { Users } from 'src/modules/users/entities/user.entity';\n\n@Injectable()\nexport class SeedTodoDatabase {\n  constructor(\n    private readonly _loggerService: MyLogger,\n    private readonly _dataSource: DataSource,\n  ) {}\n\n  /****************\n   * Todos Seeder *\n   ****************/\n  @Command({ command: 'seed-todos', describe: 'A command to seed todos' })\n  async run(): Promise {\n    const todosJson: {\n      title: string;\n      description: string;\n    }[] = require('./todos-json/todos.json');\n    const SeedTodosContext = 'todos-seed';\n\n    const queryRunner = this._dataSource.createQueryRunner();\n\n    const users = await queryRunner.manager.find(Users);\n\n    if (!users) {\n      throw new Error('No exisitng users to create relation');\n    }\n\n    try {\n      this._loggerService.log('Starting Todos Seed', SeedTodosContext);\n      for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeedUsersDatabase.html":{"url":"injectables/SeedUsersDatabase.html","title":"injectable - SeedUsersDatabase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SeedUsersDatabase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commands/user-seed.command.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_dataSource: DataSource, _loggerService: MyLogger)\n                    \n                \n                        \n                            \n                                Defined in src/commands/user-seed.command.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _loggerService\n                                                  \n                                                        \n                                                                        MyLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Command({command: 'seed-users', describe: 'A command to seed users'})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/user-seed.command.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DataSource } from 'typeorm';\nimport { Command } from 'nestjs-command';\nimport { Injectable } from '@nestjs/common';\nimport { seedAdmin, seedUserRoles, seedUsers } from './seed-helper';\nimport { MyLogger } from 'src/common-modules/logger.service';\n\n@Injectable()\nexport class SeedUsersDatabase {\n  // private readonly _dataSource: DataSource\n  constructor(\n    private readonly _dataSource: DataSource,\n    private readonly _loggerService: MyLogger,\n  ) {\n    // this._dataSource = AppDataSource\n    // no such hassle, because we've used the same module configuration for typeorm in main.ts and cli.module.ts, we can directly inject data source here as well\n  }\n\n  @Command({ command: 'seed-users', describe: 'A command to seed users' })\n  async create(): Promise {\n    const queryRunner = this._dataSource.createQueryRunner();\n\n    const RoleAndUserSeedContext = 'role-user-seed';\n\n    try {\n      await seedUserRoles(queryRunner, this._loggerService);\n      await seedUsers(queryRunner, this._loggerService);\n      await seedAdmin(queryRunner, this._loggerService);\n    } catch (error) {\n      this._loggerService.error(\n        error?.message,\n        error?.stack,\n        RoleAndUserSeedContext,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Todos.html":{"url":"entities/Todos.html","title":"entity - Todos","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Todos\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todos/entities/todos.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                isCompleted\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/todos/entities/todos.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isCompleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_completed', default: false, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/todos/entities/todos.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/todos/entities/todos.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {nullable: false})@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/todos/entities/todos.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { DBBaseEntity } from 'src/common-modules/entities/base.entity';\nimport { Users } from 'src/modules/users/entities/user.entity';\nimport { Entity, Column, ManyToOne, JoinColumn } from 'typeorm';\n\n@Entity()\nexport class Todos extends DBBaseEntity {\n  @Column({ nullable: false })\n  title: string;\n\n  @Column({ nullable: false })\n  description: string;\n\n  @Column({ name: 'is_completed', default: false, nullable: false })\n  isCompleted: boolean;\n\n  @ManyToOne(() => Users, (user) => user.id, { nullable: false })\n  @JoinColumn({ name: 'user_id' })\n  user: Users;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TodosControllerAdmin.html":{"url":"controllers/TodosControllerAdmin.html","title":"controller - TodosControllerAdmin","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TodosControllerAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todos/controllers/admin.todos.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAllPaginated\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: Users, createTodoDto: CreateTodosDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new todo'})@Post('create')@PutAdmin()@ResponseMessage('Todo create success')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/admin.todos.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createTodoDto\n                                            \n                                                            CreateTodosDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        findAllPaginated\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllPaginated(userId: string, searchParams: PaginatedQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'List all todos'})@Get('user/:userId')@ResponseMessage('Todos fetch success')@ShowPagination()@PutAdmin()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/admin.todos.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                searchParams\n                                            \n                                                            PaginatedQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(todosId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'List a todos by id'})@ResponseMessage('Todo fetch success')@Get(':todosId')@PutAdmin()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/admin.todos.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                todosId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(user: Users, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a todo'})@ApiExcludeEndpoint()@ResponseMessage('Todo delete success')@Delete(':id')@PutAdmin()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/admin.todos.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(user: Users, id: string, updateTodosDto: UpdateTodosDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a todo'})@ResponseMessage('Update todo success')@Patch(':id')@PutAdmin()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/admin.todos.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTodosDto\n                                            \n                                                            UpdateTodosDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ApiExcludeEndpoint, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { CreateTodosDto } from '../dto/create-todos.dto';\nimport { UpdateTodosDto } from '../dto/update-todos.dto';\nimport {\n  ResponseMessage,\n  ShowPagination,\n} from 'src/common-modules/response/decorators/response.decorator';\nimport { PutAdmin } from 'src/modules/auth/decorator/put-user.decorator';\nimport { Users } from 'src/modules/users/entities/user.entity';\nimport { User } from 'src/common-modules/request/decorators/request.decorator';\nimport { PaginatedQueryDto } from 'src/common-modules/swagger-docs/paginate-query.dto';\nimport { TodosServiceAdmin } from '../services/admin.todos.service';\n\n@ApiTags('Todos')\n// @Controller(`${ControllerPrefix.ADMIN}/todos`)\n@Controller('todos')\nexport class TodosControllerAdmin {\n  constructor(private readonly todosService: TodosServiceAdmin) {}\n\n  // look at https://stackoverflow.com/questions/62700524/nest-js-only-accept-fields-that-are-specified-in-a-dto\n  @ApiOperation({ summary: 'Create a new todo' })\n  @Post('create')\n  @PutAdmin()\n  @ResponseMessage('Todo create success')\n  // below pipe will only validate and put it into body whose dtos are created is validated\n  // @UsePipes(new ValidationPipe({ whitelist: true }))\n  // or look at main.ts to see how validaiton pipe can be used globally\n  create(@User() user: Users, @Body() createTodoDto: CreateTodosDto) {\n    return this.todosService.create(user, createTodoDto);\n  }\n\n  @ApiOperation({ summary: 'List all todos' })\n  @Get('user/:userId')\n  @ResponseMessage('Todos fetch success')\n  @ShowPagination()\n  @PutAdmin()\n  findAllPaginated(\n    @Param('userId') userId: string,\n    @Query() searchParams: PaginatedQueryDto,\n  ): {} {\n    return this.todosService.findAllPaginated({\n      userId: +userId,\n      searchParams,\n    });\n  }\n\n  @ApiOperation({ summary: 'List a todos by id' })\n  @ResponseMessage('Todo fetch success')\n  @Get(':todosId')\n  @PutAdmin()\n  findOne(@Param('todosId') todosId: string) {\n    return this.todosService.findOne(+todosId);\n  }\n\n  @ApiOperation({ summary: 'Update a todo' })\n  @ResponseMessage('Update todo success')\n  @Patch(':id')\n  @PutAdmin()\n  update(\n    @User() user: Users,\n    @Param('id') id: string,\n    @Body() updateTodosDto: UpdateTodosDto,\n  ) {\n    return this.todosService.update(user, +id, updateTodosDto);\n  }\n\n  @ApiOperation({ summary: 'Delete a todo' })\n  @ApiExcludeEndpoint() // this will hide the endpoint from swagger\n  @ResponseMessage('Todo delete success')\n  @Delete(':id')\n  @PutAdmin()\n  remove(@User() user: Users, @Param('id') id: string) {\n    return this.todosService.remove(user, +id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TodosControllerPublic.html":{"url":"controllers/TodosControllerPublic.html","title":"controller - TodosControllerPublic","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TodosControllerPublic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todos/controllers/public.todos.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findAllPaginated\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: Users, createTodoDto: CreateTodosDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new todo'})@Post('create')@PutPublicUser()@ResponseMessage('Todo create success')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/public.todos.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createTodoDto\n                                            \n                                                            CreateTodosDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findAllPaginated\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllPaginated(user: Users, searchParams: PaginatedQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @PutPublicUser()@ResponseMessage('Todos fetch success')@ShowPagination()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/public.todos.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                searchParams\n                                            \n                                                            PaginatedQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(user: Users, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'List a todos by id'})@ResponseMessage('Todo fetch success')@Get(':id')@PutPublicUser()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/public.todos.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(user: Users, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a todo'})@ResponseMessage('Todo delete success')@Delete(':id')@PutPublicUser()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/public.todos.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(user: Users, id: string, updateTodosDto: UpdateTodosDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a todo'})@ResponseMessage('Update todo success')@Patch(':id')@PutPublicUser()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todos/controllers/public.todos.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTodosDto\n                                            \n                                                            UpdateTodosDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { CreateTodosDto } from '../dto/create-todos.dto';\nimport { UpdateTodosDto } from '../dto/update-todos.dto';\nimport {\n  ResponseMessage,\n  ShowPagination,\n} from 'src/common-modules/response/decorators/response.decorator';\nimport { TodosServicePublic } from '../services/public.todos.service';\nimport { PutPublicUser } from 'src/modules/auth/decorator/put-user.decorator';\nimport { PaginatedQueryDto } from 'src/common-modules/swagger-docs/paginate-query.dto';\nimport { User } from 'src/common-modules/request/decorators/request.decorator';\nimport { Users } from 'src/modules/users/entities/user.entity';\n\n@ApiTags('Todos')\n// @Controller(`${ControllerPrefix.PUBLIC}/todos`)\n@Controller('todos')\nexport class TodosControllerPublic {\n  constructor(private readonly todosService: TodosServicePublic) {}\n\n  @ApiOperation({ summary: 'Create a new todo' })\n  @Post('create')\n  @PutPublicUser()\n  @ResponseMessage('Todo create success')\n  create(@User() user: Users, @Body() createTodoDto: CreateTodosDto) {\n    return this.todosService.create(user, createTodoDto);\n  }\n\n  @PutPublicUser()\n  @ResponseMessage('Todos fetch success')\n  @ShowPagination()\n  @Get()\n  findAllPaginated(\n    @User() user: Users,\n    @Query() searchParams: PaginatedQueryDto,\n  ): {} {\n    return this.todosService.findPaginated({\n      user,\n      searchParams,\n    });\n  }\n\n  @ApiOperation({ summary: 'List a todos by id' })\n  @ResponseMessage('Todo fetch success')\n  @Get(':id')\n  @PutPublicUser()\n  findOne(@User() user: Users, @Param('id') id: string) {\n    return this.todosService.findOne(user, +id);\n  }\n\n  @ApiOperation({ summary: 'Update a todo' })\n  @ResponseMessage('Update todo success')\n  @Patch(':id')\n  @PutPublicUser()\n  update(\n    @User() user: Users,\n    @Param('id') id: string,\n    @Body() updateTodosDto: UpdateTodosDto,\n  ) {\n    return this.todosService.update(user, +id, updateTodosDto);\n  }\n\n  @ApiOperation({ summary: 'Delete a todo' })\n  // @ApiExcludeEndpoint() // this will hide the endpoint from swagger\n  @ResponseMessage('Todo delete success')\n  @Delete(':id')\n  @PutPublicUser()\n  remove(@User() user: Users, @Param('id') id: string) {\n    return this.todosService.remove(user, +id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TodosModule.html":{"url":"modules/TodosModule.html","title":"module - TodosModule","body":"\n                   \n\n\n\n\n    Modules\n    TodosModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TodosModule\n\n\n\ncluster_TodosModule_exports\n\n\n\ncluster_TodosModule_providers\n\n\n\n\nTodosServiceAdmin \n\nTodosServiceAdmin \n\n\n\nTodosServicePublic \n\nTodosServicePublic \n\n\n\nTodosModule\n\nTodosModule\n\nTodosServiceAdmin  -->\n\nTodosModule->TodosServiceAdmin \n\n\n\nTodosServicePublic  -->\n\nTodosModule->TodosServicePublic \n\n\n\n\n\nTodosServiceAdmin\n\nTodosServiceAdmin\n\nTodosModule -->\n\nTodosServiceAdmin->TodosModule\n\n\n\n\n\nTodosServicePublic\n\nTodosServicePublic\n\nTodosModule -->\n\nTodosServicePublic->TodosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/todos/todos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TodosServiceAdmin\n                        \n                        \n                            TodosServicePublic\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TodosServiceAdmin\n                        \n                        \n                            TodosServicePublic\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Todos } from './entities/todos.entity';\nimport { TodosServicePublic } from './services/public.todos.service';\nimport { TodosServiceAdmin } from './services/admin.todos.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Todos])],\n  providers: [TodosServiceAdmin, TodosServicePublic],\n  exports: [TodosServiceAdmin, TodosServicePublic],\n})\nexport class TodosModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodosServiceAdmin.html":{"url":"injectables/TodosServiceAdmin.html","title":"injectable - TodosServiceAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodosServiceAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todos/services/admin.todos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAllPaginated\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todosRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/todos/services/admin.todos.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todosRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: Users, createTodoDto: CreateTodosDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/admin.todos.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createTodoDto\n                                            \n                                                            CreateTodosDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllPaginated\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllPaginated(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/admin.todos.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(todosId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/admin.todos.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                todosId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(user: Users, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/admin.todos.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(user: Users, id: Number, updateTodosDto: UpdateTodosDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/admin.todos.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            Number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTodosDto\n                                            \n                                                            UpdateTodosDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Todos } from '../entities/todos.entity';\nimport { Repository } from 'typeorm';\nimport { Users } from 'src/modules/users/entities/user.entity';\nimport { CreateTodosDto } from '../dto/create-todos.dto';\nimport { UpdateTodosDto } from '../dto/update-todos.dto';\nimport { PaginatedQueryDto } from 'src/common-modules/swagger-docs/paginate-query.dto';\nimport { findAllPaginatedData } from 'src/common-modules/utils/functions/common-query';\n\n@Injectable()\nexport class TodosServiceAdmin {\n  constructor(\n    @InjectRepository(Todos)\n    private readonly todosRepository: Repository,\n  ) {}\n\n  create(user: Users, createTodoDto: CreateTodosDto) {\n    return {};\n  }\n\n  async findAllPaginated({\n    userId,\n    searchParams,\n  }: {\n    userId: number;\n    searchParams: PaginatedQueryDto;\n  }) {\n    const data = await findAllPaginatedData({\n      ...searchParams,\n      repo: this.todosRepository,\n      validSearchFields: [],\n      validSortFields: [],\n      queryOptions: {\n        where: {\n          user: {\n            id: userId,\n          },\n        },\n        select: {\n          id: true,\n          title: true,\n          deletedAt: true,\n          createdAt: true,\n          updatedAt: true,\n          isCompleted: true,\n        },\n      },\n    });\n\n    return data;\n  }\n\n  async findOne(todosId: number) {\n    const data = await this.todosRepository.findOne({\n      where: {\n        id: todosId,\n      },\n    });\n\n    return data;\n  }\n\n  update(user: Users, id: Number, updateTodosDto: UpdateTodosDto) {\n    return {};\n  }\n\n  remove(user: Users, id: number) {\n    return {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodosServicePublic.html":{"url":"injectables/TodosServicePublic.html","title":"injectable - TodosServicePublic","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodosServicePublic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todos/services/public.todos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPaginated\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todosRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/todos/services/public.todos.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todosRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: Users, createTodosDto: CreateTodosDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/public.todos.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createTodosDto\n                                            \n                                                            CreateTodosDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(user: Users, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/public.todos.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findPaginated\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPaginated(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/public.todos.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(user: Users, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/public.todos.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(user: Users, id: number, updateTodosDto: UpdateTodosDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todos/services/public.todos.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTodosDto\n                                            \n                                                            UpdateTodosDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Todos } from '../entities/todos.entity';\nimport { CreateTodosDto } from '../dto/create-todos.dto';\nimport { UpdateTodosDto } from '../dto/update-todos.dto';\nimport { Users } from 'src/modules/users/entities/user.entity';\nimport { PaginatedQueryDto } from 'src/common-modules/swagger-docs/paginate-query.dto';\nimport { findAllPaginatedData } from 'src/common-modules/utils/functions/common-query';\n\n@Injectable()\nexport class TodosServicePublic {\n  constructor(\n    @InjectRepository(Todos)\n    private todosRepository: Repository,\n  ) {}\n\n  async create(user: Users, createTodosDto: CreateTodosDto): Promise {\n    const newTodo = this.todosRepository.create({\n      ...createTodosDto,\n      user: {\n        id: user.id,\n      },\n    });\n\n    await this.todosRepository.save(newTodo);\n\n    return newTodo;\n  }\n\n  async findPaginated({\n    user,\n    searchParams,\n  }: {\n    user: Users;\n    searchParams: PaginatedQueryDto;\n  }): Promise {\n    const data = await findAllPaginatedData({\n      ...searchParams,\n      repo: this.todosRepository,\n      validSearchFields: ['title'],\n      validSortFields: ['title', 'createdAt', 'updatedAt'],\n      queryOptions: {\n        where: {\n          user: {\n            id: user.id,\n          },\n        },\n        select: {\n          id: true,\n          isCompleted: true,\n          title: true,\n        },\n      },\n    });\n\n    return data;\n  }\n\n  async findOne(user: Users, id: number): Promise {\n    const data = await this.todosRepository.findOne({\n      where: {\n        id,\n        user: {\n          id: user.id,\n        },\n      },\n      relations: {\n        user: true,\n      },\n    });\n\n    if (!data) {\n      throw new NotFoundException('todo not found');\n    }\n\n    return data;\n  }\n\n  async update(\n    user: Users,\n    id: number,\n    updateTodosDto: UpdateTodosDto,\n  ): Promise {\n    const afterUpdate = await this.todosRepository.update(\n      {\n        id,\n        user: {\n          id: user.id,\n        },\n      },\n      updateTodosDto,\n    );\n\n    if (afterUpdate.affected  {\n    await this.todosRepository.delete({ id, user: { id: user.id } });\n\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAdminDto.html":{"url":"classes/UpdateAdminDto.html","title":"class - UpdateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/admins/dto/update-admin-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: ''})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:12\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UpdateUserDto,\n  UpdateUserPasswordDto,\n} from 'src/modules/users/dto/update-user.dto';\n\nexport class UpdateAdminDto extends UpdateUserDto {}\n\nexport class UpdateAdminPasswordDto extends UpdateUserPasswordDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAdminPasswordDto.html":{"url":"classes/UpdateAdminPasswordDto.html","title":"class - UpdateAdminPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAdminPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/admins/dto/update-admin-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            UpdateUserPasswordDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: ''})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserPasswordDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserPasswordDto:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: ''})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserPasswordDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserPasswordDto:22\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UpdateUserDto,\n  UpdateUserPasswordDto,\n} from 'src/modules/users/dto/update-user.dto';\n\nexport class UpdateAdminDto extends UpdateUserDto {}\n\nexport class UpdateAdminPasswordDto extends UpdateUserPasswordDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/roles/dto/update-role.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(CreateRoleDto, ['name'])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CreateRoleDto } from './create-role.dto';\n\nexport class UpdateRoleDto extends PickType(CreateRoleDto, ['name']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodosDto.html":{"url":"classes/UpdateTodosDto.html","title":"class - UpdateTodosDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodosDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todos/dto/update-todos.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTodosDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTodosDto } from './create-todos.dto';\n\n// partial type import from swagger instead of mapped types also puts all form the CreateTodosDto\nexport class UpdateTodosDto extends PartialType(CreateTodosDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: ''})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    type: 'string',\n    example: '',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  name: string;\n}\n\nexport class UpdateUserPasswordDto {\n  @ApiProperty({\n    type: 'string',\n    example: '',\n  })\n  @IsString()\n  @IsNotEmpty()\n  oldPassword: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPasswordDto.html":{"url":"classes/UpdateUserPasswordDto.html","title":"class - UpdateUserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: ''})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: ''})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    type: 'string',\n    example: '',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  name: string;\n}\n\nexport class UpdateUserPasswordDto {\n  @ApiProperty({\n    type: 'string',\n    example: '',\n  })\n  @IsString()\n  @IsNotEmpty()\n  oldPassword: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Users.html":{"url":"entities/Users.html","title":"entity - Users","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, role => role.id, {nullable: false})@JoinColumn({name: 'role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { Roles } from 'src/modules/roles/entities/role.entity';\nimport { UsersBaseEntity } from 'src/common-modules/entities/user-base.entity';\n\n@Entity()\nexport class Users extends UsersBaseEntity {\n  @ManyToOne(() => Roles, (role) => role.id, { nullable: false })\n  @JoinColumn({ name: 'role_id' })\n  role: Roles;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersBaseEntity.html":{"url":"classes/UsersBaseEntity.html","title":"class - UsersBaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersBaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common-modules/entities/user-base.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DBBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/entities/user-base.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/entities/user-base.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common-modules/entities/user-base.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         DBBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         DBBaseEntity:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamptz', name: 'deleted_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         DBBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         DBBaseEntity:20\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         DBBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         DBBaseEntity:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamptz', name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         DBBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         DBBaseEntity:17\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()@BeforeUpdate()\n                \n            \n\n                    \n                        \n                            Defined in src/common-modules/entities/user-base.entity.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DBBaseEntity } from 'src/common-modules/entities/base.entity';\nimport { BeforeInsert, BeforeUpdate, Column } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\nimport { Exclude } from 'class-transformer';\n\nexport class UsersBaseEntity extends DBBaseEntity {\n  @Column({ nullable: false })\n  name: string;\n\n  @Column({ nullable: false, unique: true })\n  email: string;\n\n  @Exclude()\n  @Column({ nullable: false })\n  password: string;\n\n  // @ManyToOne(() => Roles, (role) => role.id, { nullable: false })\n  // @JoinColumn({ name: 'role_id' })\n  // role: Roles;\n\n  @BeforeInsert()\n  @BeforeUpdate()\n  async hashPassword() {\n    if (this.password) {\n      this.password = await bcrypt.hash(this.password, 10);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersControllerAdmin.html":{"url":"controllers/UsersControllerAdmin.html","title":"controller - UsersControllerAdmin","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersControllerAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/controllers/admin.users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/controllers/admin.users.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/controllers/admin.users.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/controllers/admin.users.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiExcludeEndpoint()@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/controllers/admin.users.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/controllers/admin.users.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { ApiExcludeEndpoint, ApiTags } from '@nestjs/swagger';\nimport { UsersServiceAdmin } from '../services/admin.users.service';\n\n@ApiTags('Users')\n// @Controller(`${ControllerPrefix.ADMIN}/users`)\n@Controller('users')\nexport class UsersControllerAdmin {\n  constructor(private readonly usersService: UsersServiceAdmin) {}\n\n  @Post('create')\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @ApiExcludeEndpoint()\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersControllerPublic.html":{"url":"controllers/UsersControllerPublic.html","title":"controller - UsersControllerPublic","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersControllerPublic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/controllers/public.users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                register\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/controllers/public.users.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(user: Users, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @PutPublicUser()@Patch('update/me')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/controllers/public.users.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Patch } from '@nestjs/common';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UsersServicePublic } from '../services/public.users.service';\nimport { User } from 'src/common-modules/request/decorators/request.decorator';\nimport { Users } from '../entities/user.entity';\nimport { PutPublicUser } from 'src/modules/auth/decorator/put-user.decorator';\n\n@ApiTags('Users')\n// @Controller(`${ControllerPrefix.PUBLIC}/users`)\n@Controller('users')\nexport class UsersControllerPublic {\n  constructor(private readonly usersService: UsersServicePublic) {}\n\n  @Post('register')\n  register(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @PutPublicUser()\n  @Patch('update/me')\n  update(@User() user: Users, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update({ user, updateUserDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersServiceAdmin \n\nUsersServiceAdmin \n\n\n\nUsersServicePublic \n\nUsersServicePublic \n\n\n\nUsersModule\n\nUsersModule\n\nUsersServiceAdmin  -->\n\nUsersModule->UsersServiceAdmin \n\n\n\nUsersServicePublic  -->\n\nUsersModule->UsersServicePublic \n\n\n\n\n\nUsersServiceAdmin\n\nUsersServiceAdmin\n\nUsersModule -->\n\nUsersServiceAdmin->UsersModule\n\n\n\n\n\nUsersServicePublic\n\nUsersServicePublic\n\nUsersModule -->\n\nUsersServicePublic->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersServiceAdmin\n                        \n                        \n                            UsersServicePublic\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersServiceAdmin\n                        \n                        \n                            UsersServicePublic\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from './entities/user.entity';\nimport { UsersServiceAdmin } from './services/admin.users.service';\nimport { UsersServicePublic } from './services/public.users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users])],\n  providers: [UsersServiceAdmin, UsersServicePublic],\n  exports: [UsersServiceAdmin, UsersServicePublic],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersServiceAdmin.html":{"url":"injectables/UsersServiceAdmin.html","title":"injectable - UsersServiceAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersServiceAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/admin.users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/admin.users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/services/admin.users.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/services/admin.users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/services/admin.users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/services/admin.users.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/services/admin.users.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Users } from '../entities/user.entity';\n\n@Injectable()\nexport class UsersServiceAdmin {\n  constructor(\n    @InjectRepository(Users)\n    private usersRepository: Repository,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    try {\n      await this.usersRepository.insert(createUserDto);\n\n      return {\n        message: 'User Creation success',\n        status: 200,\n        success: true,\n        data: createUserDto,\n      };\n    } catch (error) {\n      return {\n        message: error.message,\n        success: false,\n        data: null,\n      };\n    }\n  }\n\n  async findAll() {\n    const users = await this.usersRepository.find({\n      select: {\n        createdAt: true,\n        deletedAt: true,\n        updatedAt: true,\n        email: true,\n        id: true,\n        name: true,\n      },\n    });\n\n    return users;\n  }\n\n  async findOne(id: number) {\n    const user = await this.usersRepository.findOne({\n      where: {\n        id,\n      },\n      select: {\n        createdAt: true,\n        deletedAt: true,\n        updatedAt: true,\n        email: true,\n        id: true,\n        name: true,\n      },\n    });\n\n    return user;\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersServicePublic.html":{"url":"injectables/UsersServicePublic.html","title":"injectable - UsersServicePublic","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersServicePublic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/public.users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                prepareUserCreateData\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, _dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/public.users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/services/public.users.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        prepareUserCreateData\n                        \n                    \n                \n            \n            \n                \n                        \n                    prepareUserCreateData(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/services/public.users.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/services/public.users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { DataSource, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Users } from '../entities/user.entity';\nimport { Roles } from 'src/modules/roles/entities/role.entity';\nimport { UserRole } from 'src/constants/user-roles.constant';\nimport { Admins } from 'src/modules/admins/entities/admin.entity';\n\n@Injectable()\nexport class UsersServicePublic {\n  constructor(\n    @InjectRepository(Users)\n    private usersRepository: Repository,\n    private readonly _dataSource: DataSource,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const [existingUserInUsers, existingUserInAdmins] = await Promise.all([\n      this.usersRepository.findOne({\n        where: {\n          email: createUserDto.email,\n        },\n      }),\n      this._dataSource.manager.findOne(Admins, {\n        where: {\n          email: createUserDto.email,\n        },\n      }),\n    ]);\n\n    if (existingUserInUsers || existingUserInAdmins)\n      throw new ConflictException('user already exists with this email');\n\n    const preparedData = await this.prepareUserCreateData(createUserDto);\n\n    const user = this.usersRepository.create(preparedData);\n\n    await this.usersRepository.save(user);\n\n    return user;\n  }\n\n  async update({\n    user,\n    updateUserDto,\n  }: {\n    user: Users;\n    updateUserDto: UpdateUserDto;\n  }) {\n    const afterUpdate = await this.usersRepository.update(\n      user.id,\n      updateUserDto,\n    );\n\n    if (afterUpdate.affected \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/authDto.html":{"url":"classes/authDto.html","title":"class - authDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  authDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'test@gmail.com'})@IsNotEmpty()@IsEmail()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Test@123'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class authDto {\n  @ApiProperty({\n    example: 'test@gmail.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  @IsString()\n  email: string;\n\n  @ApiProperty({ example: 'Test@123' })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/cli.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/commands/seed-helper.ts\n            \n            function\n            seedAdmin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/commands/seed-helper.ts\n            \n            function\n            seedUserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/commands/seed-helper.ts\n            \n            function\n            seedUsers\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/commands/todo-seed.command.ts\n            \n            injectable\n            SeedTodoDatabase\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/commands/todos-json/index.ts\n            \n            variable\n            jsonData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/commands/todos-json/index.ts\n            \n            variable\n            testFn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commands/user-seed.command.ts\n            \n            injectable\n            SeedUsersDatabase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common-modules/entities/base.entity.ts\n            \n            class\n            DBBaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common-modules/entities/user-base.entity.ts\n            \n            class\n            UsersBaseEntity\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common-modules/error/error.service.ts\n            \n            class\n            ErrorService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common-modules/logger.service.ts\n            \n            class\n            MyLogger\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/common-modules/request/decorators/request.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common-modules/response/decorators/response.decorator.ts\n            \n            function\n            ResponseMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common-modules/response/decorators/response.decorator.ts\n            \n            function\n            ShowPagination\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common-modules/response/interfaces/pagination-metadata.interface.ts\n            \n            interface\n            IPaginationMetadata\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common-modules/response/response.interceptor.ts\n            \n            class\n            ResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common-modules/swagger-docs/paginate-query.dto.ts\n            \n            class\n            PaginatedQueryDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/common-modules/utils/functions/common-query.ts\n            \n            function\n            findAllPaginatedData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common-modules/utils/interfaces/common-query.interface.ts\n            \n            interface\n            ICommonOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/constants/controller-prefix.constant.ts\n            \n            variable\n            ADMIN_API_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/constants/controller-prefix.constant.ts\n            \n            variable\n            API_PREFIX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/constants/controller-prefix.constant.ts\n            \n            variable\n            PUBLIC_API_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/data-source.ts\n            \n            variable\n            AppDataSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/1752751622275-init.ts\n            \n            class\n            Init1752751622275\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1753017922617-admins-table.ts\n            \n            class\n            AdminsTable1753017922617\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1753018246777-admins-table-alter.ts\n            \n            class\n            AdminsTableAlter1753018246777\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/admins/controller/admin.admin-users.controller.ts\n            \n            controller\n            AdminsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/admins/dto/create-admin-user.dto.ts\n            \n            class\n            CreateAdminDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/admins/dto/update-admin-user.dto.ts\n            \n            class\n            UpdateAdminDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/admins/dto/update-admin-user.dto.ts\n            \n            class\n            UpdateAdminPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/admins/entities/admin.entity.ts\n            \n            entity\n            Admins\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/admins/services/admin.admin-users.service.ts\n            \n            injectable\n            AdminsServiceAdmin\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/controllers/admin.auth.controller.ts\n            \n            controller\n            AuthControllerAdmin\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/controllers/public.auth.controller.ts\n            \n            controller\n            AuthControllerPublic\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorator/put-user.decorator.ts\n            \n            function\n            PutAdmin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorator/put-user.decorator.ts\n            \n            function\n            PutPublicUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth.dto.ts\n            \n            class\n            authDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/put-user.guard.ts\n            \n            interface\n            IJwtPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/put-user.guard.ts\n            \n            guard\n            AdminGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/put-user.guard.ts\n            \n            guard\n            PublicUserGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/services/admin.auth.service.ts\n            \n            injectable\n            AuthServiceAdmin\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/services/public.auth.service.ts\n            \n            injectable\n            AuthServicePublic\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/roles/controllers/admin.roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/roles/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/roles/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/roles/entities/role.entity.ts\n            \n            entity\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/todos/controllers/admin.todos.controller.ts\n            \n            controller\n            TodosControllerAdmin\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/todos/controllers/public.todos.controller.ts\n            \n            controller\n            TodosControllerPublic\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/todos/dto/create-todos.dto.ts\n            \n            class\n            CreateTodosDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/todos/dto/update-todos.dto.ts\n            \n            class\n            UpdateTodosDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/todos/entities/todos.entity.ts\n            \n            entity\n            Todos\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/todos/services/admin.todos.service.ts\n            \n            injectable\n            TodosServiceAdmin\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/todos/services/public.todos.service.ts\n            \n            injectable\n            TodosServicePublic\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/users/controllers/admin.users.controller.ts\n            \n            controller\n            UsersControllerAdmin\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/users/controllers/public.users.controller.ts\n            \n            controller\n            UsersControllerPublic\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            Users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/services/admin.users.service.ts\n            \n            injectable\n            UsersServiceAdmin\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/users/services/public.users.service.ts\n            \n            injectable\n            UsersServicePublic\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/swagger-nest-router.ts\n            \n            function\n            swaggerInit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/swagger.ts\n            \n            function\n            swaggerInit\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            bcryptjs : ^3.0.2\n        \n            dotenv : ^16.4.7\n        \n            nestjs-command : ^3.1.5\n        \n            nestjs-pino : ^4.4.0\n        \n            pino-pretty : ^13.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ControllerPrefix   (src/.../controller-prefix.constant.ts)\n                        \n                        \n                            UserRole   (src/.../user-roles.constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants/controller-prefix.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        ControllerPrefix\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 PUBLIC\n                            \n                        \n                        \n                            \n                                Value : public-user\n                            \n                        \n            \n        \n\n    src/constants/user-roles.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../cli.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            findAllPaginatedData   (src/.../common-query.ts)\n                        \n                        \n                            PutAdmin   (src/.../put-user.decorator.ts)\n                        \n                        \n                            PutPublicUser   (src/.../put-user.decorator.ts)\n                        \n                        \n                            ResponseMessage   (src/.../response.decorator.ts)\n                        \n                        \n                            seedAdmin   (src/.../seed-helper.ts)\n                        \n                        \n                            seedUserRoles   (src/.../seed-helper.ts)\n                        \n                        \n                            seedUsers   (src/.../seed-helper.ts)\n                        \n                        \n                            ShowPagination   (src/.../response.decorator.ts)\n                        \n                        \n                            swaggerInit   (src/.../swagger-nest-router.ts)\n                        \n                        \n                            swaggerInit   (src/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/cli.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common-modules/utils/functions/common-query.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findAllPaginatedData\n                        \n                    \n                \n            \n            \n                \nfindAllPaginatedData(options: ICommonOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            ICommonOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/modules/auth/decorator/put-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PutAdmin\n                        \n                    \n                \n            \n            \n                \nPutAdmin()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PutPublicUser\n                        \n                    \n                \n            \n            \n                \nPutPublicUser()\n                \n            \n\n\n\n\n        \n    \n    src/common-modules/response/decorators/response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ResponseMessage\n                        \n                    \n                \n            \n            \n                \nResponseMessage(message: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ShowPagination\n                        \n                    \n                \n            \n            \n                \nShowPagination(showPagination: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                showPagination\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/commands/seed-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedAdmin\n                        \n                    \n                \n            \n            \n                \nseedAdmin(queryRunner: QueryRunner, loggerService: MyLogger)\n                \n            \n\n\n\n\n            \n                \n                        \nAdmin Seeder *\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                loggerService\n                                            \n                                                            MyLogger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedUserRoles\n                        \n                    \n                \n            \n            \n                \nseedUserRoles(queryRunner: QueryRunner, loggerService: MyLogger)\n                \n            \n\n\n\n\n            \n                \n                        \nRoles Seeder *\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                loggerService\n                                            \n                                                            MyLogger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedUsers\n                        \n                    \n                \n            \n            \n                \nseedUsers(queryRunner: QueryRunner, loggerService: MyLogger)\n                \n            \n\n\n\n\n            \n                \n                        \nUsers Seeder *\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                loggerService\n                                            \n                                                            MyLogger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/swagger-nest-router.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerInit\n                        \n                    \n                \n            \n            \n                \nswaggerInit(app: NestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        NestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerInit\n                        \n                    \n                \n            \n            \n                \nswaggerInit(app: NestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        NestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ pnpm installCompile and run the project\nExample :# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodRun tests\nExample :# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ pnpm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminRouteModules\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AdminsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CliModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModules\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ErrorFilterModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PublicRouteModules\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResponseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RouterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TodosModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminRouteModules\n\n\n\ncluster_AdminRouteModules_imports\n\n\n\ncluster_AdminsModule\n\n\n\ncluster_AdminsModule_exports\n\n\n\ncluster_AdminsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CliModule\n\n\n\ncluster_CliModule_imports\n\n\n\ncluster_CliModule_providers\n\n\n\ncluster_CommonModules\n\n\n\ncluster_CommonModules_imports\n\n\n\ncluster_PublicRouteModules\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RouterModule\n\n\n\ncluster_RouterModule_imports\n\n\n\ncluster_TodosModule\n\n\n\ncluster_TodosModule_exports\n\n\n\ncluster_TodosModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAdminsModule\n\nAdminsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAdminsModule->AuthModule\n\n\n\n\n\nAdminRouteModules\n\nAdminRouteModules\n\nAdminRouteModules -->\n\nAdminsModule->AdminRouteModules\n\n\n\n\n\nAdminsServiceAdmin \n\nAdminsServiceAdmin \n\nAdminsServiceAdmin  -->\n\nAdminsModule->AdminsServiceAdmin \n\n\n\nAdminRouteModules -->\n\nAuthModule->AdminRouteModules\n\n\n\n\n\nAuthServiceAdmin \n\nAuthServiceAdmin \n\nAuthServiceAdmin  -->\n\nAuthModule->AuthServiceAdmin \n\n\n\n\n\nAuthServicePublic \n\nAuthServicePublic \n\nAuthServicePublic  -->\n\nAuthModule->AuthServicePublic \n\n\n\n\n\nPublicRouteModules\n\nPublicRouteModules\n\nPublicRouteModules -->\n\nAuthModule->PublicRouteModules\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAdminRouteModules -->\n\nRolesModule->AdminRouteModules\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nTodosModule\n\nTodosModule\n\nAdminRouteModules -->\n\nTodosModule->AdminRouteModules\n\n\n\nPublicRouteModules -->\n\nTodosModule->PublicRouteModules\n\n\n\n\n\nTodosServiceAdmin \n\nTodosServiceAdmin \n\nTodosServiceAdmin  -->\n\nTodosModule->TodosServiceAdmin \n\n\n\n\n\nTodosServicePublic \n\nTodosServicePublic \n\nTodosServicePublic  -->\n\nTodosModule->TodosServicePublic \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAdminRouteModules -->\n\nUsersModule->AdminRouteModules\n\n\n\nPublicRouteModules -->\n\nUsersModule->PublicRouteModules\n\n\n\n\n\nUsersServiceAdmin \n\nUsersServiceAdmin \n\nUsersServiceAdmin  -->\n\nUsersModule->UsersServiceAdmin \n\n\n\n\n\nUsersServicePublic \n\nUsersServicePublic \n\nUsersServicePublic  -->\n\nUsersModule->UsersServicePublic \n\n\n\n\n\nRouterModule\n\nRouterModule\n\nRouterModule -->\n\nAdminRouteModules->RouterModule\n\n\n\n\n\nAdminsServiceAdmin\n\nAdminsServiceAdmin\n\nAdminsModule -->\n\nAdminsServiceAdmin->AdminsModule\n\n\n\n\n\nCommonModules\n\nCommonModules\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonModules->AppModule\n\n\n\nAppModule -->\n\nRouterModule->AppModule\n\n\n\n\n\nAuthServiceAdmin\n\nAuthServiceAdmin\n\nAuthModule -->\n\nAuthServiceAdmin->AuthModule\n\n\n\n\n\nAuthServicePublic\n\nAuthServicePublic\n\nAuthModule -->\n\nAuthServicePublic->AuthModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nCommonModules -->\n\nDatabaseModule->CommonModules\n\n\n\n\n\nCliModule\n\nCliModule\n\nCliModule -->\n\nDatabaseModule->CliModule\n\n\n\n\n\nSeedTodoDatabase\n\nSeedTodoDatabase\n\nCliModule -->\n\nSeedTodoDatabase->CliModule\n\n\n\n\n\nSeedUsersDatabase\n\nSeedUsersDatabase\n\nCliModule -->\n\nSeedUsersDatabase->CliModule\n\n\n\n\n\nErrorFilterModule\n\nErrorFilterModule\n\nCommonModules -->\n\nErrorFilterModule->CommonModules\n\n\n\n\n\nResponseModule\n\nResponseModule\n\nCommonModules -->\n\nResponseModule->CommonModules\n\n\n\nRouterModule -->\n\nPublicRouteModules->RouterModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nNestRouter\n\nNestRouter\n\nRouterModule -->\n\nNestRouter->RouterModule\n\n\n\n\n\nTodosServiceAdmin\n\nTodosServiceAdmin\n\nTodosModule -->\n\nTodosServiceAdmin->TodosModule\n\n\n\n\n\nTodosServicePublic\n\nTodosServicePublic\n\nTodosModule -->\n\nTodosServicePublic->TodosModule\n\n\n\n\n\nUsersServiceAdmin\n\nUsersServiceAdmin\n\nUsersModule -->\n\nUsersServiceAdmin->UsersModule\n\n\n\n\n\nUsersServicePublic\n\nUsersServicePublic\n\nUsersModule -->\n\nUsersServicePublic->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        14 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ADMIN_API_PATH   (src/.../controller-prefix.constant.ts)\n                        \n                        \n                            API_PREFIX   (src/.../controller-prefix.constant.ts)\n                        \n                        \n                            AppDataSource   (src/.../data-source.ts)\n                        \n                        \n                            jsonData   (src/.../index.ts)\n                        \n                        \n                            PUBLIC_API_PATH   (src/.../controller-prefix.constant.ts)\n                        \n                        \n                            testFn   (src/.../index.ts)\n                        \n                        \n                            User   (src/.../request.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants/controller-prefix.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ADMIN_API_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : API_PREFIX?.startsWith('/')\n  ? `${API_PREFIX}/${ControllerPrefix.ADMIN}`\n  : API_PREFIX\n    ? `/${API_PREFIX}/${ControllerPrefix.ADMIN}`\n    : `/${ControllerPrefix.ADMIN}`\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUBLIC_API_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : API_PREFIX?.startsWith('/')\n  ? `${API_PREFIX}/${ControllerPrefix.PUBLIC}`\n  : API_PREFIX\n    ? `/${API_PREFIX}/${ControllerPrefix.PUBLIC}`\n    : `/${ControllerPrefix.PUBLIC}`\n                    \n                \n\n\n        \n    \n\n    src/data-source.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSource\n\n                    \n                \n                \n                    \n                        Default value : new DataSource({\n  type: 'postgres',\n  username: process.env.DATABASE_USERNAME,\n  password: process.env.DATABASE_PASSWORD,\n  database: process.env.DATABASE_NAME,\n  host: 'localhost',\n  port: +process.env.DATABASE_PORT,\n  entities: [__dirname + '/**/*.entity{.ts,.js}'],\n  migrations: [__dirname + '/migrations/**/*{.ts,.js}'],\n  synchronize: false,\n})\n                    \n                \n\n\n        \n    \n\n    src/commands/todos-json/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jsonData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('./todos.json')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testFn\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (jsonData) => {\n  const newData = jsonData.map((datum) => ({\n    title: datum.title,\n    description: datum.description,\n  }));\n  fs.writeFileSync('./todos.json', JSON.stringify(newData));\n}\n                    \n                \n\n\n        \n    \n\n    src/common-modules/request/decorators/request.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n\n  const user = request?.['user'];\n\n  return user;\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
